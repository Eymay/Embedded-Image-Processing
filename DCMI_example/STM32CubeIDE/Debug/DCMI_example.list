
DCMI_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000508  080070d4  080070d4  000170d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075dc  080075dc  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  080075dc  080075dc  000175dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080075e4  080075e4  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075e4  080075e4  000175e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075e8  080075e8  000175e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080075ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00003e88  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003ef8  20003ef8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   00010078  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000ecdd  00000000  00000000  00030118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002104  00000000  00000000  0003edf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b30  00000000  00000000  00040f00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c70fa  00000000  00000000  00041a30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000a98  00000000  00000000  00108b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002144b  00000000  00000000  001095c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0012aa13  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003170  00000000  00000000  0012aa64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080070bc 	.word	0x080070bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080070bc 	.word	0x080070bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800058a:	490e      	ldr	r1, [pc, #56]	; (80005c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800058c:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000590:	e002      	b.n	8000598 <LoopCopyDataInit>

08000592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000596:	3304      	adds	r3, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800059c:	d3f9      	bcc.n	8000592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005a0:	4c0b      	ldr	r4, [pc, #44]	; (80005d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a4:	e001      	b.n	80005aa <LoopFillZerobss>

080005a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a8:	3204      	adds	r2, #4

080005aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ac:	d3fb      	bcc.n	80005a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005ae:	f000 fd17 	bl	8000fe0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005b2:	f006 f8e9 	bl	8006788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005b6:	f000 f845 	bl	8000644 <main>
  bx  lr    
 80005ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005c8:	080075ec 	.word	0x080075ec
  ldr r2, =_sbss
 80005cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005d0:	20003ef8 	.word	0x20003ef8

080005d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC_IRQHandler>
	...

080005d8 <vprint>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vprint(const char *fmt, va_list argp) {
 80005d8:	b580      	push	{r7, lr}
 80005da:	b0b4      	sub	sp, #208	; 0xd0
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
 80005e0:	6039      	str	r1, [r7, #0]
	char string[200];
	if (0 < vsprintf(string, fmt, argp)) // build string
 80005e2:	f107 0308 	add.w	r3, r7, #8
 80005e6:	683a      	ldr	r2, [r7, #0]
 80005e8:	6879      	ldr	r1, [r7, #4]
 80005ea:	4618      	mov	r0, r3
 80005ec:	f006 f90e 	bl	800680c <vsiprintf>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	dd0d      	ble.n	8000612 <vprint+0x3a>
			{
		HAL_UART_Transmit(&huart2, (uint8_t*) string, strlen(string), 0xffffff); // send message via UART
 80005f6:	f107 0308 	add.w	r3, r7, #8
 80005fa:	4618      	mov	r0, r3
 80005fc:	f7ff fde8 	bl	80001d0 <strlen>
 8000600:	4603      	mov	r3, r0
 8000602:	b29a      	uxth	r2, r3
 8000604:	f107 0108 	add.w	r1, r7, #8
 8000608:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800060c:	4803      	ldr	r0, [pc, #12]	; (800061c <vprint+0x44>)
 800060e:	f004 fdac 	bl	800516a <HAL_UART_Transmit>
	}
}
 8000612:	bf00      	nop
 8000614:	37d0      	adds	r7, #208	; 0xd0
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	20000180 	.word	0x20000180

08000620 <my_printf>:

void my_printf(const char *fmt, ...) // custom printf() function
{
 8000620:	b40f      	push	{r0, r1, r2, r3}
 8000622:	b580      	push	{r7, lr}
 8000624:	b082      	sub	sp, #8
 8000626:	af00      	add	r7, sp, #0
	va_list argp;
	va_start(argp, fmt);
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	607b      	str	r3, [r7, #4]
	vprint(fmt, argp);
 800062e:	6879      	ldr	r1, [r7, #4]
 8000630:	6938      	ldr	r0, [r7, #16]
 8000632:	f7ff ffd1 	bl	80005d8 <vprint>
	va_end(argp);
}
 8000636:	bf00      	nop
 8000638:	3708      	adds	r7, #8
 800063a:	46bd      	mov	sp, r7
 800063c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000640:	b004      	add	sp, #16
 8000642:	4770      	bx	lr

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000648:	f000 fcdc 	bl	8001004 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064c:	f000 f8a8 	bl	80007a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000650:	f000 f9c0 	bl	80009d4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000654:	f000 f988 	bl	8000968 <MX_DMA_Init>
  MX_DCMI_Init();
 8000658:	f000 f906 	bl	8000868 <MX_DCMI_Init>
  MX_I2C1_Init();
 800065c:	f000 f92c 	bl	80008b8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000660:	f000 f958 	bl	8000914 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  OV7670_Init(&hi2c1, &hdcmi);
 8000664:	4942      	ldr	r1, [pc, #264]	; (8000770 <main+0x12c>)
 8000666:	4843      	ldr	r0, [pc, #268]	; (8000774 <main+0x130>)
 8000668:	f005 fe9c 	bl	80063a4 <OV7670_Init>
  	HAL_Delay(10);
 800066c:	200a      	movs	r0, #10
 800066e:	f000 fd3b 	bl	80010e8 <HAL_Delay>
  	OV7670_ResolutionOptions(15534);
 8000672:	f643 40ae 	movw	r0, #15534	; 0x3cae
 8000676:	f005 fedd 	bl	8006434 <OV7670_ResolutionOptions>
  	HAL_Delay(10);
 800067a:	200a      	movs	r0, #10
 800067c:	f000 fd34 	bl	80010e8 <HAL_Delay>
  	//volatile uint32_t dma_buff[buff_size];
  	__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);
  	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)FRAME_BUFFER, frame_size);
	*/
#ifdef DEBUG
	my_printf("Finishing configuration \r\n");
 8000680:	483d      	ldr	r0, [pc, #244]	; (8000778 <main+0x134>)
 8000682:	f7ff ffcd 	bl	8000620 <my_printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)) {
 8000686:	2101      	movs	r1, #1
 8000688:	483c      	ldr	r0, [pc, #240]	; (800077c <main+0x138>)
 800068a:	f003 f899 	bl	80037c0 <HAL_GPIO_ReadPin>
 800068e:	4603      	mov	r3, r0
 8000690:	2b00      	cmp	r3, #0
 8000692:	d068      	beq.n	8000766 <main+0x122>
	  			if (mutex == 1) {
 8000694:	4b3a      	ldr	r3, [pc, #232]	; (8000780 <main+0x13c>)
 8000696:	881b      	ldrh	r3, [r3, #0]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d1f4      	bne.n	8000686 <main+0x42>
	  				memset(frameBuffer, 0, sizeof frameBuffer);
 800069c:	f643 42ae 	movw	r2, #15534	; 0x3cae
 80006a0:	2100      	movs	r1, #0
 80006a2:	4838      	ldr	r0, [pc, #224]	; (8000784 <main+0x140>)
 80006a4:	f006 f894 	bl	80067d0 <memset>
	  				OV7670_CaptureSnapshot((uint32_t) frameBuffer, 15534);
 80006a8:	4b36      	ldr	r3, [pc, #216]	; (8000784 <main+0x140>)
 80006aa:	f643 41ae 	movw	r1, #15534	; 0x3cae
 80006ae:	4618      	mov	r0, r3
 80006b0:	f005 ffdc 	bl	800666c <OV7670_CaptureSnapshot>

	  				while (1) {
	  					if (headerFound == 0 && frameBuffer[bufferPointer] == 0xFF
 80006b4:	4b34      	ldr	r3, [pc, #208]	; (8000788 <main+0x144>)
 80006b6:	881b      	ldrh	r3, [r3, #0]
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d113      	bne.n	80006e4 <main+0xa0>
 80006bc:	4b33      	ldr	r3, [pc, #204]	; (800078c <main+0x148>)
 80006be:	881b      	ldrh	r3, [r3, #0]
 80006c0:	461a      	mov	r2, r3
 80006c2:	4b30      	ldr	r3, [pc, #192]	; (8000784 <main+0x140>)
 80006c4:	5c9b      	ldrb	r3, [r3, r2]
 80006c6:	2bff      	cmp	r3, #255	; 0xff
 80006c8:	d10c      	bne.n	80006e4 <main+0xa0>
	  							&& frameBuffer[bufferPointer + 1] == 0xD8) {
 80006ca:	4b30      	ldr	r3, [pc, #192]	; (800078c <main+0x148>)
 80006cc:	881b      	ldrh	r3, [r3, #0]
 80006ce:	3301      	adds	r3, #1
 80006d0:	4a2c      	ldr	r2, [pc, #176]	; (8000784 <main+0x140>)
 80006d2:	5cd3      	ldrb	r3, [r2, r3]
 80006d4:	2bd8      	cmp	r3, #216	; 0xd8
 80006d6:	d105      	bne.n	80006e4 <main+0xa0>
	  						headerFound = 1;
 80006d8:	4b2b      	ldr	r3, [pc, #172]	; (8000788 <main+0x144>)
 80006da:	2201      	movs	r2, #1
 80006dc:	801a      	strh	r2, [r3, #0]
	  					#ifdef DEBUG
	  						my_printf("Found header of JPEG file \r\n");
 80006de:	482c      	ldr	r0, [pc, #176]	; (8000790 <main+0x14c>)
 80006e0:	f7ff ff9e 	bl	8000620 <my_printf>
	  					#endif
	  					}
	  					if (headerFound == 1 && frameBuffer[bufferPointer] == 0xFF
 80006e4:	4b28      	ldr	r3, [pc, #160]	; (8000788 <main+0x144>)
 80006e6:	881b      	ldrh	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d11a      	bne.n	8000722 <main+0xde>
 80006ec:	4b27      	ldr	r3, [pc, #156]	; (800078c <main+0x148>)
 80006ee:	881b      	ldrh	r3, [r3, #0]
 80006f0:	461a      	mov	r2, r3
 80006f2:	4b24      	ldr	r3, [pc, #144]	; (8000784 <main+0x140>)
 80006f4:	5c9b      	ldrb	r3, [r3, r2]
 80006f6:	2bff      	cmp	r3, #255	; 0xff
 80006f8:	d113      	bne.n	8000722 <main+0xde>
	  							&& frameBuffer[bufferPointer + 1] == 0xD9) {
 80006fa:	4b24      	ldr	r3, [pc, #144]	; (800078c <main+0x148>)
 80006fc:	881b      	ldrh	r3, [r3, #0]
 80006fe:	3301      	adds	r3, #1
 8000700:	4a20      	ldr	r2, [pc, #128]	; (8000784 <main+0x140>)
 8000702:	5cd3      	ldrb	r3, [r2, r3]
 8000704:	2bd9      	cmp	r3, #217	; 0xd9
 8000706:	d10c      	bne.n	8000722 <main+0xde>
	  						bufferPointer = bufferPointer + 2;
 8000708:	4b20      	ldr	r3, [pc, #128]	; (800078c <main+0x148>)
 800070a:	881b      	ldrh	r3, [r3, #0]
 800070c:	3302      	adds	r3, #2
 800070e:	b29a      	uxth	r2, r3
 8000710:	4b1e      	ldr	r3, [pc, #120]	; (800078c <main+0x148>)
 8000712:	801a      	strh	r2, [r3, #0]
	  					#ifdef DEBUG
	  						my_printf("Found EOF of JPEG file \r\n");
 8000714:	481f      	ldr	r0, [pc, #124]	; (8000794 <main+0x150>)
 8000716:	f7ff ff83 	bl	8000620 <my_printf>
	  						#endif
	  						headerFound = 0;
 800071a:	4b1b      	ldr	r3, [pc, #108]	; (8000788 <main+0x144>)
 800071c:	2200      	movs	r2, #0
 800071e:	801a      	strh	r2, [r3, #0]
	  						break;
 8000720:	e00d      	b.n	800073e <main+0xfa>
	  					}

	  					if (bufferPointer >= 65535) {
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <main+0x148>)
 8000724:	881b      	ldrh	r3, [r3, #0]
 8000726:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800072a:	4293      	cmp	r3, r2
 800072c:	d006      	beq.n	800073c <main+0xf8>
	  						break;
	  					}
	  					bufferPointer++;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <main+0x148>)
 8000730:	881b      	ldrh	r3, [r3, #0]
 8000732:	3301      	adds	r3, #1
 8000734:	b29a      	uxth	r2, r3
 8000736:	4b15      	ldr	r3, [pc, #84]	; (800078c <main+0x148>)
 8000738:	801a      	strh	r2, [r3, #0]
	  					if (headerFound == 0 && frameBuffer[bufferPointer] == 0xFF
 800073a:	e7bb      	b.n	80006b4 <main+0x70>
	  						break;
 800073c:	bf00      	nop
	  				}
	  					#ifdef DEBUG
	  						my_printf("Image size: %d bytes \r\n",bufferPointer);
 800073e:	4b13      	ldr	r3, [pc, #76]	; (800078c <main+0x148>)
 8000740:	881b      	ldrh	r3, [r3, #0]
 8000742:	4619      	mov	r1, r3
 8000744:	4814      	ldr	r0, [pc, #80]	; (8000798 <main+0x154>)
 8000746:	f7ff ff6b 	bl	8000620 <my_printf>
	  					#endif

	  				HAL_UART_Transmit_DMA(&huart2, frameBuffer, bufferPointer); //Use of DMA may be necessary for larger data streams.
 800074a:	4b10      	ldr	r3, [pc, #64]	; (800078c <main+0x148>)
 800074c:	881b      	ldrh	r3, [r3, #0]
 800074e:	461a      	mov	r2, r3
 8000750:	490c      	ldr	r1, [pc, #48]	; (8000784 <main+0x140>)
 8000752:	4812      	ldr	r0, [pc, #72]	; (800079c <main+0x158>)
 8000754:	f004 fd9c 	bl	8005290 <HAL_UART_Transmit_DMA>
	  				bufferPointer = 0;
 8000758:	4b0c      	ldr	r3, [pc, #48]	; (800078c <main+0x148>)
 800075a:	2200      	movs	r2, #0
 800075c:	801a      	strh	r2, [r3, #0]
	  				mutex = 0;
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <main+0x13c>)
 8000760:	2200      	movs	r2, #0
 8000762:	801a      	strh	r2, [r3, #0]
 8000764:	e78f      	b.n	8000686 <main+0x42>
	  			}
	  		} else {
	  			mutex = 1;
 8000766:	4b06      	ldr	r3, [pc, #24]	; (8000780 <main+0x13c>)
 8000768:	2201      	movs	r2, #1
 800076a:	801a      	strh	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)) {
 800076c:	e78b      	b.n	8000686 <main+0x42>
 800076e:	bf00      	nop
 8000770:	2000008c 	.word	0x2000008c
 8000774:	2000012c 	.word	0x2000012c
 8000778:	080070d4 	.word	0x080070d4
 800077c:	40020000 	.word	0x40020000
 8000780:	20003ed2 	.word	0x20003ed2
 8000784:	20000224 	.word	0x20000224
 8000788:	20003ed6 	.word	0x20003ed6
 800078c:	20003ed4 	.word	0x20003ed4
 8000790:	080070f0 	.word	0x080070f0
 8000794:	08007110 	.word	0x08007110
 8000798:	0800712c 	.word	0x0800712c
 800079c:	20000180 	.word	0x20000180

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b094      	sub	sp, #80	; 0x50
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0320 	add.w	r3, r7, #32
 80007aa:	2230      	movs	r2, #48	; 0x30
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f006 f80e 	bl	80067d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	f107 030c 	add.w	r3, r7, #12
 80007b8:	2200      	movs	r2, #0
 80007ba:	601a      	str	r2, [r3, #0]
 80007bc:	605a      	str	r2, [r3, #4]
 80007be:	609a      	str	r2, [r3, #8]
 80007c0:	60da      	str	r2, [r3, #12]
 80007c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c4:	2300      	movs	r3, #0
 80007c6:	60bb      	str	r3, [r7, #8]
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <SystemClock_Config+0xc0>)
 80007ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007cc:	4a24      	ldr	r2, [pc, #144]	; (8000860 <SystemClock_Config+0xc0>)
 80007ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007d2:	6413      	str	r3, [r2, #64]	; 0x40
 80007d4:	4b22      	ldr	r3, [pc, #136]	; (8000860 <SystemClock_Config+0xc0>)
 80007d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007dc:	60bb      	str	r3, [r7, #8]
 80007de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
 80007e4:	4b1f      	ldr	r3, [pc, #124]	; (8000864 <SystemClock_Config+0xc4>)
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a1e      	ldr	r2, [pc, #120]	; (8000864 <SystemClock_Config+0xc4>)
 80007ea:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ee:	6013      	str	r3, [r2, #0]
 80007f0:	4b1c      	ldr	r3, [pc, #112]	; (8000864 <SystemClock_Config+0xc4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007fc:	2302      	movs	r3, #2
 80007fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000800:	2301      	movs	r3, #1
 8000802:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000804:	2310      	movs	r3, #16
 8000806:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000808:	2300      	movs	r3, #0
 800080a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800080c:	f107 0320 	add.w	r3, r7, #32
 8000810:	4618      	mov	r0, r3
 8000812:	f003 ff9d 	bl	8004750 <HAL_RCC_OscConfig>
 8000816:	4603      	mov	r3, r0
 8000818:	2b00      	cmp	r3, #0
 800081a:	d001      	beq.n	8000820 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800081c:	f000 f966 	bl	8000aec <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000820:	230f      	movs	r3, #15
 8000822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000824:	2300      	movs	r3, #0
 8000826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000828:	2300      	movs	r3, #0
 800082a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800082c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000838:	f107 030c 	add.w	r3, r7, #12
 800083c:	2100      	movs	r1, #0
 800083e:	4618      	mov	r0, r3
 8000840:	f004 f9fe 	bl	8004c40 <HAL_RCC_ClockConfig>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800084a:	f000 f94f 	bl	8000aec <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 800084e:	2200      	movs	r2, #0
 8000850:	2100      	movs	r1, #0
 8000852:	2000      	movs	r0, #0
 8000854:	f004 fada 	bl	8004e0c <HAL_RCC_MCOConfig>
}
 8000858:	bf00      	nop
 800085a:	3750      	adds	r7, #80	; 0x50
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 800086c:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <MX_DCMI_Init+0x48>)
 800086e:	4a11      	ldr	r2, [pc, #68]	; (80008b4 <MX_DCMI_Init+0x4c>)
 8000870:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000872:	4b0f      	ldr	r3, [pc, #60]	; (80008b0 <MX_DCMI_Init+0x48>)
 8000874:	2200      	movs	r2, #0
 8000876:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 8000878:	4b0d      	ldr	r3, [pc, #52]	; (80008b0 <MX_DCMI_Init+0x48>)
 800087a:	2220      	movs	r2, #32
 800087c:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 800087e:	4b0c      	ldr	r3, [pc, #48]	; (80008b0 <MX_DCMI_Init+0x48>)
 8000880:	2200      	movs	r2, #0
 8000882:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <MX_DCMI_Init+0x48>)
 8000886:	2200      	movs	r2, #0
 8000888:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800088a:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <MX_DCMI_Init+0x48>)
 800088c:	2200      	movs	r2, #0
 800088e:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000890:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <MX_DCMI_Init+0x48>)
 8000892:	2200      	movs	r2, #0
 8000894:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_ENABLE;
 8000896:	4b06      	ldr	r3, [pc, #24]	; (80008b0 <MX_DCMI_Init+0x48>)
 8000898:	2208      	movs	r2, #8
 800089a:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	; (80008b0 <MX_DCMI_Init+0x48>)
 800089e:	f000 fffb 	bl	8001898 <HAL_DCMI_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 80008a8:	f000 f920 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	2000008c 	.word	0x2000008c
 80008b4:	50050000 	.word	0x50050000

080008b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008bc:	4b12      	ldr	r3, [pc, #72]	; (8000908 <MX_I2C1_Init+0x50>)
 80008be:	4a13      	ldr	r2, [pc, #76]	; (800090c <MX_I2C1_Init+0x54>)
 80008c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008c2:	4b11      	ldr	r3, [pc, #68]	; (8000908 <MX_I2C1_Init+0x50>)
 80008c4:	4a12      	ldr	r2, [pc, #72]	; (8000910 <MX_I2C1_Init+0x58>)
 80008c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008c8:	4b0f      	ldr	r3, [pc, #60]	; (8000908 <MX_I2C1_Init+0x50>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008ce:	4b0e      	ldr	r3, [pc, #56]	; (8000908 <MX_I2C1_Init+0x50>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008d4:	4b0c      	ldr	r3, [pc, #48]	; (8000908 <MX_I2C1_Init+0x50>)
 80008d6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008dc:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <MX_I2C1_Init+0x50>)
 80008de:	2200      	movs	r2, #0
 80008e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008e2:	4b09      	ldr	r3, [pc, #36]	; (8000908 <MX_I2C1_Init+0x50>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008e8:	4b07      	ldr	r3, [pc, #28]	; (8000908 <MX_I2C1_Init+0x50>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ee:	4b06      	ldr	r3, [pc, #24]	; (8000908 <MX_I2C1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008f4:	4804      	ldr	r0, [pc, #16]	; (8000908 <MX_I2C1_Init+0x50>)
 80008f6:	f002 ff95 	bl	8003824 <HAL_I2C_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000900:	f000 f8f4 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	2000012c 	.word	0x2000012c
 800090c:	40005400 	.word	0x40005400
 8000910:	000186a0 	.word	0x000186a0

08000914 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000918:	4b11      	ldr	r3, [pc, #68]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800091a:	4a12      	ldr	r2, [pc, #72]	; (8000964 <MX_USART2_UART_Init+0x50>)
 800091c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000924:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800092c:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000932:	4b0b      	ldr	r3, [pc, #44]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000934:	2200      	movs	r2, #0
 8000936:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000938:	4b09      	ldr	r3, [pc, #36]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800093a:	220c      	movs	r2, #12
 800093c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093e:	4b08      	ldr	r3, [pc, #32]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000940:	2200      	movs	r2, #0
 8000942:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000944:	4b06      	ldr	r3, [pc, #24]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 8000946:	2200      	movs	r2, #0
 8000948:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094a:	4805      	ldr	r0, [pc, #20]	; (8000960 <MX_USART2_UART_Init+0x4c>)
 800094c:	f004 fbc0 	bl	80050d0 <HAL_UART_Init>
 8000950:	4603      	mov	r3, r0
 8000952:	2b00      	cmp	r3, #0
 8000954:	d001      	beq.n	800095a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000956:	f000 f8c9 	bl	8000aec <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095a:	bf00      	nop
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000180 	.word	0x20000180
 8000964:	40004400 	.word	0x40004400

08000968 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
 8000972:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <MX_DMA_Init+0x68>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a16      	ldr	r2, [pc, #88]	; (80009d0 <MX_DMA_Init+0x68>)
 8000978:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <MX_DMA_Init+0x68>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000986:	607b      	str	r3, [r7, #4]
 8000988:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <MX_DMA_Init+0x68>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000992:	4a0f      	ldr	r2, [pc, #60]	; (80009d0 <MX_DMA_Init+0x68>)
 8000994:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000998:	6313      	str	r3, [r2, #48]	; 0x30
 800099a:	4b0d      	ldr	r3, [pc, #52]	; (80009d0 <MX_DMA_Init+0x68>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009a2:	603b      	str	r3, [r7, #0]
 80009a4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2100      	movs	r1, #0
 80009aa:	2011      	movs	r0, #17
 80009ac:	f000 fc9b 	bl	80012e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80009b0:	2011      	movs	r0, #17
 80009b2:	f000 fcb4 	bl	800131e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 80009b6:	2200      	movs	r2, #0
 80009b8:	2100      	movs	r1, #0
 80009ba:	2039      	movs	r0, #57	; 0x39
 80009bc:	f000 fc93 	bl	80012e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009c0:	2039      	movs	r0, #57	; 0x39
 80009c2:	f000 fcac 	bl	800131e <HAL_NVIC_EnableIRQ>

}
 80009c6:	bf00      	nop
 80009c8:	3708      	adds	r7, #8
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800

080009d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
 80009e6:	60da      	str	r2, [r3, #12]
 80009e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b3c      	ldr	r3, [pc, #240]	; (8000ae0 <MX_GPIO_Init+0x10c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a3b      	ldr	r2, [pc, #236]	; (8000ae0 <MX_GPIO_Init+0x10c>)
 80009f4:	f043 0310 	orr.w	r3, r3, #16
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b39      	ldr	r3, [pc, #228]	; (8000ae0 <MX_GPIO_Init+0x10c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0310 	and.w	r3, r3, #16
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b35      	ldr	r3, [pc, #212]	; (8000ae0 <MX_GPIO_Init+0x10c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a34      	ldr	r2, [pc, #208]	; (8000ae0 <MX_GPIO_Init+0x10c>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b32      	ldr	r3, [pc, #200]	; (8000ae0 <MX_GPIO_Init+0x10c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b2e      	ldr	r3, [pc, #184]	; (8000ae0 <MX_GPIO_Init+0x10c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a2d      	ldr	r2, [pc, #180]	; (8000ae0 <MX_GPIO_Init+0x10c>)
 8000a2c:	f043 0304 	orr.w	r3, r3, #4
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b2b      	ldr	r3, [pc, #172]	; (8000ae0 <MX_GPIO_Init+0x10c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0304 	and.w	r3, r3, #4
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <MX_GPIO_Init+0x10c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a26      	ldr	r2, [pc, #152]	; (8000ae0 <MX_GPIO_Init+0x10c>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b24      	ldr	r3, [pc, #144]	; (8000ae0 <MX_GPIO_Init+0x10c>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a60:	4820      	ldr	r0, [pc, #128]	; (8000ae4 <MX_GPIO_Init+0x110>)
 8000a62:	f002 fec5 	bl	80037f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000a66:	2301      	movs	r3, #1
 8000a68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a6a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a70:	2300      	movs	r3, #0
 8000a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000a74:	f107 0314 	add.w	r3, r7, #20
 8000a78:	4619      	mov	r1, r3
 8000a7a:	481b      	ldr	r0, [pc, #108]	; (8000ae8 <MX_GPIO_Init+0x114>)
 8000a7c:	f002 fd04 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8000a80:	2380      	movs	r3, #128	; 0x80
 8000a82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a84:	2300      	movs	r3, #0
 8000a86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a8c:	f107 0314 	add.w	r3, r7, #20
 8000a90:	4619      	mov	r1, r3
 8000a92:	4814      	ldr	r0, [pc, #80]	; (8000ae4 <MX_GPIO_Init+0x110>)
 8000a94:	f002 fcf8 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_PWDN_Pin */
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin;
 8000a98:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a9e:	2301      	movs	r3, #1
 8000aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAMERA_PWDN_GPIO_Port, &GPIO_InitStruct);
 8000aaa:	f107 0314 	add.w	r3, r7, #20
 8000aae:	4619      	mov	r1, r3
 8000ab0:	480c      	ldr	r0, [pc, #48]	; (8000ae4 <MX_GPIO_Init+0x110>)
 8000ab2:	f002 fce9 	bl	8003488 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_XCLK_Pin */
  GPIO_InitStruct.Pin = DCMI_XCLK_Pin;
 8000ab6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000aba:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000abc:	2302      	movs	r3, #2
 8000abe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ac4:	2303      	movs	r3, #3
 8000ac6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DCMI_XCLK_GPIO_Port, &GPIO_InitStruct);
 8000acc:	f107 0314 	add.w	r3, r7, #20
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4805      	ldr	r0, [pc, #20]	; (8000ae8 <MX_GPIO_Init+0x114>)
 8000ad4:	f002 fcd8 	bl	8003488 <HAL_GPIO_Init>

}
 8000ad8:	bf00      	nop
 8000ada:	3728      	adds	r7, #40	; 0x28
 8000adc:	46bd      	mov	sp, r7
 8000ade:	bd80      	pop	{r7, pc}
 8000ae0:	40023800 	.word	0x40023800
 8000ae4:	40021000 	.word	0x40021000
 8000ae8:	40020000 	.word	0x40020000

08000aec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000af0:	b672      	cpsid	i
}
 8000af2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000af4:	e7fe      	b.n	8000af4 <Error_Handler+0x8>
	...

08000af8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	607b      	str	r3, [r7, #4]
 8000b02:	4b10      	ldr	r3, [pc, #64]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	4a0f      	ldr	r2, [pc, #60]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0e:	4b0d      	ldr	r3, [pc, #52]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b16:	607b      	str	r3, [r7, #4]
 8000b18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	603b      	str	r3, [r7, #0]
 8000b1e:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a08      	ldr	r2, [pc, #32]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <HAL_MspInit+0x4c>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b36:	bf00      	nop
 8000b38:	370c      	adds	r7, #12
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b40:	4770      	bx	lr
 8000b42:	bf00      	nop
 8000b44:	40023800 	.word	0x40023800

08000b48 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b08c      	sub	sp, #48	; 0x30
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b50:	f107 031c 	add.w	r3, r7, #28
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	4a68      	ldr	r2, [pc, #416]	; (8000d08 <HAL_DCMI_MspInit+0x1c0>)
 8000b66:	4293      	cmp	r3, r2
 8000b68:	f040 80c9 	bne.w	8000cfe <HAL_DCMI_MspInit+0x1b6>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	61bb      	str	r3, [r7, #24]
 8000b70:	4b66      	ldr	r3, [pc, #408]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000b72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b74:	4a65      	ldr	r2, [pc, #404]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000b76:	f043 0301 	orr.w	r3, r3, #1
 8000b7a:	6353      	str	r3, [r2, #52]	; 0x34
 8000b7c:	4b63      	ldr	r3, [pc, #396]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000b7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b80:	f003 0301 	and.w	r3, r3, #1
 8000b84:	61bb      	str	r3, [r7, #24]
 8000b86:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b88:	2300      	movs	r3, #0
 8000b8a:	617b      	str	r3, [r7, #20]
 8000b8c:	4b5f      	ldr	r3, [pc, #380]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b90:	4a5e      	ldr	r2, [pc, #376]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6313      	str	r3, [r2, #48]	; 0x30
 8000b98:	4b5c      	ldr	r3, [pc, #368]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	f003 0310 	and.w	r3, r3, #16
 8000ba0:	617b      	str	r3, [r7, #20]
 8000ba2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	4b58      	ldr	r3, [pc, #352]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bac:	4a57      	ldr	r2, [pc, #348]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000bae:	f043 0301 	orr.w	r3, r3, #1
 8000bb2:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb4:	4b55      	ldr	r3, [pc, #340]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb8:	f003 0301 	and.w	r3, r3, #1
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b51      	ldr	r3, [pc, #324]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc8:	4a50      	ldr	r2, [pc, #320]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000bca:	f043 0304 	orr.w	r3, r3, #4
 8000bce:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd0:	4b4e      	ldr	r3, [pc, #312]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bdc:	2300      	movs	r3, #0
 8000bde:	60bb      	str	r3, [r7, #8]
 8000be0:	4b4a      	ldr	r3, [pc, #296]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be4:	4a49      	ldr	r2, [pc, #292]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000be6:	f043 0302 	orr.w	r3, r3, #2
 8000bea:	6313      	str	r3, [r2, #48]	; 0x30
 8000bec:	4b47      	ldr	r3, [pc, #284]	; (8000d0c <HAL_DCMI_MspInit+0x1c4>)
 8000bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf0:	f003 0302 	and.w	r3, r3, #2
 8000bf4:	60bb      	str	r3, [r7, #8]
 8000bf6:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000bf8:	2370      	movs	r3, #112	; 0x70
 8000bfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c08:	230d      	movs	r3, #13
 8000c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c0c:	f107 031c 	add.w	r3, r7, #28
 8000c10:	4619      	mov	r1, r3
 8000c12:	483f      	ldr	r0, [pc, #252]	; (8000d10 <HAL_DCMI_MspInit+0x1c8>)
 8000c14:	f002 fc38 	bl	8003488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000c18:	2350      	movs	r3, #80	; 0x50
 8000c1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c20:	2300      	movs	r3, #0
 8000c22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c28:	230d      	movs	r3, #13
 8000c2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	4838      	ldr	r0, [pc, #224]	; (8000d14 <HAL_DCMI_MspInit+0x1cc>)
 8000c34:	f002 fc28 	bl	8003488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8000c38:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3e:	2302      	movs	r3, #2
 8000c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c4a:	230d      	movs	r3, #13
 8000c4c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4e:	f107 031c 	add.w	r3, r7, #28
 8000c52:	4619      	mov	r1, r3
 8000c54:	4830      	ldr	r0, [pc, #192]	; (8000d18 <HAL_DCMI_MspInit+0x1d0>)
 8000c56:	f002 fc17 	bl	8003488 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c5a:	23c0      	movs	r3, #192	; 0xc0
 8000c5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c66:	2300      	movs	r3, #0
 8000c68:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c6a:	230d      	movs	r3, #13
 8000c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 031c 	add.w	r3, r7, #28
 8000c72:	4619      	mov	r1, r3
 8000c74:	4829      	ldr	r0, [pc, #164]	; (8000d1c <HAL_DCMI_MspInit+0x1d4>)
 8000c76:	f002 fc07 	bl	8003488 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8000c7a:	4b29      	ldr	r3, [pc, #164]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000c7c:	4a29      	ldr	r2, [pc, #164]	; (8000d24 <HAL_DCMI_MspInit+0x1dc>)
 8000c7e:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000c80:	4b27      	ldr	r3, [pc, #156]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000c82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c86:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c88:	4b25      	ldr	r3, [pc, #148]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000c8a:	2200      	movs	r2, #0
 8000c8c:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c8e:	4b24      	ldr	r3, [pc, #144]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000c94:	4b22      	ldr	r3, [pc, #136]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9a:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000c9c:	4b20      	ldr	r3, [pc, #128]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000c9e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ca2:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000ca6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000caa:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000cac:	4b1c      	ldr	r3, [pc, #112]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000cb4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cb8:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000cba:	4b19      	ldr	r3, [pc, #100]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000cbc:	2204      	movs	r2, #4
 8000cbe:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000cc0:	4b17      	ldr	r3, [pc, #92]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000cc2:	2203      	movs	r2, #3
 8000cc4:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_SINGLE;
 8000cc6:	4b16      	ldr	r3, [pc, #88]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000ccc:	4b14      	ldr	r3, [pc, #80]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000cd2:	4813      	ldr	r0, [pc, #76]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000cd4:	f000 fe4e 	bl	8001974 <HAL_DMA_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <HAL_DCMI_MspInit+0x19a>
    {
      Error_Handler();
 8000cde:	f7ff ff05 	bl	8000aec <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000ce6:	639a      	str	r2, [r3, #56]	; 0x38
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <HAL_DCMI_MspInit+0x1d8>)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	204e      	movs	r0, #78	; 0x4e
 8000cf4:	f000 faf7 	bl	80012e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000cf8:	204e      	movs	r0, #78	; 0x4e
 8000cfa:	f000 fb10 	bl	800131e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000cfe:	bf00      	nop
 8000d00:	3730      	adds	r7, #48	; 0x30
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	50050000 	.word	0x50050000
 8000d0c:	40023800 	.word	0x40023800
 8000d10:	40021000 	.word	0x40021000
 8000d14:	40020000 	.word	0x40020000
 8000d18:	40020800 	.word	0x40020800
 8000d1c:	40020400 	.word	0x40020400
 8000d20:	200000cc 	.word	0x200000cc
 8000d24:	40026428 	.word	0x40026428

08000d28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08a      	sub	sp, #40	; 0x28
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0314 	add.w	r3, r7, #20
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a19      	ldr	r2, [pc, #100]	; (8000dac <HAL_I2C_MspInit+0x84>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12c      	bne.n	8000da4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	613b      	str	r3, [r7, #16]
 8000d4e:	4b18      	ldr	r3, [pc, #96]	; (8000db0 <HAL_I2C_MspInit+0x88>)
 8000d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d52:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_I2C_MspInit+0x88>)
 8000d54:	f043 0302 	orr.w	r3, r3, #2
 8000d58:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <HAL_I2C_MspInit+0x88>)
 8000d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	613b      	str	r3, [r7, #16]
 8000d64:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d66:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d6c:	2312      	movs	r3, #18
 8000d6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d70:	2301      	movs	r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d74:	2303      	movs	r3, #3
 8000d76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d78:	2304      	movs	r3, #4
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d7c:	f107 0314 	add.w	r3, r7, #20
 8000d80:	4619      	mov	r1, r3
 8000d82:	480c      	ldr	r0, [pc, #48]	; (8000db4 <HAL_I2C_MspInit+0x8c>)
 8000d84:	f002 fb80 	bl	8003488 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d88:	2300      	movs	r3, #0
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	4b08      	ldr	r3, [pc, #32]	; (8000db0 <HAL_I2C_MspInit+0x88>)
 8000d8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d90:	4a07      	ldr	r2, [pc, #28]	; (8000db0 <HAL_I2C_MspInit+0x88>)
 8000d92:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d96:	6413      	str	r3, [r2, #64]	; 0x40
 8000d98:	4b05      	ldr	r3, [pc, #20]	; (8000db0 <HAL_I2C_MspInit+0x88>)
 8000d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000da4:	bf00      	nop
 8000da6:	3728      	adds	r7, #40	; 0x28
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40005400 	.word	0x40005400
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40020400 	.word	0x40020400

08000db8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b08a      	sub	sp, #40	; 0x28
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	601a      	str	r2, [r3, #0]
 8000dc8:	605a      	str	r2, [r3, #4]
 8000dca:	609a      	str	r2, [r3, #8]
 8000dcc:	60da      	str	r2, [r3, #12]
 8000dce:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	4a39      	ldr	r2, [pc, #228]	; (8000ebc <HAL_UART_MspInit+0x104>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d16b      	bne.n	8000eb2 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	4b38      	ldr	r3, [pc, #224]	; (8000ec0 <HAL_UART_MspInit+0x108>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	4a37      	ldr	r2, [pc, #220]	; (8000ec0 <HAL_UART_MspInit+0x108>)
 8000de4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000de8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dea:	4b35      	ldr	r3, [pc, #212]	; (8000ec0 <HAL_UART_MspInit+0x108>)
 8000dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df6:	2300      	movs	r3, #0
 8000df8:	60fb      	str	r3, [r7, #12]
 8000dfa:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <HAL_UART_MspInit+0x108>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	4a30      	ldr	r2, [pc, #192]	; (8000ec0 <HAL_UART_MspInit+0x108>)
 8000e00:	f043 0301 	orr.w	r3, r3, #1
 8000e04:	6313      	str	r3, [r2, #48]	; 0x30
 8000e06:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <HAL_UART_MspInit+0x108>)
 8000e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0a:	f003 0301 	and.w	r3, r3, #1
 8000e0e:	60fb      	str	r3, [r7, #12]
 8000e10:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e12:	230c      	movs	r3, #12
 8000e14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e16:	2302      	movs	r3, #2
 8000e18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e1e:	2303      	movs	r3, #3
 8000e20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e22:	2307      	movs	r3, #7
 8000e24:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4825      	ldr	r0, [pc, #148]	; (8000ec4 <HAL_UART_MspInit+0x10c>)
 8000e2e:	f002 fb2b 	bl	8003488 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e32:	4b25      	ldr	r3, [pc, #148]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e34:	4a25      	ldr	r2, [pc, #148]	; (8000ecc <HAL_UART_MspInit+0x114>)
 8000e36:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e38:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e3a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e3e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e40:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e42:	2240      	movs	r2, #64	; 0x40
 8000e44:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e46:	4b20      	ldr	r3, [pc, #128]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e4c:	4b1e      	ldr	r3, [pc, #120]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e52:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e54:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5a:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e60:	4b19      	ldr	r3, [pc, #100]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e66:	4b18      	ldr	r3, [pc, #96]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e68:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e6c:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e70:	2204      	movs	r2, #4
 8000e72:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e74:	4b14      	ldr	r3, [pc, #80]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e76:	2203      	movs	r2, #3
 8000e78:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e7a:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e80:	4b11      	ldr	r3, [pc, #68]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e86:	4810      	ldr	r0, [pc, #64]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e88:	f000 fd74 	bl	8001974 <HAL_DMA_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8000e92:	f7ff fe2b 	bl	8000aec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4a0b      	ldr	r2, [pc, #44]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e9a:	635a      	str	r2, [r3, #52]	; 0x34
 8000e9c:	4a0a      	ldr	r2, [pc, #40]	; (8000ec8 <HAL_UART_MspInit+0x110>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2026      	movs	r0, #38	; 0x26
 8000ea8:	f000 fa1d 	bl	80012e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eac:	2026      	movs	r0, #38	; 0x26
 8000eae:	f000 fa36 	bl	800131e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb2:	bf00      	nop
 8000eb4:	3728      	adds	r7, #40	; 0x28
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	40004400 	.word	0x40004400
 8000ec0:	40023800 	.word	0x40023800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	200001c4 	.word	0x200001c4
 8000ecc:	400260a0 	.word	0x400260a0

08000ed0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed4:	e7fe      	b.n	8000ed4 <NMI_Handler+0x4>

08000ed6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ed6:	b480      	push	{r7}
 8000ed8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eda:	e7fe      	b.n	8000eda <HardFault_Handler+0x4>

08000edc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee0:	e7fe      	b.n	8000ee0 <MemManage_Handler+0x4>

08000ee2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ee6:	e7fe      	b.n	8000ee6 <BusFault_Handler+0x4>

08000ee8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eec:	e7fe      	b.n	8000eec <UsageFault_Handler+0x4>

08000eee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eee:	b480      	push	{r7}
 8000ef0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef2:	bf00      	nop
 8000ef4:	46bd      	mov	sp, r7
 8000ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efa:	4770      	bx	lr

08000efc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f00:	bf00      	nop
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f1c:	f000 f8c4 	bl	80010a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f20:	bf00      	nop
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f28:	4802      	ldr	r0, [pc, #8]	; (8000f34 <DMA1_Stream6_IRQHandler+0x10>)
 8000f2a:	f000 febb 	bl	8001ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200001c4 	.word	0x200001c4

08000f38 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f3c:	4802      	ldr	r0, [pc, #8]	; (8000f48 <USART2_IRQHandler+0x10>)
 8000f3e:	f004 fa25 	bl	800538c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f42:	bf00      	nop
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20000180 	.word	0x20000180

08000f4c <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000f50:	4802      	ldr	r0, [pc, #8]	; (8000f5c <DMA2_Stream1_IRQHandler+0x10>)
 8000f52:	f000 fea7 	bl	8001ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000f56:	bf00      	nop
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	200000cc 	.word	0x200000cc

08000f60 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000f64:	4802      	ldr	r0, [pc, #8]	; (8000f70 <DCMI_IRQHandler+0x10>)
 8000f66:	f000 fb45 	bl	80015f4 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000f6a:	bf00      	nop
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	2000008c 	.word	0x2000008c

08000f74 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f7c:	4a14      	ldr	r2, [pc, #80]	; (8000fd0 <_sbrk+0x5c>)
 8000f7e:	4b15      	ldr	r3, [pc, #84]	; (8000fd4 <_sbrk+0x60>)
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f88:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d102      	bne.n	8000f96 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f90:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <_sbrk+0x64>)
 8000f92:	4a12      	ldr	r2, [pc, #72]	; (8000fdc <_sbrk+0x68>)
 8000f94:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f96:	4b10      	ldr	r3, [pc, #64]	; (8000fd8 <_sbrk+0x64>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	429a      	cmp	r2, r3
 8000fa2:	d207      	bcs.n	8000fb4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000fa4:	f005 fbea 	bl	800677c <__errno>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	220c      	movs	r2, #12
 8000fac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000fae:	f04f 33ff 	mov.w	r3, #4294967295
 8000fb2:	e009      	b.n	8000fc8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fb4:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <_sbrk+0x64>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fba:	4b07      	ldr	r3, [pc, #28]	; (8000fd8 <_sbrk+0x64>)
 8000fbc:	681a      	ldr	r2, [r3, #0]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	4a05      	ldr	r2, [pc, #20]	; (8000fd8 <_sbrk+0x64>)
 8000fc4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fc6:	68fb      	ldr	r3, [r7, #12]
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3718      	adds	r7, #24
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20020000 	.word	0x20020000
 8000fd4:	00000400 	.word	0x00000400
 8000fd8:	20003ed8 	.word	0x20003ed8
 8000fdc:	20003ef8 	.word	0x20003ef8

08000fe0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fe4:	4b06      	ldr	r3, [pc, #24]	; (8001000 <SystemInit+0x20>)
 8000fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fea:	4a05      	ldr	r2, [pc, #20]	; (8001000 <SystemInit+0x20>)
 8000fec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ff0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ff4:	bf00      	nop
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	e000ed00 	.word	0xe000ed00

08001004 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001008:	4b0e      	ldr	r3, [pc, #56]	; (8001044 <HAL_Init+0x40>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a0d      	ldr	r2, [pc, #52]	; (8001044 <HAL_Init+0x40>)
 800100e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001012:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001014:	4b0b      	ldr	r3, [pc, #44]	; (8001044 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <HAL_Init+0x40>)
 800101a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800101e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_Init+0x40>)
 8001026:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800102a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800102c:	2003      	movs	r0, #3
 800102e:	f000 f94f 	bl	80012d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001032:	200f      	movs	r0, #15
 8001034:	f000 f808 	bl	8001048 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001038:	f7ff fd5e 	bl	8000af8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	40023c00 	.word	0x40023c00

08001048 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001050:	4b12      	ldr	r3, [pc, #72]	; (800109c <HAL_InitTick+0x54>)
 8001052:	681a      	ldr	r2, [r3, #0]
 8001054:	4b12      	ldr	r3, [pc, #72]	; (80010a0 <HAL_InitTick+0x58>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800105e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001062:	fbb2 f3f3 	udiv	r3, r2, r3
 8001066:	4618      	mov	r0, r3
 8001068:	f000 f967 	bl	800133a <HAL_SYSTICK_Config>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001072:	2301      	movs	r3, #1
 8001074:	e00e      	b.n	8001094 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2b0f      	cmp	r3, #15
 800107a:	d80a      	bhi.n	8001092 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800107c:	2200      	movs	r2, #0
 800107e:	6879      	ldr	r1, [r7, #4]
 8001080:	f04f 30ff 	mov.w	r0, #4294967295
 8001084:	f000 f92f 	bl	80012e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001088:	4a06      	ldr	r2, [pc, #24]	; (80010a4 <HAL_InitTick+0x5c>)
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800108e:	2300      	movs	r3, #0
 8001090:	e000      	b.n	8001094 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001092:	2301      	movs	r3, #1
}
 8001094:	4618      	mov	r0, r3
 8001096:	3708      	adds	r7, #8
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	20000000 	.word	0x20000000
 80010a0:	20000008 	.word	0x20000008
 80010a4:	20000004 	.word	0x20000004

080010a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010ac:	4b06      	ldr	r3, [pc, #24]	; (80010c8 <HAL_IncTick+0x20>)
 80010ae:	781b      	ldrb	r3, [r3, #0]
 80010b0:	461a      	mov	r2, r3
 80010b2:	4b06      	ldr	r3, [pc, #24]	; (80010cc <HAL_IncTick+0x24>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4413      	add	r3, r2
 80010b8:	4a04      	ldr	r2, [pc, #16]	; (80010cc <HAL_IncTick+0x24>)
 80010ba:	6013      	str	r3, [r2, #0]
}
 80010bc:	bf00      	nop
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	20000008 	.word	0x20000008
 80010cc:	20003edc 	.word	0x20003edc

080010d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return uwTick;
 80010d4:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <HAL_GetTick+0x14>)
 80010d6:	681b      	ldr	r3, [r3, #0]
}
 80010d8:	4618      	mov	r0, r3
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	20003edc 	.word	0x20003edc

080010e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010f0:	f7ff ffee 	bl	80010d0 <HAL_GetTick>
 80010f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001100:	d005      	beq.n	800110e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_Delay+0x44>)
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	461a      	mov	r2, r3
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4413      	add	r3, r2
 800110c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800110e:	bf00      	nop
 8001110:	f7ff ffde 	bl	80010d0 <HAL_GetTick>
 8001114:	4602      	mov	r2, r0
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	1ad3      	subs	r3, r2, r3
 800111a:	68fa      	ldr	r2, [r7, #12]
 800111c:	429a      	cmp	r2, r3
 800111e:	d8f7      	bhi.n	8001110 <HAL_Delay+0x28>
  {
  }
}
 8001120:	bf00      	nop
 8001122:	bf00      	nop
 8001124:	3710      	adds	r7, #16
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	20000008 	.word	0x20000008

08001130 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001130:	b480      	push	{r7}
 8001132:	b085      	sub	sp, #20
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001140:	4b0c      	ldr	r3, [pc, #48]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001142:	68db      	ldr	r3, [r3, #12]
 8001144:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001146:	68ba      	ldr	r2, [r7, #8]
 8001148:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800114c:	4013      	ands	r3, r2
 800114e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001150:	68fb      	ldr	r3, [r7, #12]
 8001152:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001158:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001162:	4a04      	ldr	r2, [pc, #16]	; (8001174 <__NVIC_SetPriorityGrouping+0x44>)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	60d3      	str	r3, [r2, #12]
}
 8001168:	bf00      	nop
 800116a:	3714      	adds	r7, #20
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800117c:	4b04      	ldr	r3, [pc, #16]	; (8001190 <__NVIC_GetPriorityGrouping+0x18>)
 800117e:	68db      	ldr	r3, [r3, #12]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	f003 0307 	and.w	r3, r3, #7
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	e000ed00 	.word	0xe000ed00

08001194 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	4603      	mov	r3, r0
 800119c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800119e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	db0b      	blt.n	80011be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	f003 021f 	and.w	r2, r3, #31
 80011ac:	4907      	ldr	r1, [pc, #28]	; (80011cc <__NVIC_EnableIRQ+0x38>)
 80011ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b2:	095b      	lsrs	r3, r3, #5
 80011b4:	2001      	movs	r0, #1
 80011b6:	fa00 f202 	lsl.w	r2, r0, r2
 80011ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000e100 	.word	0xe000e100

080011d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	6039      	str	r1, [r7, #0]
 80011da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	db0a      	blt.n	80011fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	b2da      	uxtb	r2, r3
 80011e8:	490c      	ldr	r1, [pc, #48]	; (800121c <__NVIC_SetPriority+0x4c>)
 80011ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ee:	0112      	lsls	r2, r2, #4
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	440b      	add	r3, r1
 80011f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011f8:	e00a      	b.n	8001210 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011fa:	683b      	ldr	r3, [r7, #0]
 80011fc:	b2da      	uxtb	r2, r3
 80011fe:	4908      	ldr	r1, [pc, #32]	; (8001220 <__NVIC_SetPriority+0x50>)
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 030f 	and.w	r3, r3, #15
 8001206:	3b04      	subs	r3, #4
 8001208:	0112      	lsls	r2, r2, #4
 800120a:	b2d2      	uxtb	r2, r2
 800120c:	440b      	add	r3, r1
 800120e:	761a      	strb	r2, [r3, #24]
}
 8001210:	bf00      	nop
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	e000e100 	.word	0xe000e100
 8001220:	e000ed00 	.word	0xe000ed00

08001224 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001224:	b480      	push	{r7}
 8001226:	b089      	sub	sp, #36	; 0x24
 8001228:	af00      	add	r7, sp, #0
 800122a:	60f8      	str	r0, [r7, #12]
 800122c:	60b9      	str	r1, [r7, #8]
 800122e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f003 0307 	and.w	r3, r3, #7
 8001236:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	f1c3 0307 	rsb	r3, r3, #7
 800123e:	2b04      	cmp	r3, #4
 8001240:	bf28      	it	cs
 8001242:	2304      	movcs	r3, #4
 8001244:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	3304      	adds	r3, #4
 800124a:	2b06      	cmp	r3, #6
 800124c:	d902      	bls.n	8001254 <NVIC_EncodePriority+0x30>
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	3b03      	subs	r3, #3
 8001252:	e000      	b.n	8001256 <NVIC_EncodePriority+0x32>
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001258:	f04f 32ff 	mov.w	r2, #4294967295
 800125c:	69bb      	ldr	r3, [r7, #24]
 800125e:	fa02 f303 	lsl.w	r3, r2, r3
 8001262:	43da      	mvns	r2, r3
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	401a      	ands	r2, r3
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800126c:	f04f 31ff 	mov.w	r1, #4294967295
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	fa01 f303 	lsl.w	r3, r1, r3
 8001276:	43d9      	mvns	r1, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800127c:	4313      	orrs	r3, r2
         );
}
 800127e:	4618      	mov	r0, r3
 8001280:	3724      	adds	r7, #36	; 0x24
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
	...

0800128c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	3b01      	subs	r3, #1
 8001298:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800129c:	d301      	bcc.n	80012a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800129e:	2301      	movs	r3, #1
 80012a0:	e00f      	b.n	80012c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012a2:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <SysTick_Config+0x40>)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	3b01      	subs	r3, #1
 80012a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012aa:	210f      	movs	r1, #15
 80012ac:	f04f 30ff 	mov.w	r0, #4294967295
 80012b0:	f7ff ff8e 	bl	80011d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012b4:	4b05      	ldr	r3, [pc, #20]	; (80012cc <SysTick_Config+0x40>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ba:	4b04      	ldr	r3, [pc, #16]	; (80012cc <SysTick_Config+0x40>)
 80012bc:	2207      	movs	r2, #7
 80012be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012c0:	2300      	movs	r3, #0
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3708      	adds	r7, #8
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	e000e010 	.word	0xe000e010

080012d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012d8:	6878      	ldr	r0, [r7, #4]
 80012da:	f7ff ff29 	bl	8001130 <__NVIC_SetPriorityGrouping>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b086      	sub	sp, #24
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	4603      	mov	r3, r0
 80012ee:	60b9      	str	r1, [r7, #8]
 80012f0:	607a      	str	r2, [r7, #4]
 80012f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012f8:	f7ff ff3e 	bl	8001178 <__NVIC_GetPriorityGrouping>
 80012fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68b9      	ldr	r1, [r7, #8]
 8001302:	6978      	ldr	r0, [r7, #20]
 8001304:	f7ff ff8e 	bl	8001224 <NVIC_EncodePriority>
 8001308:	4602      	mov	r2, r0
 800130a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800130e:	4611      	mov	r1, r2
 8001310:	4618      	mov	r0, r3
 8001312:	f7ff ff5d 	bl	80011d0 <__NVIC_SetPriority>
}
 8001316:	bf00      	nop
 8001318:	3718      	adds	r7, #24
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b082      	sub	sp, #8
 8001322:	af00      	add	r7, sp, #0
 8001324:	4603      	mov	r3, r0
 8001326:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132c:	4618      	mov	r0, r3
 800132e:	f7ff ff31 	bl	8001194 <__NVIC_EnableIRQ>
}
 8001332:	bf00      	nop
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}

0800133a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800133a:	b580      	push	{r7, lr}
 800133c:	b082      	sub	sp, #8
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001342:	6878      	ldr	r0, [r7, #4]
 8001344:	f7ff ffa2 	bl	800128c <SysTick_Config>
 8001348:	4603      	mov	r3, r0
}
 800134a:	4618      	mov	r0, r3
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b088      	sub	sp, #32
 8001358:	af02      	add	r7, sp, #8
 800135a:	60f8      	str	r0, [r7, #12]
 800135c:	60b9      	str	r1, [r7, #8]
 800135e:	607a      	str	r2, [r7, #4]
 8001360:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001362:	2300      	movs	r3, #0
 8001364:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800136c:	2b01      	cmp	r3, #1
 800136e:	d101      	bne.n	8001374 <HAL_DCMI_Start_DMA+0x20>
 8001370:	2302      	movs	r3, #2
 8001372:	e086      	b.n	8001482 <HAL_DCMI_Start_DMA+0x12e>
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	2201      	movs	r2, #1
 8001378:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800137c:	68fb      	ldr	r3, [r7, #12]
 800137e:	2202      	movs	r2, #2
 8001380:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001392:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f022 0202 	bic.w	r2, r2, #2
 80013a2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6819      	ldr	r1, [r3, #0]
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	68ba      	ldr	r2, [r7, #8]
 80013b0:	430a      	orrs	r2, r1
 80013b2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013b8:	4a34      	ldr	r2, [pc, #208]	; (800148c <HAL_DCMI_Start_DMA+0x138>)
 80013ba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c0:	4a33      	ldr	r2, [pc, #204]	; (8001490 <HAL_DCMI_Start_DMA+0x13c>)
 80013c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013c8:	2200      	movs	r2, #0
 80013ca:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	2200      	movs	r2, #0
 80013d6:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013de:	d20a      	bcs.n	80013f6 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	3328      	adds	r3, #40	; 0x28
 80013ea:	4619      	mov	r1, r3
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	687a      	ldr	r2, [r7, #4]
 80013f0:	f000 fb6e 	bl	8001ad0 <HAL_DMA_Start_IT>
 80013f4:	e038      	b.n	8001468 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013fa:	4a24      	ldr	r2, [pc, #144]	; (800148c <HAL_DCMI_Start_DMA+0x138>)
 80013fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	2201      	movs	r2, #1
 8001402:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	687a      	ldr	r2, [r7, #4]
 800140e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8001410:	e009      	b.n	8001426 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001416:	085a      	lsrs	r2, r3, #1
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001420:	005a      	lsls	r2, r3, #1
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8001426:	68fb      	ldr	r3, [r7, #12]
 8001428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800142a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142e:	d2f0      	bcs.n	8001412 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001434:	1e9a      	subs	r2, r3, #2
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	4413      	add	r3, r2
 800144c:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	3328      	adds	r3, #40	; 0x28
 8001458:	4619      	mov	r1, r3
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800145e:	9300      	str	r3, [sp, #0]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	f000 fe88 	bl	8002178 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0201 	orr.w	r2, r2, #1
 8001476:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	2200      	movs	r2, #0
 800147c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8001480:	2300      	movs	r3, #0
}
 8001482:	4618      	mov	r0, r3
 8001484:	3718      	adds	r7, #24
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	08001741 	.word	0x08001741
 8001490:	0800186b 	.word	0x0800186b

08001494 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b084      	sub	sp, #16
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 800149c:	4b29      	ldr	r3, [pc, #164]	; (8001544 <HAL_DCMI_Stop+0xb0>)
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	085b      	lsrs	r3, r3, #1
 80014a2:	4a29      	ldr	r2, [pc, #164]	; (8001548 <HAL_DCMI_Stop+0xb4>)
 80014a4:	fba2 2303 	umull	r2, r3, r2, r3
 80014a8:	089b      	lsrs	r3, r3, #2
 80014aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80014ac:	2300      	movs	r3, #0
 80014ae:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d101      	bne.n	80014be <HAL_DCMI_Stop+0x2a>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e03e      	b.n	800153c <HAL_DCMI_Stop+0xa8>
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2201      	movs	r2, #1
 80014c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2202      	movs	r2, #2
 80014ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681a      	ldr	r2, [r3, #0]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f022 0201 	bic.w	r2, r2, #1
 80014dc:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	1e5a      	subs	r2, r3, #1
 80014e2:	60ba      	str	r2, [r7, #8]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d108      	bne.n	80014fa <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80014ec:	f043 0220 	orr.w	r2, r3, #32
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	73fb      	strb	r3, [r7, #15]
      break;
 80014f8:	e006      	b.n	8001508 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	d1ea      	bne.n	80014de <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001516:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800151c:	4618      	mov	r0, r3
 800151e:	f000 fb2f 	bl	8001b80 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2201      	movs	r2, #1
 800152e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	2200      	movs	r2, #0
 8001536:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 800153a:	7bfb      	ldrb	r3, [r7, #15]
}
 800153c:	4618      	mov	r0, r3
 800153e:	3710      	adds	r7, #16
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	20000000 	.word	0x20000000
 8001548:	92492493 	.word	0x92492493

0800154c <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI. 
  * @retval HAL status     
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef* hdcmi)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 8001554:	4b25      	ldr	r3, [pc, #148]	; (80015ec <HAL_DCMI_Suspend+0xa0>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	085b      	lsrs	r3, r3, #1
 800155a:	4a25      	ldr	r2, [pc, #148]	; (80015f0 <HAL_DCMI_Suspend+0xa4>)
 800155c:	fba2 2303 	umull	r2, r3, r2, r3
 8001560:	089b      	lsrs	r3, r3, #2
 8001562:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8001564:	2300      	movs	r3, #0
 8001566:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800156e:	2b01      	cmp	r3, #1
 8001570:	d101      	bne.n	8001576 <HAL_DCMI_Suspend+0x2a>
 8001572:	2302      	movs	r3, #2
 8001574:	e033      	b.n	80015de <HAL_DCMI_Suspend+0x92>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2201      	movs	r2, #1
 800157a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(hdcmi->State == HAL_DCMI_STATE_BUSY)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001584:	b2db      	uxtb	r3, r3
 8001586:	2b02      	cmp	r3, #2
 8001588:	d124      	bne.n	80015d4 <HAL_DCMI_Suspend+0x88>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2205      	movs	r2, #5
 800158e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681a      	ldr	r2, [r3, #0]
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f022 0201 	bic.w	r2, r2, #1
 80015a0:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      if (count-- == 0U)
 80015a2:	68bb      	ldr	r3, [r7, #8]
 80015a4:	1e5a      	subs	r2, r3, #1
 80015a6:	60ba      	str	r2, [r7, #8]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d10c      	bne.n	80015c6 <HAL_DCMI_Suspend+0x7a>
      {        
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015b0:	f043 0220 	orr.w	r2, r3, #32
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	63da      	str	r2, [r3, #60]	; 0x3c
        
        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2201      	movs	r2, #1
 80015bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
        
        status = HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	73fb      	strb	r3, [r7, #15]
        break;
 80015c4:	e006      	b.n	80015d4 <HAL_DCMI_Suspend+0x88>
      }
    }
    while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0301 	and.w	r3, r3, #1
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d1e6      	bne.n	80015a2 <HAL_DCMI_Suspend+0x56>
  }    
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	2200      	movs	r2, #0
 80015d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return status;
 80015dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80015de:	4618      	mov	r0, r3
 80015e0:	3714      	adds	r7, #20
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	20000000 	.word	0x20000000
 80015f0:	92492493 	.word	0x92492493

080015f4 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	691b      	ldr	r3, [r3, #16]
 8001602:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f003 0304 	and.w	r3, r3, #4
 800160a:	2b00      	cmp	r3, #0
 800160c:	d016      	beq.n	800163c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2204      	movs	r2, #4
 8001614:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800161a:	f043 0202 	orr.w	r2, r3, #2
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2204      	movs	r2, #4
 8001626:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800162e:	4a2f      	ldr	r2, [pc, #188]	; (80016ec <HAL_DCMI_IRQHandler+0xf8>)
 8001630:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001636:	4618      	mov	r0, r3
 8001638:	f000 fb12 	bl	8001c60 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d016      	beq.n	8001674 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2202      	movs	r2, #2
 800164c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001652:	f043 0201 	orr.w	r2, r3, #1
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2204      	movs	r2, #4
 800165e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001666:	4a21      	ldr	r2, [pc, #132]	; (80016ec <HAL_DCMI_IRQHandler+0xf8>)
 8001668:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166e:	4618      	mov	r0, r3
 8001670:	f000 faf6 	bl	8001c60 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0310 	and.w	r3, r3, #16
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2210      	movs	r2, #16
 8001684:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8001686:	6878      	ldr	r0, [r7, #4]
 8001688:	f000 f83c 	bl	8001704 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	2b00      	cmp	r3, #0
 8001694:	d006      	beq.n	80016a4 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	2208      	movs	r2, #8
 800169c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f000 f83a 	bl	8001718 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0301 	and.w	r3, r3, #1
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d019      	beq.n	80016e2 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	f003 0302 	and.w	r3, r3, #2
 80016b8:	2b02      	cmp	r3, #2
 80016ba:	d107      	bne.n	80016cc <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	68da      	ldr	r2, [r3, #12]
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f022 021e 	bic.w	r2, r2, #30
 80016ca:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	68da      	ldr	r2, [r3, #12]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f022 0201 	bic.w	r2, r2, #1
 80016da:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 80016dc:	6878      	ldr	r0, [r7, #4]
 80016de:	f000 f825 	bl	800172c <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	0800186b 	.word	0x0800186b

080016f0 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800170c:	bf00      	nop
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr

08001718 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001720:	bf00      	nop
 8001722:	370c      	adds	r7, #12
 8001724:	46bd      	mov	sp, r7
 8001726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172a:	4770      	bx	lr

0800172c <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8001734:	bf00      	nop
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b084      	sub	sp, #16
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001748:	2300      	movs	r3, #0
 800174a:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001750:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001756:	2b00      	cmp	r3, #0
 8001758:	d043      	beq.n	80017e2 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800175a:	68bb      	ldr	r3, [r7, #8]
 800175c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001766:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001768:	68bb      	ldr	r3, [r7, #8]
 800176a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800176c:	f003 0301 	and.w	r3, r3, #1
 8001770:	2b00      	cmp	r3, #0
 8001772:	d118      	bne.n	80017a6 <DCMI_DMAXferCplt+0x66>
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	2b00      	cmp	r3, #0
 8001778:	d015      	beq.n	80017a6 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8001784:	68bb      	ldr	r3, [r7, #8]
 8001786:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001788:	68bb      	ldr	r3, [r7, #8]
 800178a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800178c:	00da      	lsls	r2, r3, #3
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	4413      	add	r3, r2
 8001792:	2200      	movs	r2, #0
 8001794:	4619      	mov	r1, r3
 8001796:	f001 fe37 	bl	8003408 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179e:	1e5a      	subs	r2, r3, #1
 80017a0:	68bb      	ldr	r3, [r7, #8]
 80017a2:	629a      	str	r2, [r3, #40]	; 0x28
 80017a4:	e044      	b.n	8001830 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d13c      	bne.n	8001830 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80017b6:	68bb      	ldr	r3, [r7, #8]
 80017b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	691b      	ldr	r3, [r3, #16]
 80017be:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017c8:	00da      	lsls	r2, r3, #3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4413      	add	r3, r2
 80017ce:	2201      	movs	r2, #1
 80017d0:	4619      	mov	r1, r3
 80017d2:	f001 fe19 	bl	8003408 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017da:	1e5a      	subs	r2, r3, #1
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	629a      	str	r2, [r3, #40]	; 0x28
 80017e0:	e026      	b.n	8001830 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 80017e2:	68bb      	ldr	r3, [r7, #8]
 80017e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d006      	beq.n	8001800 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 80017f2:	68bb      	ldr	r3, [r7, #8]
 80017f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	68ba      	ldr	r2, [r7, #8]
 80017fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	e017      	b.n	8001830 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10f      	bne.n	8001830 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001810:	68bb      	ldr	r3, [r7, #8]
 8001812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001814:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181a:	0099      	lsls	r1, r3, #2
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	440a      	add	r2, r1
 8001826:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001834:	68bb      	ldr	r3, [r7, #8]
 8001836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001838:	429a      	cmp	r2, r3
 800183a:	d112      	bne.n	8001862 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68da      	ldr	r2, [r3, #12]
 8001842:	68bb      	ldr	r3, [r7, #8]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f042 0201 	orr.w	r2, r2, #1
 800184a:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b02      	cmp	r3, #2
 8001858:	d103      	bne.n	8001862 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2201      	movs	r2, #1
 800185e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8001862:	bf00      	nop
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001876:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800187c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800187e:	2b02      	cmp	r3, #2
 8001880:	d003      	beq.n	800188a <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	2201      	movs	r2, #1
 8001886:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f7ff ff30 	bl	80016f0 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b082      	sub	sp, #8
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e05f      	b.n	800196a <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018b0:	b2db      	uxtb	r3, r3
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d109      	bne.n	80018ca <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2200      	movs	r2, #0
 80018ba:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80018be:	6878      	ldr	r0, [r7, #4]
 80018c0:	f7ff f942 	bl	8000b48 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 80018c4:	6878      	ldr	r0, [r7, #4]
 80018c6:	f7ff f93f 	bl	8000b48 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	2202      	movs	r2, #2
 80018ce:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	6812      	ldr	r2, [r2, #0]
 80018dc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80018e0:	f023 0308 	bic.w	r3, r3, #8
 80018e4:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	6819      	ldr	r1, [r3, #0]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685a      	ldr	r2, [r3, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	695b      	ldr	r3, [r3, #20]
 80018f4:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80018fa:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001906:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	699b      	ldr	r3, [r3, #24]
 800190c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001912:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	430a      	orrs	r2, r1
 800191a:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	2b10      	cmp	r3, #16
 8001922:	d112      	bne.n	800194a <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	7f1b      	ldrb	r3, [r3, #28]
 8001928:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	7f5b      	ldrb	r3, [r3, #29]
 800192e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001930:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	7f9b      	ldrb	r3, [r3, #30]
 8001936:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001938:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	7fdb      	ldrb	r3, [r3, #31]
 8001940:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001946:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001948:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	68da      	ldr	r2, [r3, #12]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f042 021e 	orr.w	r2, r2, #30
 8001958:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	2200      	movs	r2, #0
 800195e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	2201      	movs	r2, #1
 8001964:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
	...

08001974 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b086      	sub	sp, #24
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800197c:	2300      	movs	r3, #0
 800197e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001980:	f7ff fba6 	bl	80010d0 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e099      	b.n	8001ac4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2202      	movs	r2, #2
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	681a      	ldr	r2, [r3, #0]
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f022 0201 	bic.w	r2, r2, #1
 80019ae:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019b0:	e00f      	b.n	80019d2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019b2:	f7ff fb8d 	bl	80010d0 <HAL_GetTick>
 80019b6:	4602      	mov	r2, r0
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	1ad3      	subs	r3, r2, r3
 80019bc:	2b05      	cmp	r3, #5
 80019be:	d908      	bls.n	80019d2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2220      	movs	r2, #32
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2203      	movs	r2, #3
 80019ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80019ce:	2303      	movs	r3, #3
 80019d0:	e078      	b.n	8001ac4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0301 	and.w	r3, r3, #1
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d1e8      	bne.n	80019b2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80019e8:	697a      	ldr	r2, [r7, #20]
 80019ea:	4b38      	ldr	r3, [pc, #224]	; (8001acc <HAL_DMA_Init+0x158>)
 80019ec:	4013      	ands	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	685a      	ldr	r2, [r3, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80019fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	691b      	ldr	r3, [r3, #16]
 8001a04:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a0a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	699b      	ldr	r3, [r3, #24]
 8001a10:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a16:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a1b      	ldr	r3, [r3, #32]
 8001a1c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a1e:	697a      	ldr	r2, [r7, #20]
 8001a20:	4313      	orrs	r3, r2
 8001a22:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a28:	2b04      	cmp	r3, #4
 8001a2a:	d107      	bne.n	8001a3c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a34:	4313      	orrs	r3, r2
 8001a36:	697a      	ldr	r2, [r7, #20]
 8001a38:	4313      	orrs	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	697a      	ldr	r2, [r7, #20]
 8001a42:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	f023 0307 	bic.w	r3, r3, #7
 8001a52:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	4313      	orrs	r3, r2
 8001a5c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a62:	2b04      	cmp	r3, #4
 8001a64:	d117      	bne.n	8001a96 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a6a:	697a      	ldr	r2, [r7, #20]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d00e      	beq.n	8001a96 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fb01 	bl	8002080 <DMA_CheckFifoParam>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d008      	beq.n	8001a96 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2240      	movs	r2, #64	; 0x40
 8001a88:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001a92:	2301      	movs	r3, #1
 8001a94:	e016      	b.n	8001ac4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	697a      	ldr	r2, [r7, #20]
 8001a9c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001a9e:	6878      	ldr	r0, [r7, #4]
 8001aa0:	f000 fab8 	bl	8002014 <DMA_CalcBaseAndBitshift>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aac:	223f      	movs	r2, #63	; 0x3f
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001ac2:	2300      	movs	r3, #0
}
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	3718      	adds	r7, #24
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	bd80      	pop	{r7, pc}
 8001acc:	f010803f 	.word	0xf010803f

08001ad0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	60f8      	str	r0, [r7, #12]
 8001ad8:	60b9      	str	r1, [r7, #8]
 8001ada:	607a      	str	r2, [r7, #4]
 8001adc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001ade:	2300      	movs	r3, #0
 8001ae0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d101      	bne.n	8001af6 <HAL_DMA_Start_IT+0x26>
 8001af2:	2302      	movs	r3, #2
 8001af4:	e040      	b.n	8001b78 <HAL_DMA_Start_IT+0xa8>
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b01      	cmp	r3, #1
 8001b08:	d12f      	bne.n	8001b6a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2202      	movs	r2, #2
 8001b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68b9      	ldr	r1, [r7, #8]
 8001b1e:	68f8      	ldr	r0, [r7, #12]
 8001b20:	f000 fa4a 	bl	8001fb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b28:	223f      	movs	r2, #63	; 0x3f
 8001b2a:	409a      	lsls	r2, r3
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	681a      	ldr	r2, [r3, #0]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f042 0216 	orr.w	r2, r2, #22
 8001b3e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d007      	beq.n	8001b58 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0208 	orr.w	r2, r2, #8
 8001b56:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	681a      	ldr	r2, [r3, #0]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	f042 0201 	orr.w	r2, r2, #1
 8001b66:	601a      	str	r2, [r3, #0]
 8001b68:	e005      	b.n	8001b76 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001b72:	2302      	movs	r3, #2
 8001b74:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3718      	adds	r7, #24
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b084      	sub	sp, #16
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001b8e:	f7ff fa9f 	bl	80010d0 <HAL_GetTick>
 8001b92:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d008      	beq.n	8001bb2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e052      	b.n	8001c58 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	681a      	ldr	r2, [r3, #0]
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f022 0216 	bic.w	r2, r2, #22
 8001bc0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	695a      	ldr	r2, [r3, #20]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001bd0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d103      	bne.n	8001be2 <HAL_DMA_Abort+0x62>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d007      	beq.n	8001bf2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	681a      	ldr	r2, [r3, #0]
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f022 0208 	bic.w	r2, r2, #8
 8001bf0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0201 	bic.w	r2, r2, #1
 8001c00:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c02:	e013      	b.n	8001c2c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c04:	f7ff fa64 	bl	80010d0 <HAL_GetTick>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	68bb      	ldr	r3, [r7, #8]
 8001c0c:	1ad3      	subs	r3, r2, r3
 8001c0e:	2b05      	cmp	r3, #5
 8001c10:	d90c      	bls.n	8001c2c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2220      	movs	r2, #32
 8001c16:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2203      	movs	r2, #3
 8001c1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2200      	movs	r2, #0
 8001c24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e015      	b.n	8001c58 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1e4      	bne.n	8001c04 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c3e:	223f      	movs	r2, #63	; 0x3f
 8001c40:	409a      	lsls	r2, r3
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2201      	movs	r2, #1
 8001c4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2200      	movs	r2, #0
 8001c52:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3710      	adds	r7, #16
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	2b02      	cmp	r3, #2
 8001c72:	d004      	beq.n	8001c7e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2280      	movs	r2, #128	; 0x80
 8001c78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e00c      	b.n	8001c98 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2205      	movs	r2, #5
 8001c82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f022 0201 	bic.w	r2, r2, #1
 8001c94:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	370c      	adds	r7, #12
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca2:	4770      	bx	lr

08001ca4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b086      	sub	sp, #24
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cac:	2300      	movs	r3, #0
 8001cae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cb0:	4b8e      	ldr	r3, [pc, #568]	; (8001eec <HAL_DMA_IRQHandler+0x248>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4a8e      	ldr	r2, [pc, #568]	; (8001ef0 <HAL_DMA_IRQHandler+0x24c>)
 8001cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cba:	0a9b      	lsrs	r3, r3, #10
 8001cbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cce:	2208      	movs	r2, #8
 8001cd0:	409a      	lsls	r2, r3
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d01a      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 0304 	and.w	r3, r3, #4
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d013      	beq.n	8001d10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f022 0204 	bic.w	r2, r2, #4
 8001cf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cfc:	2208      	movs	r2, #8
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d08:	f043 0201 	orr.w	r2, r3, #1
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d14:	2201      	movs	r2, #1
 8001d16:	409a      	lsls	r2, r3
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d012      	beq.n	8001d46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	695b      	ldr	r3, [r3, #20]
 8001d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d00b      	beq.n	8001d46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d32:	2201      	movs	r2, #1
 8001d34:	409a      	lsls	r2, r3
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d3e:	f043 0202 	orr.w	r2, r3, #2
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4a:	2204      	movs	r2, #4
 8001d4c:	409a      	lsls	r2, r3
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4013      	ands	r3, r2
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d012      	beq.n	8001d7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f003 0302 	and.w	r3, r3, #2
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d00b      	beq.n	8001d7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d68:	2204      	movs	r2, #4
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d74:	f043 0204 	orr.w	r2, r3, #4
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d80:	2210      	movs	r2, #16
 8001d82:	409a      	lsls	r2, r3
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	4013      	ands	r3, r2
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d043      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f003 0308 	and.w	r3, r3, #8
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d03c      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d9e:	2210      	movs	r2, #16
 8001da0:	409a      	lsls	r2, r3
 8001da2:	693b      	ldr	r3, [r7, #16]
 8001da4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d018      	beq.n	8001de6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d108      	bne.n	8001dd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d024      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	4798      	blx	r3
 8001dd2:	e01f      	b.n	8001e14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01b      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	4798      	blx	r3
 8001de4:	e016      	b.n	8001e14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d107      	bne.n	8001e04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	f022 0208 	bic.w	r2, r2, #8
 8001e02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e10:	6878      	ldr	r0, [r7, #4]
 8001e12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e18:	2220      	movs	r2, #32
 8001e1a:	409a      	lsls	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	4013      	ands	r3, r2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	f000 808f 	beq.w	8001f44 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f003 0310 	and.w	r3, r3, #16
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	f000 8087 	beq.w	8001f44 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	2220      	movs	r2, #32
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e48:	b2db      	uxtb	r3, r3
 8001e4a:	2b05      	cmp	r3, #5
 8001e4c:	d136      	bne.n	8001ebc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f022 0216 	bic.w	r2, r2, #22
 8001e5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	695a      	ldr	r2, [r3, #20]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d103      	bne.n	8001e7e <HAL_DMA_IRQHandler+0x1da>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d007      	beq.n	8001e8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0208 	bic.w	r2, r2, #8
 8001e8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	223f      	movs	r2, #63	; 0x3f
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2201      	movs	r2, #1
 8001e9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d07e      	beq.n	8001fb0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	4798      	blx	r3
        }
        return;
 8001eba:	e079      	b.n	8001fb0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d01d      	beq.n	8001f06 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d10d      	bne.n	8001ef4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d031      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	4798      	blx	r3
 8001ee8:	e02c      	b.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
 8001eea:	bf00      	nop
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d023      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f00:	6878      	ldr	r0, [r7, #4]
 8001f02:	4798      	blx	r3
 8001f04:	e01e      	b.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d10f      	bne.n	8001f34 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681a      	ldr	r2, [r3, #0]
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f022 0210 	bic.w	r2, r2, #16
 8001f22:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2201      	movs	r2, #1
 8001f28:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d003      	beq.n	8001f44 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d032      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d022      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2205      	movs	r2, #5
 8001f5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f022 0201 	bic.w	r2, r2, #1
 8001f6e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	3301      	adds	r3, #1
 8001f74:	60bb      	str	r3, [r7, #8]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d307      	bcc.n	8001f8c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f003 0301 	and.w	r3, r3, #1
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f2      	bne.n	8001f70 <HAL_DMA_IRQHandler+0x2cc>
 8001f8a:	e000      	b.n	8001f8e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001f8c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d005      	beq.n	8001fb2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	4798      	blx	r3
 8001fae:	e000      	b.n	8001fb2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001fb0:	bf00      	nop
    }
  }
}
 8001fb2:	3718      	adds	r7, #24
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	60f8      	str	r0, [r7, #12]
 8001fc0:	60b9      	str	r1, [r7, #8]
 8001fc2:	607a      	str	r2, [r7, #4]
 8001fc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	681a      	ldr	r2, [r3, #0]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001fd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	683a      	ldr	r2, [r7, #0]
 8001fdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	689b      	ldr	r3, [r3, #8]
 8001fe2:	2b40      	cmp	r3, #64	; 0x40
 8001fe4:	d108      	bne.n	8001ff8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	687a      	ldr	r2, [r7, #4]
 8001fec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8001ff6:	e007      	b.n	8002008 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	68ba      	ldr	r2, [r7, #8]
 8001ffe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	60da      	str	r2, [r3, #12]
}
 8002008:	bf00      	nop
 800200a:	3714      	adds	r7, #20
 800200c:	46bd      	mov	sp, r7
 800200e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002012:	4770      	bx	lr

08002014 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002014:	b480      	push	{r7}
 8002016:	b085      	sub	sp, #20
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	b2db      	uxtb	r3, r3
 8002022:	3b10      	subs	r3, #16
 8002024:	4a14      	ldr	r2, [pc, #80]	; (8002078 <DMA_CalcBaseAndBitshift+0x64>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	091b      	lsrs	r3, r3, #4
 800202c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800202e:	4a13      	ldr	r2, [pc, #76]	; (800207c <DMA_CalcBaseAndBitshift+0x68>)
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	4413      	add	r3, r2
 8002034:	781b      	ldrb	r3, [r3, #0]
 8002036:	461a      	mov	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	2b03      	cmp	r3, #3
 8002040:	d909      	bls.n	8002056 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800204a:	f023 0303 	bic.w	r3, r3, #3
 800204e:	1d1a      	adds	r2, r3, #4
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	659a      	str	r2, [r3, #88]	; 0x58
 8002054:	e007      	b.n	8002066 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800205e:	f023 0303 	bic.w	r3, r3, #3
 8002062:	687a      	ldr	r2, [r7, #4]
 8002064:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800206a:	4618      	mov	r0, r3
 800206c:	3714      	adds	r7, #20
 800206e:	46bd      	mov	sp, r7
 8002070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002074:	4770      	bx	lr
 8002076:	bf00      	nop
 8002078:	aaaaaaab 	.word	0xaaaaaaab
 800207c:	0800720c 	.word	0x0800720c

08002080 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002080:	b480      	push	{r7}
 8002082:	b085      	sub	sp, #20
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002088:	2300      	movs	r3, #0
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002090:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	699b      	ldr	r3, [r3, #24]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d11f      	bne.n	80020da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	2b03      	cmp	r3, #3
 800209e:	d856      	bhi.n	800214e <DMA_CheckFifoParam+0xce>
 80020a0:	a201      	add	r2, pc, #4	; (adr r2, 80020a8 <DMA_CheckFifoParam+0x28>)
 80020a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020a6:	bf00      	nop
 80020a8:	080020b9 	.word	0x080020b9
 80020ac:	080020cb 	.word	0x080020cb
 80020b0:	080020b9 	.word	0x080020b9
 80020b4:	0800214f 	.word	0x0800214f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d046      	beq.n	8002152 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80020c4:	2301      	movs	r3, #1
 80020c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020c8:	e043      	b.n	8002152 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80020d2:	d140      	bne.n	8002156 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80020d4:	2301      	movs	r3, #1
 80020d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80020d8:	e03d      	b.n	8002156 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	699b      	ldr	r3, [r3, #24]
 80020de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80020e2:	d121      	bne.n	8002128 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	2b03      	cmp	r3, #3
 80020e8:	d837      	bhi.n	800215a <DMA_CheckFifoParam+0xda>
 80020ea:	a201      	add	r2, pc, #4	; (adr r2, 80020f0 <DMA_CheckFifoParam+0x70>)
 80020ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020f0:	08002101 	.word	0x08002101
 80020f4:	08002107 	.word	0x08002107
 80020f8:	08002101 	.word	0x08002101
 80020fc:	08002119 	.word	0x08002119
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	73fb      	strb	r3, [r7, #15]
      break;
 8002104:	e030      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d025      	beq.n	800215e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002112:	2301      	movs	r3, #1
 8002114:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002116:	e022      	b.n	800215e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800211c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002120:	d11f      	bne.n	8002162 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002126:	e01c      	b.n	8002162 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d903      	bls.n	8002136 <DMA_CheckFifoParam+0xb6>
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	2b03      	cmp	r3, #3
 8002132:	d003      	beq.n	800213c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002134:	e018      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002136:	2301      	movs	r3, #1
 8002138:	73fb      	strb	r3, [r7, #15]
      break;
 800213a:	e015      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002144:	2b00      	cmp	r3, #0
 8002146:	d00e      	beq.n	8002166 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	73fb      	strb	r3, [r7, #15]
      break;
 800214c:	e00b      	b.n	8002166 <DMA_CheckFifoParam+0xe6>
      break;
 800214e:	bf00      	nop
 8002150:	e00a      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      break;
 8002152:	bf00      	nop
 8002154:	e008      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      break;
 8002156:	bf00      	nop
 8002158:	e006      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      break;
 800215a:	bf00      	nop
 800215c:	e004      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      break;
 800215e:	bf00      	nop
 8002160:	e002      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      break;   
 8002162:	bf00      	nop
 8002164:	e000      	b.n	8002168 <DMA_CheckFifoParam+0xe8>
      break;
 8002166:	bf00      	nop
    }
  } 
  
  return status; 
 8002168:	7bfb      	ldrb	r3, [r7, #15]
}
 800216a:	4618      	mov	r0, r3
 800216c:	3714      	adds	r7, #20
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop

08002178 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af00      	add	r7, sp, #0
 800217e:	60f8      	str	r0, [r7, #12]
 8002180:	60b9      	str	r1, [r7, #8]
 8002182:	607a      	str	r2, [r7, #4]
 8002184:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002186:	2300      	movs	r3, #0
 8002188:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	2b80      	cmp	r3, #128	; 0x80
 8002190:	d106      	bne.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002198:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	f001 b911 	b.w	80033c2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d007      	beq.n	80021b8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d003      	beq.n	80021b8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d105      	bne.n	80021c4 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2240      	movs	r2, #64	; 0x40
 80021bc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	f001 b8ff 	b.w	80033c2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80021ca:	2b01      	cmp	r3, #1
 80021cc:	d102      	bne.n	80021d4 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 80021ce:	2302      	movs	r3, #2
 80021d0:	f001 b8f7 	b.w	80033c2 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2201      	movs	r2, #1
 80021d8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e2:	b2db      	uxtb	r3, r3
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	f041 80e5 	bne.w	80033b4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	2202      	movs	r2, #2
 80021ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	2200      	movs	r2, #0
 80021f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	681a      	ldr	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002206:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002210:	6a3b      	ldr	r3, [r7, #32]
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f001 f910 	bl	800343c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	4b8d      	ldr	r3, [pc, #564]	; (8002458 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002224:	429a      	cmp	r2, r3
 8002226:	d960      	bls.n	80022ea <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a8b      	ldr	r2, [pc, #556]	; (800245c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d057      	beq.n	80022e2 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a8a      	ldr	r2, [pc, #552]	; (8002460 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d050      	beq.n	80022de <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a88      	ldr	r2, [pc, #544]	; (8002464 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d049      	beq.n	80022da <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	4a87      	ldr	r2, [pc, #540]	; (8002468 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d042      	beq.n	80022d6 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a85      	ldr	r2, [pc, #532]	; (800246c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d03a      	beq.n	80022d0 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a84      	ldr	r2, [pc, #528]	; (8002470 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8002260:	4293      	cmp	r3, r2
 8002262:	d032      	beq.n	80022ca <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	4a82      	ldr	r2, [pc, #520]	; (8002474 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d02a      	beq.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a81      	ldr	r2, [pc, #516]	; (8002478 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d022      	beq.n	80022be <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a7f      	ldr	r2, [pc, #508]	; (800247c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d01a      	beq.n	80022b8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a7e      	ldr	r2, [pc, #504]	; (8002480 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d012      	beq.n	80022b2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a7c      	ldr	r2, [pc, #496]	; (8002484 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d00a      	beq.n	80022ac <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a7b      	ldr	r2, [pc, #492]	; (8002488 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d102      	bne.n	80022a6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80022a0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022a4:	e01e      	b.n	80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022a6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022aa:	e01b      	b.n	80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022ac:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022b0:	e018      	b.n	80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022b2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022b6:	e015      	b.n	80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022bc:	e012      	b.n	80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022c2:	e00f      	b.n	80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022c4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022c8:	e00c      	b.n	80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022ce:	e009      	b.n	80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022d0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80022d4:	e006      	b.n	80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022d6:	2320      	movs	r3, #32
 80022d8:	e004      	b.n	80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022da:	2320      	movs	r3, #32
 80022dc:	e002      	b.n	80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022de:	2320      	movs	r3, #32
 80022e0:	e000      	b.n	80022e4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022e2:	2320      	movs	r3, #32
 80022e4:	4a69      	ldr	r2, [pc, #420]	; (800248c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80022e6:	60d3      	str	r3, [r2, #12]
 80022e8:	e14f      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	461a      	mov	r2, r3
 80022f0:	4b67      	ldr	r3, [pc, #412]	; (8002490 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 80022f2:	429a      	cmp	r2, r3
 80022f4:	d960      	bls.n	80023b8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a58      	ldr	r2, [pc, #352]	; (800245c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d057      	beq.n	80023b0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a56      	ldr	r2, [pc, #344]	; (8002460 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002306:	4293      	cmp	r3, r2
 8002308:	d050      	beq.n	80023ac <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	4a55      	ldr	r2, [pc, #340]	; (8002464 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d049      	beq.n	80023a8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a53      	ldr	r2, [pc, #332]	; (8002468 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800231a:	4293      	cmp	r3, r2
 800231c:	d042      	beq.n	80023a4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	4a52      	ldr	r2, [pc, #328]	; (800246c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002324:	4293      	cmp	r3, r2
 8002326:	d03a      	beq.n	800239e <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a50      	ldr	r2, [pc, #320]	; (8002470 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d032      	beq.n	8002398 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a4f      	ldr	r2, [pc, #316]	; (8002474 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d02a      	beq.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a4d      	ldr	r2, [pc, #308]	; (8002478 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d022      	beq.n	800238c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a4c      	ldr	r2, [pc, #304]	; (800247c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800234c:	4293      	cmp	r3, r2
 800234e:	d01a      	beq.n	8002386 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a4a      	ldr	r2, [pc, #296]	; (8002480 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d012      	beq.n	8002380 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4a49      	ldr	r2, [pc, #292]	; (8002484 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002360:	4293      	cmp	r3, r2
 8002362:	d00a      	beq.n	800237a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a47      	ldr	r2, [pc, #284]	; (8002488 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d102      	bne.n	8002374 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 800236e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002372:	e01e      	b.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002374:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002378:	e01b      	b.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800237a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800237e:	e018      	b.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002380:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002384:	e015      	b.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002386:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800238a:	e012      	b.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800238c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002390:	e00f      	b.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002392:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002396:	e00c      	b.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8002398:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800239c:	e009      	b.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 800239e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023a2:	e006      	b.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023a4:	2320      	movs	r3, #32
 80023a6:	e004      	b.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023a8:	2320      	movs	r3, #32
 80023aa:	e002      	b.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023ac:	2320      	movs	r3, #32
 80023ae:	e000      	b.n	80023b2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023b0:	2320      	movs	r3, #32
 80023b2:	4a36      	ldr	r2, [pc, #216]	; (800248c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80023b4:	6093      	str	r3, [r2, #8]
 80023b6:	e0e8      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	461a      	mov	r2, r3
 80023be:	4b35      	ldr	r3, [pc, #212]	; (8002494 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 80023c0:	429a      	cmp	r2, r3
 80023c2:	f240 8082 	bls.w	80024ca <HAL_DMAEx_MultiBufferStart_IT+0x352>
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4a24      	ldr	r2, [pc, #144]	; (800245c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d078      	beq.n	80024c2 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a22      	ldr	r2, [pc, #136]	; (8002460 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d071      	beq.n	80024be <HAL_DMAEx_MultiBufferStart_IT+0x346>
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4a21      	ldr	r2, [pc, #132]	; (8002464 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d06a      	beq.n	80024ba <HAL_DMAEx_MultiBufferStart_IT+0x342>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a1f      	ldr	r2, [pc, #124]	; (8002468 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d063      	beq.n	80024b6 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4a1e      	ldr	r2, [pc, #120]	; (800246c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 80023f4:	4293      	cmp	r3, r2
 80023f6:	d05b      	beq.n	80024b0 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a1c      	ldr	r2, [pc, #112]	; (8002470 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d053      	beq.n	80024aa <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4a1b      	ldr	r2, [pc, #108]	; (8002474 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002408:	4293      	cmp	r3, r2
 800240a:	d04b      	beq.n	80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a19      	ldr	r2, [pc, #100]	; (8002478 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d043      	beq.n	800249e <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a18      	ldr	r2, [pc, #96]	; (800247c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800241c:	4293      	cmp	r3, r2
 800241e:	d03b      	beq.n	8002498 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a16      	ldr	r2, [pc, #88]	; (8002480 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d012      	beq.n	8002450 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	4a15      	ldr	r2, [pc, #84]	; (8002484 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002430:	4293      	cmp	r3, r2
 8002432:	d00a      	beq.n	800244a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a13      	ldr	r2, [pc, #76]	; (8002488 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d102      	bne.n	8002444 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800243e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002442:	e03f      	b.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002444:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002448:	e03c      	b.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800244a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800244e:	e039      	b.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002450:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002454:	e036      	b.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002456:	bf00      	nop
 8002458:	40026458 	.word	0x40026458
 800245c:	40026010 	.word	0x40026010
 8002460:	40026410 	.word	0x40026410
 8002464:	40026070 	.word	0x40026070
 8002468:	40026470 	.word	0x40026470
 800246c:	40026028 	.word	0x40026028
 8002470:	40026428 	.word	0x40026428
 8002474:	40026088 	.word	0x40026088
 8002478:	40026488 	.word	0x40026488
 800247c:	40026040 	.word	0x40026040
 8002480:	40026440 	.word	0x40026440
 8002484:	400260a0 	.word	0x400260a0
 8002488:	400264a0 	.word	0x400264a0
 800248c:	40026400 	.word	0x40026400
 8002490:	400260b8 	.word	0x400260b8
 8002494:	40026058 	.word	0x40026058
 8002498:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800249c:	e012      	b.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800249e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024a2:	e00f      	b.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024a8:	e00c      	b.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024ae:	e009      	b.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024b4:	e006      	b.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024b6:	2320      	movs	r3, #32
 80024b8:	e004      	b.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024ba:	2320      	movs	r3, #32
 80024bc:	e002      	b.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024be:	2320      	movs	r3, #32
 80024c0:	e000      	b.n	80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024c2:	2320      	movs	r3, #32
 80024c4:	4a8c      	ldr	r2, [pc, #560]	; (80026f8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80024c6:	60d3      	str	r3, [r2, #12]
 80024c8:	e05f      	b.n	800258a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a8b      	ldr	r2, [pc, #556]	; (80026fc <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d057      	beq.n	8002584 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a89      	ldr	r2, [pc, #548]	; (8002700 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d050      	beq.n	8002580 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a88      	ldr	r2, [pc, #544]	; (8002704 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d049      	beq.n	800257c <HAL_DMAEx_MultiBufferStart_IT+0x404>
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a86      	ldr	r2, [pc, #536]	; (8002708 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d042      	beq.n	8002578 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a85      	ldr	r2, [pc, #532]	; (800270c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d03a      	beq.n	8002572 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a83      	ldr	r2, [pc, #524]	; (8002710 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d032      	beq.n	800256c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4a82      	ldr	r2, [pc, #520]	; (8002714 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800250c:	4293      	cmp	r3, r2
 800250e:	d02a      	beq.n	8002566 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a80      	ldr	r2, [pc, #512]	; (8002718 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d022      	beq.n	8002560 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	4a7f      	ldr	r2, [pc, #508]	; (800271c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d01a      	beq.n	800255a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a7d      	ldr	r2, [pc, #500]	; (8002720 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d012      	beq.n	8002554 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4a7c      	ldr	r2, [pc, #496]	; (8002724 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002534:	4293      	cmp	r3, r2
 8002536:	d00a      	beq.n	800254e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a7a      	ldr	r2, [pc, #488]	; (8002728 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d102      	bne.n	8002548 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002542:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002546:	e01e      	b.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002548:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800254c:	e01b      	b.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800254e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002552:	e018      	b.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002554:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002558:	e015      	b.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800255a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800255e:	e012      	b.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002560:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002564:	e00f      	b.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002566:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800256a:	e00c      	b.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800256c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002570:	e009      	b.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002572:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002576:	e006      	b.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002578:	2320      	movs	r3, #32
 800257a:	e004      	b.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800257c:	2320      	movs	r3, #32
 800257e:	e002      	b.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002580:	2320      	movs	r3, #32
 8002582:	e000      	b.n	8002586 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002584:	2320      	movs	r3, #32
 8002586:	4a5c      	ldr	r2, [pc, #368]	; (80026f8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002588:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	461a      	mov	r2, r3
 8002590:	4b66      	ldr	r3, [pc, #408]	; (800272c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8002592:	429a      	cmp	r2, r3
 8002594:	d960      	bls.n	8002658 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a58      	ldr	r2, [pc, #352]	; (80026fc <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d057      	beq.n	8002650 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	4a56      	ldr	r2, [pc, #344]	; (8002700 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d050      	beq.n	800264c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4a55      	ldr	r2, [pc, #340]	; (8002704 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d049      	beq.n	8002648 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a53      	ldr	r2, [pc, #332]	; (8002708 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d042      	beq.n	8002644 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a52      	ldr	r2, [pc, #328]	; (800270c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d03a      	beq.n	800263e <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a50      	ldr	r2, [pc, #320]	; (8002710 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d032      	beq.n	8002638 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a4f      	ldr	r2, [pc, #316]	; (8002714 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d02a      	beq.n	8002632 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a4d      	ldr	r2, [pc, #308]	; (8002718 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d022      	beq.n	800262c <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a4c      	ldr	r2, [pc, #304]	; (800271c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d01a      	beq.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a4a      	ldr	r2, [pc, #296]	; (8002720 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d012      	beq.n	8002620 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4a49      	ldr	r2, [pc, #292]	; (8002724 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002600:	4293      	cmp	r3, r2
 8002602:	d00a      	beq.n	800261a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a47      	ldr	r2, [pc, #284]	; (8002728 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d102      	bne.n	8002614 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800260e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002612:	e01e      	b.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002614:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002618:	e01b      	b.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800261a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800261e:	e018      	b.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002620:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002624:	e015      	b.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002626:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800262a:	e012      	b.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800262c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002630:	e00f      	b.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002632:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002636:	e00c      	b.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002638:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800263c:	e009      	b.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800263e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002642:	e006      	b.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002644:	2310      	movs	r3, #16
 8002646:	e004      	b.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002648:	2310      	movs	r3, #16
 800264a:	e002      	b.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800264c:	2310      	movs	r3, #16
 800264e:	e000      	b.n	8002652 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002650:	2310      	movs	r3, #16
 8002652:	4a37      	ldr	r2, [pc, #220]	; (8002730 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002654:	60d3      	str	r3, [r2, #12]
 8002656:	e14f      	b.n	80028f8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	461a      	mov	r2, r3
 800265e:	4b35      	ldr	r3, [pc, #212]	; (8002734 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8002660:	429a      	cmp	r2, r3
 8002662:	f240 8082 	bls.w	800276a <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4a24      	ldr	r2, [pc, #144]	; (80026fc <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 800266c:	4293      	cmp	r3, r2
 800266e:	d078      	beq.n	8002762 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a22      	ldr	r2, [pc, #136]	; (8002700 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d071      	beq.n	800275e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4a21      	ldr	r2, [pc, #132]	; (8002704 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002680:	4293      	cmp	r3, r2
 8002682:	d06a      	beq.n	800275a <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a1f      	ldr	r2, [pc, #124]	; (8002708 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d063      	beq.n	8002756 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a1e      	ldr	r2, [pc, #120]	; (800270c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d05b      	beq.n	8002750 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a1c      	ldr	r2, [pc, #112]	; (8002710 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d053      	beq.n	800274a <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	4a1b      	ldr	r2, [pc, #108]	; (8002714 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d04b      	beq.n	8002744 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a19      	ldr	r2, [pc, #100]	; (8002718 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d043      	beq.n	800273e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a18      	ldr	r2, [pc, #96]	; (800271c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d03b      	beq.n	8002738 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a16      	ldr	r2, [pc, #88]	; (8002720 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d012      	beq.n	80026f0 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a15      	ldr	r2, [pc, #84]	; (8002724 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d00a      	beq.n	80026ea <HAL_DMAEx_MultiBufferStart_IT+0x572>
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a13      	ldr	r2, [pc, #76]	; (8002728 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d102      	bne.n	80026e4 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 80026de:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026e2:	e03f      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80026e4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80026e8:	e03c      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80026ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026ee:	e039      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80026f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026f4:	e036      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80026f6:	bf00      	nop
 80026f8:	40026000 	.word	0x40026000
 80026fc:	40026010 	.word	0x40026010
 8002700:	40026410 	.word	0x40026410
 8002704:	40026070 	.word	0x40026070
 8002708:	40026470 	.word	0x40026470
 800270c:	40026028 	.word	0x40026028
 8002710:	40026428 	.word	0x40026428
 8002714:	40026088 	.word	0x40026088
 8002718:	40026488 	.word	0x40026488
 800271c:	40026040 	.word	0x40026040
 8002720:	40026440 	.word	0x40026440
 8002724:	400260a0 	.word	0x400260a0
 8002728:	400264a0 	.word	0x400264a0
 800272c:	40026458 	.word	0x40026458
 8002730:	40026400 	.word	0x40026400
 8002734:	400260b8 	.word	0x400260b8
 8002738:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800273c:	e012      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800273e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002742:	e00f      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002744:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002748:	e00c      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800274a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800274e:	e009      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002750:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002754:	e006      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002756:	2310      	movs	r3, #16
 8002758:	e004      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800275a:	2310      	movs	r3, #16
 800275c:	e002      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800275e:	2310      	movs	r3, #16
 8002760:	e000      	b.n	8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002762:	2310      	movs	r3, #16
 8002764:	4a8c      	ldr	r2, [pc, #560]	; (8002998 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002766:	6093      	str	r3, [r2, #8]
 8002768:	e0c6      	b.n	80028f8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	461a      	mov	r2, r3
 8002770:	4b8a      	ldr	r3, [pc, #552]	; (800299c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002772:	429a      	cmp	r2, r3
 8002774:	d960      	bls.n	8002838 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a89      	ldr	r2, [pc, #548]	; (80029a0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d057      	beq.n	8002830 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a87      	ldr	r2, [pc, #540]	; (80029a4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d050      	beq.n	800282c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a86      	ldr	r2, [pc, #536]	; (80029a8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d049      	beq.n	8002828 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4a84      	ldr	r2, [pc, #528]	; (80029ac <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d042      	beq.n	8002824 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a83      	ldr	r2, [pc, #524]	; (80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d03a      	beq.n	800281e <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a81      	ldr	r2, [pc, #516]	; (80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d032      	beq.n	8002818 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	4a80      	ldr	r2, [pc, #512]	; (80029b8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80027b8:	4293      	cmp	r3, r2
 80027ba:	d02a      	beq.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a7e      	ldr	r2, [pc, #504]	; (80029bc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d022      	beq.n	800280c <HAL_DMAEx_MultiBufferStart_IT+0x694>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7d      	ldr	r2, [pc, #500]	; (80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d01a      	beq.n	8002806 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4a7b      	ldr	r2, [pc, #492]	; (80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d012      	beq.n	8002800 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a7a      	ldr	r2, [pc, #488]	; (80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80027e0:	4293      	cmp	r3, r2
 80027e2:	d00a      	beq.n	80027fa <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a78      	ldr	r2, [pc, #480]	; (80029cc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d102      	bne.n	80027f4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80027ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027f2:	e01e      	b.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80027f4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80027f8:	e01b      	b.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80027fa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80027fe:	e018      	b.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002800:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002804:	e015      	b.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002806:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800280a:	e012      	b.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800280c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002810:	e00f      	b.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002812:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002816:	e00c      	b.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002818:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800281c:	e009      	b.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800281e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002822:	e006      	b.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002824:	2310      	movs	r3, #16
 8002826:	e004      	b.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002828:	2310      	movs	r3, #16
 800282a:	e002      	b.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800282c:	2310      	movs	r3, #16
 800282e:	e000      	b.n	8002832 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002830:	2310      	movs	r3, #16
 8002832:	4a67      	ldr	r2, [pc, #412]	; (80029d0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002834:	60d3      	str	r3, [r2, #12]
 8002836:	e05f      	b.n	80028f8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a58      	ldr	r2, [pc, #352]	; (80029a0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d057      	beq.n	80028f2 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a57      	ldr	r2, [pc, #348]	; (80029a4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d050      	beq.n	80028ee <HAL_DMAEx_MultiBufferStart_IT+0x776>
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a55      	ldr	r2, [pc, #340]	; (80029a8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d049      	beq.n	80028ea <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a54      	ldr	r2, [pc, #336]	; (80029ac <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d042      	beq.n	80028e6 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a52      	ldr	r2, [pc, #328]	; (80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d03a      	beq.n	80028e0 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	4a51      	ldr	r2, [pc, #324]	; (80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002870:	4293      	cmp	r3, r2
 8002872:	d032      	beq.n	80028da <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	4a4f      	ldr	r2, [pc, #316]	; (80029b8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800287a:	4293      	cmp	r3, r2
 800287c:	d02a      	beq.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4a4e      	ldr	r2, [pc, #312]	; (80029bc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002884:	4293      	cmp	r3, r2
 8002886:	d022      	beq.n	80028ce <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a4c      	ldr	r2, [pc, #304]	; (80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d01a      	beq.n	80028c8 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a4b      	ldr	r2, [pc, #300]	; (80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d012      	beq.n	80028c2 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a49      	ldr	r2, [pc, #292]	; (80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80028a2:	4293      	cmp	r3, r2
 80028a4:	d00a      	beq.n	80028bc <HAL_DMAEx_MultiBufferStart_IT+0x744>
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	4a48      	ldr	r2, [pc, #288]	; (80029cc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d102      	bne.n	80028b6 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80028b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028b4:	e01e      	b.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028b6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028ba:	e01b      	b.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028bc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028c0:	e018      	b.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028c2:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028c6:	e015      	b.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028c8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028cc:	e012      	b.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d2:	e00f      	b.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028d8:	e00c      	b.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028de:	e009      	b.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028e4:	e006      	b.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028e6:	2310      	movs	r3, #16
 80028e8:	e004      	b.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028ea:	2310      	movs	r3, #16
 80028ec:	e002      	b.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028ee:	2310      	movs	r3, #16
 80028f0:	e000      	b.n	80028f4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028f2:	2310      	movs	r3, #16
 80028f4:	4a36      	ldr	r2, [pc, #216]	; (80029d0 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80028f6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	461a      	mov	r2, r3
 80028fe:	4b35      	ldr	r3, [pc, #212]	; (80029d4 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002900:	429a      	cmp	r2, r3
 8002902:	f240 8082 	bls.w	8002a0a <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4a25      	ldr	r2, [pc, #148]	; (80029a0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d078      	beq.n	8002a02 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a23      	ldr	r2, [pc, #140]	; (80029a4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d071      	beq.n	80029fe <HAL_DMAEx_MultiBufferStart_IT+0x886>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4a22      	ldr	r2, [pc, #136]	; (80029a8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002920:	4293      	cmp	r3, r2
 8002922:	d06a      	beq.n	80029fa <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a20      	ldr	r2, [pc, #128]	; (80029ac <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d063      	beq.n	80029f6 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d05b      	beq.n	80029f0 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4a1d      	ldr	r2, [pc, #116]	; (80029b4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d053      	beq.n	80029ea <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1c      	ldr	r2, [pc, #112]	; (80029b8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d04b      	beq.n	80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	4a1a      	ldr	r2, [pc, #104]	; (80029bc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002952:	4293      	cmp	r3, r2
 8002954:	d043      	beq.n	80029de <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a19      	ldr	r2, [pc, #100]	; (80029c0 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d03b      	beq.n	80029d8 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a17      	ldr	r2, [pc, #92]	; (80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d012      	beq.n	8002990 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a16      	ldr	r2, [pc, #88]	; (80029c8 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d00a      	beq.n	800298a <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a14      	ldr	r2, [pc, #80]	; (80029cc <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d102      	bne.n	8002984 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800297e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002982:	e03f      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002984:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002988:	e03c      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800298a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800298e:	e039      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002990:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002994:	e036      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002996:	bf00      	nop
 8002998:	40026400 	.word	0x40026400
 800299c:	40026058 	.word	0x40026058
 80029a0:	40026010 	.word	0x40026010
 80029a4:	40026410 	.word	0x40026410
 80029a8:	40026070 	.word	0x40026070
 80029ac:	40026470 	.word	0x40026470
 80029b0:	40026028 	.word	0x40026028
 80029b4:	40026428 	.word	0x40026428
 80029b8:	40026088 	.word	0x40026088
 80029bc:	40026488 	.word	0x40026488
 80029c0:	40026040 	.word	0x40026040
 80029c4:	40026440 	.word	0x40026440
 80029c8:	400260a0 	.word	0x400260a0
 80029cc:	400264a0 	.word	0x400264a0
 80029d0:	40026000 	.word	0x40026000
 80029d4:	40026458 	.word	0x40026458
 80029d8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029dc:	e012      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80029de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e2:	e00f      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80029e4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029e8:	e00c      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80029ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029ee:	e009      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80029f0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029f4:	e006      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80029f6:	2308      	movs	r3, #8
 80029f8:	e004      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80029fa:	2308      	movs	r3, #8
 80029fc:	e002      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80029fe:	2308      	movs	r3, #8
 8002a00:	e000      	b.n	8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002a02:	2308      	movs	r3, #8
 8002a04:	4a8c      	ldr	r2, [pc, #560]	; (8002c38 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002a06:	60d3      	str	r3, [r2, #12]
 8002a08:	e14e      	b.n	8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	461a      	mov	r2, r3
 8002a10:	4b8a      	ldr	r3, [pc, #552]	; (8002c3c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d960      	bls.n	8002ad8 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a89      	ldr	r2, [pc, #548]	; (8002c40 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d057      	beq.n	8002ad0 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a87      	ldr	r2, [pc, #540]	; (8002c44 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d050      	beq.n	8002acc <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a86      	ldr	r2, [pc, #536]	; (8002c48 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d049      	beq.n	8002ac8 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a84      	ldr	r2, [pc, #528]	; (8002c4c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d042      	beq.n	8002ac4 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a83      	ldr	r2, [pc, #524]	; (8002c50 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d03a      	beq.n	8002abe <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a81      	ldr	r2, [pc, #516]	; (8002c54 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d032      	beq.n	8002ab8 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a80      	ldr	r2, [pc, #512]	; (8002c58 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d02a      	beq.n	8002ab2 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a7e      	ldr	r2, [pc, #504]	; (8002c5c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d022      	beq.n	8002aac <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a7d      	ldr	r2, [pc, #500]	; (8002c60 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d01a      	beq.n	8002aa6 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a7b      	ldr	r2, [pc, #492]	; (8002c64 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d012      	beq.n	8002aa0 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a7a      	ldr	r2, [pc, #488]	; (8002c68 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d00a      	beq.n	8002a9a <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a78      	ldr	r2, [pc, #480]	; (8002c6c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d102      	bne.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002a8e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a92:	e01e      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002a94:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a98:	e01b      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002a9a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a9e:	e018      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002aa0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002aa4:	e015      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002aa6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002aaa:	e012      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002aac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab0:	e00f      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002ab2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ab6:	e00c      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002ab8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002abc:	e009      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002abe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002ac2:	e006      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002ac4:	2308      	movs	r3, #8
 8002ac6:	e004      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002ac8:	2308      	movs	r3, #8
 8002aca:	e002      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002acc:	2308      	movs	r3, #8
 8002ace:	e000      	b.n	8002ad2 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002ad0:	2308      	movs	r3, #8
 8002ad2:	4a59      	ldr	r2, [pc, #356]	; (8002c38 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002ad4:	6093      	str	r3, [r2, #8]
 8002ad6:	e0e7      	b.n	8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	461a      	mov	r2, r3
 8002ade:	4b64      	ldr	r3, [pc, #400]	; (8002c70 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d960      	bls.n	8002ba6 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a55      	ldr	r2, [pc, #340]	; (8002c40 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d057      	beq.n	8002b9e <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4a54      	ldr	r2, [pc, #336]	; (8002c44 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002af4:	4293      	cmp	r3, r2
 8002af6:	d050      	beq.n	8002b9a <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a52      	ldr	r2, [pc, #328]	; (8002c48 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d049      	beq.n	8002b96 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4a51      	ldr	r2, [pc, #324]	; (8002c4c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d042      	beq.n	8002b92 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a4f      	ldr	r2, [pc, #316]	; (8002c50 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002b12:	4293      	cmp	r3, r2
 8002b14:	d03a      	beq.n	8002b8c <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a4e      	ldr	r2, [pc, #312]	; (8002c54 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d032      	beq.n	8002b86 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a4c      	ldr	r2, [pc, #304]	; (8002c58 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d02a      	beq.n	8002b80 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	4a4b      	ldr	r2, [pc, #300]	; (8002c5c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002b30:	4293      	cmp	r3, r2
 8002b32:	d022      	beq.n	8002b7a <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a49      	ldr	r2, [pc, #292]	; (8002c60 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d01a      	beq.n	8002b74 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4a48      	ldr	r2, [pc, #288]	; (8002c64 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002b44:	4293      	cmp	r3, r2
 8002b46:	d012      	beq.n	8002b6e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4a46      	ldr	r2, [pc, #280]	; (8002c68 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002b4e:	4293      	cmp	r3, r2
 8002b50:	d00a      	beq.n	8002b68 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a45      	ldr	r2, [pc, #276]	; (8002c6c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d102      	bne.n	8002b62 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8002b5c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b60:	e01e      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002b62:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b66:	e01b      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002b68:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b6c:	e018      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002b6e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b72:	e015      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002b74:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002b78:	e012      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002b7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b7e:	e00f      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002b80:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b84:	e00c      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002b86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b8a:	e009      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002b8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b90:	e006      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002b92:	2308      	movs	r3, #8
 8002b94:	e004      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002b96:	2308      	movs	r3, #8
 8002b98:	e002      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002b9a:	2308      	movs	r3, #8
 8002b9c:	e000      	b.n	8002ba0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002b9e:	2308      	movs	r3, #8
 8002ba0:	4a34      	ldr	r2, [pc, #208]	; (8002c74 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002ba2:	60d3      	str	r3, [r2, #12]
 8002ba4:	e080      	b.n	8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a25      	ldr	r2, [pc, #148]	; (8002c40 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d078      	beq.n	8002ca2 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a23      	ldr	r2, [pc, #140]	; (8002c44 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d071      	beq.n	8002c9e <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a22      	ldr	r2, [pc, #136]	; (8002c48 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d06a      	beq.n	8002c9a <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d063      	beq.n	8002c96 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1f      	ldr	r2, [pc, #124]	; (8002c50 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d05b      	beq.n	8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a1d      	ldr	r2, [pc, #116]	; (8002c54 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d053      	beq.n	8002c8a <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4a1c      	ldr	r2, [pc, #112]	; (8002c58 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d04b      	beq.n	8002c84 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4a1a      	ldr	r2, [pc, #104]	; (8002c5c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d043      	beq.n	8002c7e <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	4a19      	ldr	r2, [pc, #100]	; (8002c60 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002bfc:	4293      	cmp	r3, r2
 8002bfe:	d03b      	beq.n	8002c78 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d012      	beq.n	8002c30 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4a16      	ldr	r2, [pc, #88]	; (8002c68 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00a      	beq.n	8002c2a <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a14      	ldr	r2, [pc, #80]	; (8002c6c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d102      	bne.n	8002c24 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8002c1e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c22:	e03f      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c24:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c28:	e03c      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c2e:	e039      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c30:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c34:	e036      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c36:	bf00      	nop
 8002c38:	40026400 	.word	0x40026400
 8002c3c:	400260b8 	.word	0x400260b8
 8002c40:	40026010 	.word	0x40026010
 8002c44:	40026410 	.word	0x40026410
 8002c48:	40026070 	.word	0x40026070
 8002c4c:	40026470 	.word	0x40026470
 8002c50:	40026028 	.word	0x40026028
 8002c54:	40026428 	.word	0x40026428
 8002c58:	40026088 	.word	0x40026088
 8002c5c:	40026488 	.word	0x40026488
 8002c60:	40026040 	.word	0x40026040
 8002c64:	40026440 	.word	0x40026440
 8002c68:	400260a0 	.word	0x400260a0
 8002c6c:	400264a0 	.word	0x400264a0
 8002c70:	40026058 	.word	0x40026058
 8002c74:	40026000 	.word	0x40026000
 8002c78:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c7c:	e012      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c82:	e00f      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c84:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c88:	e00c      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c8a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c8e:	e009      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c90:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c94:	e006      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c96:	2308      	movs	r3, #8
 8002c98:	e004      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c9a:	2308      	movs	r3, #8
 8002c9c:	e002      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c9e:	2308      	movs	r3, #8
 8002ca0:	e000      	b.n	8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	4a8a      	ldr	r2, [pc, #552]	; (8002ed0 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8002ca6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	461a      	mov	r2, r3
 8002cae:	4b89      	ldr	r3, [pc, #548]	; (8002ed4 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d960      	bls.n	8002d76 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a87      	ldr	r2, [pc, #540]	; (8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d057      	beq.n	8002d6e <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a86      	ldr	r2, [pc, #536]	; (8002edc <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d050      	beq.n	8002d6a <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a84      	ldr	r2, [pc, #528]	; (8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d049      	beq.n	8002d66 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a83      	ldr	r2, [pc, #524]	; (8002ee4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d042      	beq.n	8002d62 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a81      	ldr	r2, [pc, #516]	; (8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d03a      	beq.n	8002d5c <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a80      	ldr	r2, [pc, #512]	; (8002eec <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d032      	beq.n	8002d56 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a7e      	ldr	r2, [pc, #504]	; (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d02a      	beq.n	8002d50 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a7d      	ldr	r2, [pc, #500]	; (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d022      	beq.n	8002d4a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a7b      	ldr	r2, [pc, #492]	; (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d01a      	beq.n	8002d44 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a7a      	ldr	r2, [pc, #488]	; (8002efc <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d012      	beq.n	8002d3e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a78      	ldr	r2, [pc, #480]	; (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d00a      	beq.n	8002d38 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a77      	ldr	r2, [pc, #476]	; (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d102      	bne.n	8002d32 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8002d2c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d30:	e01e      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d32:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d36:	e01b      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d38:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d3c:	e018      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d3e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d42:	e015      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d44:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d48:	e012      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d4a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d4e:	e00f      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d50:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d54:	e00c      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d5a:	e009      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d5c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d60:	e006      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d62:	2304      	movs	r3, #4
 8002d64:	e004      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d66:	2304      	movs	r3, #4
 8002d68:	e002      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d6a:	2304      	movs	r3, #4
 8002d6c:	e000      	b.n	8002d70 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d6e:	2304      	movs	r3, #4
 8002d70:	4a65      	ldr	r2, [pc, #404]	; (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002d72:	60d3      	str	r3, [r2, #12]
 8002d74:	e150      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	4b63      	ldr	r3, [pc, #396]	; (8002f0c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d960      	bls.n	8002e44 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a54      	ldr	r2, [pc, #336]	; (8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d057      	beq.n	8002e3c <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	4a52      	ldr	r2, [pc, #328]	; (8002edc <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d050      	beq.n	8002e38 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a51      	ldr	r2, [pc, #324]	; (8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d049      	beq.n	8002e34 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4a4f      	ldr	r2, [pc, #316]	; (8002ee4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d042      	beq.n	8002e30 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	4a4e      	ldr	r2, [pc, #312]	; (8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d03a      	beq.n	8002e2a <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a4c      	ldr	r2, [pc, #304]	; (8002eec <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d032      	beq.n	8002e24 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a4b      	ldr	r2, [pc, #300]	; (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d02a      	beq.n	8002e1e <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a49      	ldr	r2, [pc, #292]	; (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d022      	beq.n	8002e18 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a48      	ldr	r2, [pc, #288]	; (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d01a      	beq.n	8002e12 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a46      	ldr	r2, [pc, #280]	; (8002efc <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d012      	beq.n	8002e0c <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a45      	ldr	r2, [pc, #276]	; (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00a      	beq.n	8002e06 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a43      	ldr	r2, [pc, #268]	; (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d102      	bne.n	8002e00 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8002dfa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002dfe:	e01e      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e00:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e04:	e01b      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e06:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e0a:	e018      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e0c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e10:	e015      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e16:	e012      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e18:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e1c:	e00f      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e22:	e00c      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e24:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e28:	e009      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e2a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e2e:	e006      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e30:	2304      	movs	r3, #4
 8002e32:	e004      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e34:	2304      	movs	r3, #4
 8002e36:	e002      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e38:	2304      	movs	r3, #4
 8002e3a:	e000      	b.n	8002e3e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e3c:	2304      	movs	r3, #4
 8002e3e:	4a32      	ldr	r2, [pc, #200]	; (8002f08 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002e40:	6093      	str	r3, [r2, #8]
 8002e42:	e0e9      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	4b31      	ldr	r3, [pc, #196]	; (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002e4c:	429a      	cmp	r2, r3
 8002e4e:	f240 8083 	bls.w	8002f58 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4a20      	ldr	r2, [pc, #128]	; (8002ed8 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d079      	beq.n	8002f50 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1e      	ldr	r2, [pc, #120]	; (8002edc <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d072      	beq.n	8002f4c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d06b      	beq.n	8002f48 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a1b      	ldr	r2, [pc, #108]	; (8002ee4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d064      	beq.n	8002f44 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a1a      	ldr	r2, [pc, #104]	; (8002ee8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d05c      	beq.n	8002f3e <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	4a18      	ldr	r2, [pc, #96]	; (8002eec <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d054      	beq.n	8002f38 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a17      	ldr	r2, [pc, #92]	; (8002ef0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d04c      	beq.n	8002f32 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a15      	ldr	r2, [pc, #84]	; (8002ef4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d044      	beq.n	8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a14      	ldr	r2, [pc, #80]	; (8002ef8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d03c      	beq.n	8002f26 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a12      	ldr	r2, [pc, #72]	; (8002efc <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d034      	beq.n	8002f20 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002ebc:	4293      	cmp	r3, r2
 8002ebe:	d02c      	beq.n	8002f1a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a0f      	ldr	r2, [pc, #60]	; (8002f04 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d124      	bne.n	8002f14 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8002eca:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002ece:	e040      	b.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002ed0:	40026000 	.word	0x40026000
 8002ed4:	40026458 	.word	0x40026458
 8002ed8:	40026010 	.word	0x40026010
 8002edc:	40026410 	.word	0x40026410
 8002ee0:	40026070 	.word	0x40026070
 8002ee4:	40026470 	.word	0x40026470
 8002ee8:	40026028 	.word	0x40026028
 8002eec:	40026428 	.word	0x40026428
 8002ef0:	40026088 	.word	0x40026088
 8002ef4:	40026488 	.word	0x40026488
 8002ef8:	40026040 	.word	0x40026040
 8002efc:	40026440 	.word	0x40026440
 8002f00:	400260a0 	.word	0x400260a0
 8002f04:	400264a0 	.word	0x400264a0
 8002f08:	40026400 	.word	0x40026400
 8002f0c:	400260b8 	.word	0x400260b8
 8002f10:	40026058 	.word	0x40026058
 8002f14:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f18:	e01b      	b.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f1a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f1e:	e018      	b.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f20:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f24:	e015      	b.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f26:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f2a:	e012      	b.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f2c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f30:	e00f      	b.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f32:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f36:	e00c      	b.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f38:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f3c:	e009      	b.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f42:	e006      	b.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f44:	2304      	movs	r3, #4
 8002f46:	e004      	b.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	e002      	b.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f4c:	2304      	movs	r3, #4
 8002f4e:	e000      	b.n	8002f52 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f50:	2304      	movs	r3, #4
 8002f52:	4a8b      	ldr	r2, [pc, #556]	; (8003180 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8002f54:	60d3      	str	r3, [r2, #12]
 8002f56:	e05f      	b.n	8003018 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a89      	ldr	r2, [pc, #548]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d057      	beq.n	8003012 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a88      	ldr	r2, [pc, #544]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d050      	beq.n	800300e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a86      	ldr	r2, [pc, #536]	; (800318c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d049      	beq.n	800300a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4a85      	ldr	r2, [pc, #532]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d042      	beq.n	8003006 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a83      	ldr	r2, [pc, #524]	; (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002f86:	4293      	cmp	r3, r2
 8002f88:	d03a      	beq.n	8003000 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4a82      	ldr	r2, [pc, #520]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d032      	beq.n	8002ffa <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4a80      	ldr	r2, [pc, #512]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d02a      	beq.n	8002ff4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a7f      	ldr	r2, [pc, #508]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d022      	beq.n	8002fee <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a7d      	ldr	r2, [pc, #500]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d01a      	beq.n	8002fe8 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a7c      	ldr	r2, [pc, #496]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d012      	beq.n	8002fe2 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a7a      	ldr	r2, [pc, #488]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d00a      	beq.n	8002fdc <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a79      	ldr	r2, [pc, #484]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d102      	bne.n	8002fd6 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8002fd0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fd4:	e01e      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002fd6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002fda:	e01b      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002fdc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fe0:	e018      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002fe2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fe6:	e015      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002fe8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002fec:	e012      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002fee:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ff2:	e00f      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002ff4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ff8:	e00c      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002ffa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ffe:	e009      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003000:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003004:	e006      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003006:	2304      	movs	r3, #4
 8003008:	e004      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800300a:	2304      	movs	r3, #4
 800300c:	e002      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800300e:	2304      	movs	r3, #4
 8003010:	e000      	b.n	8003014 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003012:	2304      	movs	r3, #4
 8003014:	4a5a      	ldr	r2, [pc, #360]	; (8003180 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003016:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	4b65      	ldr	r3, [pc, #404]	; (80031b4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003020:	429a      	cmp	r2, r3
 8003022:	d95c      	bls.n	80030de <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a56      	ldr	r2, [pc, #344]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d053      	beq.n	80030d6 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a55      	ldr	r2, [pc, #340]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d04c      	beq.n	80030d2 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a53      	ldr	r2, [pc, #332]	; (800318c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d045      	beq.n	80030ce <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a52      	ldr	r2, [pc, #328]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003048:	4293      	cmp	r3, r2
 800304a:	d03e      	beq.n	80030ca <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a50      	ldr	r2, [pc, #320]	; (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d037      	beq.n	80030c6 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a4f      	ldr	r2, [pc, #316]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d030      	beq.n	80030c2 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a4d      	ldr	r2, [pc, #308]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d029      	beq.n	80030be <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a4c      	ldr	r2, [pc, #304]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d022      	beq.n	80030ba <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a4a      	ldr	r2, [pc, #296]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d01a      	beq.n	80030b4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a49      	ldr	r2, [pc, #292]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d012      	beq.n	80030ae <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a47      	ldr	r2, [pc, #284]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00a      	beq.n	80030a8 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a46      	ldr	r2, [pc, #280]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d102      	bne.n	80030a2 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 800309c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030a0:	e01a      	b.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030a6:	e017      	b.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ac:	e014      	b.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030b2:	e011      	b.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030b8:	e00e      	b.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030ba:	2340      	movs	r3, #64	; 0x40
 80030bc:	e00c      	b.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030be:	2340      	movs	r3, #64	; 0x40
 80030c0:	e00a      	b.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030c2:	2340      	movs	r3, #64	; 0x40
 80030c4:	e008      	b.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030c6:	2340      	movs	r3, #64	; 0x40
 80030c8:	e006      	b.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030ca:	2301      	movs	r3, #1
 80030cc:	e004      	b.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030ce:	2301      	movs	r3, #1
 80030d0:	e002      	b.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030d2:	2301      	movs	r3, #1
 80030d4:	e000      	b.n	80030d8 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030d6:	2301      	movs	r3, #1
 80030d8:	4a37      	ldr	r2, [pc, #220]	; (80031b8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 80030da:	60d3      	str	r3, [r2, #12]
 80030dc:	e141      	b.n	8003362 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	4b35      	ldr	r3, [pc, #212]	; (80031bc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80030e6:	429a      	cmp	r2, r3
 80030e8:	d97c      	bls.n	80031e4 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	4a25      	ldr	r2, [pc, #148]	; (8003184 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d073      	beq.n	80031dc <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	4a23      	ldr	r2, [pc, #140]	; (8003188 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80030fa:	4293      	cmp	r3, r2
 80030fc:	d06c      	beq.n	80031d8 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a22      	ldr	r2, [pc, #136]	; (800318c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d065      	beq.n	80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a20      	ldr	r2, [pc, #128]	; (8003190 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d05e      	beq.n	80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1f      	ldr	r2, [pc, #124]	; (8003194 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d057      	beq.n	80031cc <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d050      	beq.n	80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1c      	ldr	r2, [pc, #112]	; (800319c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d049      	beq.n	80031c4 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1a      	ldr	r2, [pc, #104]	; (80031a0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d042      	beq.n	80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a19      	ldr	r2, [pc, #100]	; (80031a4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d01a      	beq.n	800317a <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a17      	ldr	r2, [pc, #92]	; (80031a8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d012      	beq.n	8003174 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a16      	ldr	r2, [pc, #88]	; (80031ac <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d00a      	beq.n	800316e <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a14      	ldr	r2, [pc, #80]	; (80031b0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d102      	bne.n	8003168 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8003162:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003166:	e03a      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003168:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800316c:	e037      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800316e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003172:	e034      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003174:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003178:	e031      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800317a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800317e:	e02e      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003180:	40026000 	.word	0x40026000
 8003184:	40026010 	.word	0x40026010
 8003188:	40026410 	.word	0x40026410
 800318c:	40026070 	.word	0x40026070
 8003190:	40026470 	.word	0x40026470
 8003194:	40026028 	.word	0x40026028
 8003198:	40026428 	.word	0x40026428
 800319c:	40026088 	.word	0x40026088
 80031a0:	40026488 	.word	0x40026488
 80031a4:	40026040 	.word	0x40026040
 80031a8:	40026440 	.word	0x40026440
 80031ac:	400260a0 	.word	0x400260a0
 80031b0:	400264a0 	.word	0x400264a0
 80031b4:	40026458 	.word	0x40026458
 80031b8:	40026400 	.word	0x40026400
 80031bc:	400260b8 	.word	0x400260b8
 80031c0:	2340      	movs	r3, #64	; 0x40
 80031c2:	e00c      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80031c4:	2340      	movs	r3, #64	; 0x40
 80031c6:	e00a      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80031c8:	2340      	movs	r3, #64	; 0x40
 80031ca:	e008      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80031cc:	2340      	movs	r3, #64	; 0x40
 80031ce:	e006      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80031d0:	2301      	movs	r3, #1
 80031d2:	e004      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e002      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80031d8:	2301      	movs	r3, #1
 80031da:	e000      	b.n	80031de <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80031dc:	2301      	movs	r3, #1
 80031de:	4a7b      	ldr	r2, [pc, #492]	; (80033cc <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 80031e0:	6093      	str	r3, [r2, #8]
 80031e2:	e0be      	b.n	8003362 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	461a      	mov	r2, r3
 80031ea:	4b79      	ldr	r3, [pc, #484]	; (80033d0 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d95c      	bls.n	80032aa <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a77      	ldr	r2, [pc, #476]	; (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d053      	beq.n	80032a2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a76      	ldr	r2, [pc, #472]	; (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003200:	4293      	cmp	r3, r2
 8003202:	d04c      	beq.n	800329e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a74      	ldr	r2, [pc, #464]	; (80033dc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d045      	beq.n	800329a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a73      	ldr	r2, [pc, #460]	; (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d03e      	beq.n	8003296 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a71      	ldr	r2, [pc, #452]	; (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d037      	beq.n	8003292 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a70      	ldr	r2, [pc, #448]	; (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d030      	beq.n	800328e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a6e      	ldr	r2, [pc, #440]	; (80033ec <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d029      	beq.n	800328a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a6d      	ldr	r2, [pc, #436]	; (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d022      	beq.n	8003286 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a6b      	ldr	r2, [pc, #428]	; (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d01a      	beq.n	8003280 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a6a      	ldr	r2, [pc, #424]	; (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d012      	beq.n	800327a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a68      	ldr	r2, [pc, #416]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800325a:	4293      	cmp	r3, r2
 800325c:	d00a      	beq.n	8003274 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a67      	ldr	r2, [pc, #412]	; (8003400 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d102      	bne.n	800326e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8003268:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800326c:	e01a      	b.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800326e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003272:	e017      	b.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003274:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003278:	e014      	b.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800327a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800327e:	e011      	b.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003280:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003284:	e00e      	b.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003286:	2340      	movs	r3, #64	; 0x40
 8003288:	e00c      	b.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800328a:	2340      	movs	r3, #64	; 0x40
 800328c:	e00a      	b.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800328e:	2340      	movs	r3, #64	; 0x40
 8003290:	e008      	b.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003292:	2340      	movs	r3, #64	; 0x40
 8003294:	e006      	b.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8003296:	2301      	movs	r3, #1
 8003298:	e004      	b.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800329a:	2301      	movs	r3, #1
 800329c:	e002      	b.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 800329e:	2301      	movs	r3, #1
 80032a0:	e000      	b.n	80032a4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80032a2:	2301      	movs	r3, #1
 80032a4:	4a57      	ldr	r2, [pc, #348]	; (8003404 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80032a6:	60d3      	str	r3, [r2, #12]
 80032a8:	e05b      	b.n	8003362 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a49      	ldr	r2, [pc, #292]	; (80033d4 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d053      	beq.n	800335c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a47      	ldr	r2, [pc, #284]	; (80033d8 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d04c      	beq.n	8003358 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a46      	ldr	r2, [pc, #280]	; (80033dc <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d045      	beq.n	8003354 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a44      	ldr	r2, [pc, #272]	; (80033e0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d03e      	beq.n	8003350 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4a43      	ldr	r2, [pc, #268]	; (80033e4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 80032d8:	4293      	cmp	r3, r2
 80032da:	d037      	beq.n	800334c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a41      	ldr	r2, [pc, #260]	; (80033e8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d030      	beq.n	8003348 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a40      	ldr	r2, [pc, #256]	; (80033ec <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d029      	beq.n	8003344 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a3e      	ldr	r2, [pc, #248]	; (80033f0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 80032f6:	4293      	cmp	r3, r2
 80032f8:	d022      	beq.n	8003340 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a3d      	ldr	r2, [pc, #244]	; (80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d01a      	beq.n	800333a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4a3b      	ldr	r2, [pc, #236]	; (80033f8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d012      	beq.n	8003334 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a3a      	ldr	r2, [pc, #232]	; (80033fc <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d00a      	beq.n	800332e <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a38      	ldr	r2, [pc, #224]	; (8003400 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d102      	bne.n	8003328 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003322:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003326:	e01a      	b.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003328:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800332c:	e017      	b.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800332e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003332:	e014      	b.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003334:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003338:	e011      	b.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800333a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800333e:	e00e      	b.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003340:	2340      	movs	r3, #64	; 0x40
 8003342:	e00c      	b.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003344:	2340      	movs	r3, #64	; 0x40
 8003346:	e00a      	b.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003348:	2340      	movs	r3, #64	; 0x40
 800334a:	e008      	b.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800334c:	2340      	movs	r3, #64	; 0x40
 800334e:	e006      	b.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003350:	2301      	movs	r3, #1
 8003352:	e004      	b.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003354:	2301      	movs	r3, #1
 8003356:	e002      	b.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003358:	2301      	movs	r3, #1
 800335a:	e000      	b.n	800335e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800335c:	2301      	movs	r3, #1
 800335e:	4a29      	ldr	r2, [pc, #164]	; (8003404 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8003360:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f042 0216 	orr.w	r2, r2, #22
 8003370:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	695a      	ldr	r2, [r3, #20]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003380:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	2b00      	cmp	r3, #0
 8003388:	d103      	bne.n	8003392 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800338e:	2b00      	cmp	r3, #0
 8003390:	d007      	beq.n	80033a2 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	681a      	ldr	r2, [r3, #0]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f042 0208 	orr.w	r2, r2, #8
 80033a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0201 	orr.w	r2, r2, #1
 80033b0:	601a      	str	r2, [r3, #0]
 80033b2:	e005      	b.n	80033c0 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033bc:	2302      	movs	r3, #2
 80033be:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 80033c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	40026400 	.word	0x40026400
 80033d0:	40026058 	.word	0x40026058
 80033d4:	40026010 	.word	0x40026010
 80033d8:	40026410 	.word	0x40026410
 80033dc:	40026070 	.word	0x40026070
 80033e0:	40026470 	.word	0x40026470
 80033e4:	40026028 	.word	0x40026028
 80033e8:	40026428 	.word	0x40026428
 80033ec:	40026088 	.word	0x40026088
 80033f0:	40026488 	.word	0x40026488
 80033f4:	40026040 	.word	0x40026040
 80033f8:	40026440 	.word	0x40026440
 80033fc:	400260a0 	.word	0x400260a0
 8003400:	400264a0 	.word	0x400264a0
 8003404:	40026000 	.word	0x40026000

08003408 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003408:	b480      	push	{r7}
 800340a:	b085      	sub	sp, #20
 800340c:	af00      	add	r7, sp, #0
 800340e:	60f8      	str	r0, [r7, #12]
 8003410:	60b9      	str	r1, [r7, #8]
 8003412:	4613      	mov	r3, r2
 8003414:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003416:	79fb      	ldrb	r3, [r7, #7]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d104      	bne.n	8003426 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	68ba      	ldr	r2, [r7, #8]
 8003422:	60da      	str	r2, [r3, #12]
 8003424:	e003      	b.n	800342e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	68ba      	ldr	r2, [r7, #8]
 800342c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800342e:	2300      	movs	r3, #0
}
 8003430:	4618      	mov	r0, r3
 8003432:	3714      	adds	r7, #20
 8003434:	46bd      	mov	sp, r7
 8003436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343a:	4770      	bx	lr

0800343c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
 8003448:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	d108      	bne.n	800346c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	687a      	ldr	r2, [r7, #4]
 8003460:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68ba      	ldr	r2, [r7, #8]
 8003468:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800346a:	e007      	b.n	800347c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	68ba      	ldr	r2, [r7, #8]
 8003472:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	60da      	str	r2, [r3, #12]
}
 800347c:	bf00      	nop
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr

08003488 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003488:	b480      	push	{r7}
 800348a:	b089      	sub	sp, #36	; 0x24
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
 8003490:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003492:	2300      	movs	r3, #0
 8003494:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800349a:	2300      	movs	r3, #0
 800349c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800349e:	2300      	movs	r3, #0
 80034a0:	61fb      	str	r3, [r7, #28]
 80034a2:	e16b      	b.n	800377c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034a4:	2201      	movs	r2, #1
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	697a      	ldr	r2, [r7, #20]
 80034b4:	4013      	ands	r3, r2
 80034b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034b8:	693a      	ldr	r2, [r7, #16]
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	429a      	cmp	r2, r3
 80034be:	f040 815a 	bne.w	8003776 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f003 0303 	and.w	r3, r3, #3
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d005      	beq.n	80034da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d130      	bne.n	800353c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	2203      	movs	r2, #3
 80034e6:	fa02 f303 	lsl.w	r3, r2, r3
 80034ea:	43db      	mvns	r3, r3
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	4013      	ands	r3, r2
 80034f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68da      	ldr	r2, [r3, #12]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	005b      	lsls	r3, r3, #1
 80034fa:	fa02 f303 	lsl.w	r3, r2, r3
 80034fe:	69ba      	ldr	r2, [r7, #24]
 8003500:	4313      	orrs	r3, r2
 8003502:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003510:	2201      	movs	r2, #1
 8003512:	69fb      	ldr	r3, [r7, #28]
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	091b      	lsrs	r3, r3, #4
 8003526:	f003 0201 	and.w	r2, r3, #1
 800352a:	69fb      	ldr	r3, [r7, #28]
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	f003 0303 	and.w	r3, r3, #3
 8003544:	2b03      	cmp	r3, #3
 8003546:	d017      	beq.n	8003578 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	005b      	lsls	r3, r3, #1
 8003552:	2203      	movs	r2, #3
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f003 0303 	and.w	r3, r3, #3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d123      	bne.n	80035cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003584:	69fb      	ldr	r3, [r7, #28]
 8003586:	08da      	lsrs	r2, r3, #3
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3208      	adds	r2, #8
 800358c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003590:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	f003 0307 	and.w	r3, r3, #7
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	220f      	movs	r2, #15
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	691a      	ldr	r2, [r3, #16]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	f003 0307 	and.w	r3, r3, #7
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	fa02 f303 	lsl.w	r3, r2, r3
 80035b8:	69ba      	ldr	r2, [r7, #24]
 80035ba:	4313      	orrs	r3, r2
 80035bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035be:	69fb      	ldr	r3, [r7, #28]
 80035c0:	08da      	lsrs	r2, r3, #3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	3208      	adds	r2, #8
 80035c6:	69b9      	ldr	r1, [r7, #24]
 80035c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	005b      	lsls	r3, r3, #1
 80035d6:	2203      	movs	r2, #3
 80035d8:	fa02 f303 	lsl.w	r3, r2, r3
 80035dc:	43db      	mvns	r3, r3
 80035de:	69ba      	ldr	r2, [r7, #24]
 80035e0:	4013      	ands	r3, r2
 80035e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f003 0203 	and.w	r2, r3, #3
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	005b      	lsls	r3, r3, #1
 80035f0:	fa02 f303 	lsl.w	r3, r2, r3
 80035f4:	69ba      	ldr	r2, [r7, #24]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	685b      	ldr	r3, [r3, #4]
 8003604:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003608:	2b00      	cmp	r3, #0
 800360a:	f000 80b4 	beq.w	8003776 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800360e:	2300      	movs	r3, #0
 8003610:	60fb      	str	r3, [r7, #12]
 8003612:	4b60      	ldr	r3, [pc, #384]	; (8003794 <HAL_GPIO_Init+0x30c>)
 8003614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003616:	4a5f      	ldr	r2, [pc, #380]	; (8003794 <HAL_GPIO_Init+0x30c>)
 8003618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800361c:	6453      	str	r3, [r2, #68]	; 0x44
 800361e:	4b5d      	ldr	r3, [pc, #372]	; (8003794 <HAL_GPIO_Init+0x30c>)
 8003620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003626:	60fb      	str	r3, [r7, #12]
 8003628:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800362a:	4a5b      	ldr	r2, [pc, #364]	; (8003798 <HAL_GPIO_Init+0x310>)
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	089b      	lsrs	r3, r3, #2
 8003630:	3302      	adds	r3, #2
 8003632:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003638:	69fb      	ldr	r3, [r7, #28]
 800363a:	f003 0303 	and.w	r3, r3, #3
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	220f      	movs	r2, #15
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43db      	mvns	r3, r3
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	4013      	ands	r3, r2
 800364c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a52      	ldr	r2, [pc, #328]	; (800379c <HAL_GPIO_Init+0x314>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d02b      	beq.n	80036ae <HAL_GPIO_Init+0x226>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a51      	ldr	r2, [pc, #324]	; (80037a0 <HAL_GPIO_Init+0x318>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d025      	beq.n	80036aa <HAL_GPIO_Init+0x222>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a50      	ldr	r2, [pc, #320]	; (80037a4 <HAL_GPIO_Init+0x31c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d01f      	beq.n	80036a6 <HAL_GPIO_Init+0x21e>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4a4f      	ldr	r2, [pc, #316]	; (80037a8 <HAL_GPIO_Init+0x320>)
 800366a:	4293      	cmp	r3, r2
 800366c:	d019      	beq.n	80036a2 <HAL_GPIO_Init+0x21a>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	4a4e      	ldr	r2, [pc, #312]	; (80037ac <HAL_GPIO_Init+0x324>)
 8003672:	4293      	cmp	r3, r2
 8003674:	d013      	beq.n	800369e <HAL_GPIO_Init+0x216>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a4d      	ldr	r2, [pc, #308]	; (80037b0 <HAL_GPIO_Init+0x328>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00d      	beq.n	800369a <HAL_GPIO_Init+0x212>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a4c      	ldr	r2, [pc, #304]	; (80037b4 <HAL_GPIO_Init+0x32c>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d007      	beq.n	8003696 <HAL_GPIO_Init+0x20e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a4b      	ldr	r2, [pc, #300]	; (80037b8 <HAL_GPIO_Init+0x330>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d101      	bne.n	8003692 <HAL_GPIO_Init+0x20a>
 800368e:	2307      	movs	r3, #7
 8003690:	e00e      	b.n	80036b0 <HAL_GPIO_Init+0x228>
 8003692:	2308      	movs	r3, #8
 8003694:	e00c      	b.n	80036b0 <HAL_GPIO_Init+0x228>
 8003696:	2306      	movs	r3, #6
 8003698:	e00a      	b.n	80036b0 <HAL_GPIO_Init+0x228>
 800369a:	2305      	movs	r3, #5
 800369c:	e008      	b.n	80036b0 <HAL_GPIO_Init+0x228>
 800369e:	2304      	movs	r3, #4
 80036a0:	e006      	b.n	80036b0 <HAL_GPIO_Init+0x228>
 80036a2:	2303      	movs	r3, #3
 80036a4:	e004      	b.n	80036b0 <HAL_GPIO_Init+0x228>
 80036a6:	2302      	movs	r3, #2
 80036a8:	e002      	b.n	80036b0 <HAL_GPIO_Init+0x228>
 80036aa:	2301      	movs	r3, #1
 80036ac:	e000      	b.n	80036b0 <HAL_GPIO_Init+0x228>
 80036ae:	2300      	movs	r3, #0
 80036b0:	69fa      	ldr	r2, [r7, #28]
 80036b2:	f002 0203 	and.w	r2, r2, #3
 80036b6:	0092      	lsls	r2, r2, #2
 80036b8:	4093      	lsls	r3, r2
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4313      	orrs	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036c0:	4935      	ldr	r1, [pc, #212]	; (8003798 <HAL_GPIO_Init+0x310>)
 80036c2:	69fb      	ldr	r3, [r7, #28]
 80036c4:	089b      	lsrs	r3, r3, #2
 80036c6:	3302      	adds	r3, #2
 80036c8:	69ba      	ldr	r2, [r7, #24]
 80036ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036ce:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_GPIO_Init+0x334>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	43db      	mvns	r3, r3
 80036d8:	69ba      	ldr	r2, [r7, #24]
 80036da:	4013      	ands	r3, r2
 80036dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	685b      	ldr	r3, [r3, #4]
 80036e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d003      	beq.n	80036f2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80036ea:	69ba      	ldr	r2, [r7, #24]
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036f2:	4a32      	ldr	r2, [pc, #200]	; (80037bc <HAL_GPIO_Init+0x334>)
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80036f8:	4b30      	ldr	r3, [pc, #192]	; (80037bc <HAL_GPIO_Init+0x334>)
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	43db      	mvns	r3, r3
 8003702:	69ba      	ldr	r2, [r7, #24]
 8003704:	4013      	ands	r3, r2
 8003706:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003710:	2b00      	cmp	r3, #0
 8003712:	d003      	beq.n	800371c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003714:	69ba      	ldr	r2, [r7, #24]
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	4313      	orrs	r3, r2
 800371a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800371c:	4a27      	ldr	r2, [pc, #156]	; (80037bc <HAL_GPIO_Init+0x334>)
 800371e:	69bb      	ldr	r3, [r7, #24]
 8003720:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003722:	4b26      	ldr	r3, [pc, #152]	; (80037bc <HAL_GPIO_Init+0x334>)
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	43db      	mvns	r3, r3
 800372c:	69ba      	ldr	r2, [r7, #24]
 800372e:	4013      	ands	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800373a:	2b00      	cmp	r3, #0
 800373c:	d003      	beq.n	8003746 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800373e:	69ba      	ldr	r2, [r7, #24]
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4313      	orrs	r3, r2
 8003744:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003746:	4a1d      	ldr	r2, [pc, #116]	; (80037bc <HAL_GPIO_Init+0x334>)
 8003748:	69bb      	ldr	r3, [r7, #24]
 800374a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800374c:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <HAL_GPIO_Init+0x334>)
 800374e:	68db      	ldr	r3, [r3, #12]
 8003750:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	43db      	mvns	r3, r3
 8003756:	69ba      	ldr	r2, [r7, #24]
 8003758:	4013      	ands	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d003      	beq.n	8003770 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	4313      	orrs	r3, r2
 800376e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003770:	4a12      	ldr	r2, [pc, #72]	; (80037bc <HAL_GPIO_Init+0x334>)
 8003772:	69bb      	ldr	r3, [r7, #24]
 8003774:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	3301      	adds	r3, #1
 800377a:	61fb      	str	r3, [r7, #28]
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	2b0f      	cmp	r3, #15
 8003780:	f67f ae90 	bls.w	80034a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003784:	bf00      	nop
 8003786:	bf00      	nop
 8003788:	3724      	adds	r7, #36	; 0x24
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40023800 	.word	0x40023800
 8003798:	40013800 	.word	0x40013800
 800379c:	40020000 	.word	0x40020000
 80037a0:	40020400 	.word	0x40020400
 80037a4:	40020800 	.word	0x40020800
 80037a8:	40020c00 	.word	0x40020c00
 80037ac:	40021000 	.word	0x40021000
 80037b0:	40021400 	.word	0x40021400
 80037b4:	40021800 	.word	0x40021800
 80037b8:	40021c00 	.word	0x40021c00
 80037bc:	40013c00 	.word	0x40013c00

080037c0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b085      	sub	sp, #20
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	460b      	mov	r3, r1
 80037ca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	691a      	ldr	r2, [r3, #16]
 80037d0:	887b      	ldrh	r3, [r7, #2]
 80037d2:	4013      	ands	r3, r2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80037d8:	2301      	movs	r3, #1
 80037da:	73fb      	strb	r3, [r7, #15]
 80037dc:	e001      	b.n	80037e2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80037de:	2300      	movs	r3, #0
 80037e0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80037e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e4:	4618      	mov	r0, r3
 80037e6:	3714      	adds	r7, #20
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr

080037f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	460b      	mov	r3, r1
 80037fa:	807b      	strh	r3, [r7, #2]
 80037fc:	4613      	mov	r3, r2
 80037fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003800:	787b      	ldrb	r3, [r7, #1]
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003806:	887a      	ldrh	r2, [r7, #2]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800380c:	e003      	b.n	8003816 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800380e:	887b      	ldrh	r3, [r7, #2]
 8003810:	041a      	lsls	r2, r3, #16
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	619a      	str	r2, [r3, #24]
}
 8003816:	bf00      	nop
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
	...

08003824 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d101      	bne.n	8003836 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e12b      	b.n	8003a8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b00      	cmp	r3, #0
 8003840:	d106      	bne.n	8003850 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800384a:	6878      	ldr	r0, [r7, #4]
 800384c:	f7fd fa6c 	bl	8000d28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	2224      	movs	r2, #36	; 0x24
 8003854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f022 0201 	bic.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003876:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003886:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003888:	f001 fbfa 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 800388c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4a81      	ldr	r2, [pc, #516]	; (8003a98 <HAL_I2C_Init+0x274>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d807      	bhi.n	80038a8 <HAL_I2C_Init+0x84>
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	4a80      	ldr	r2, [pc, #512]	; (8003a9c <HAL_I2C_Init+0x278>)
 800389c:	4293      	cmp	r3, r2
 800389e:	bf94      	ite	ls
 80038a0:	2301      	movls	r3, #1
 80038a2:	2300      	movhi	r3, #0
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	e006      	b.n	80038b6 <HAL_I2C_Init+0x92>
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4a7d      	ldr	r2, [pc, #500]	; (8003aa0 <HAL_I2C_Init+0x27c>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	bf94      	ite	ls
 80038b0:	2301      	movls	r3, #1
 80038b2:	2300      	movhi	r3, #0
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d001      	beq.n	80038be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e0e7      	b.n	8003a8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	4a78      	ldr	r2, [pc, #480]	; (8003aa4 <HAL_I2C_Init+0x280>)
 80038c2:	fba2 2303 	umull	r2, r3, r2, r3
 80038c6:	0c9b      	lsrs	r3, r3, #18
 80038c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	68ba      	ldr	r2, [r7, #8]
 80038da:	430a      	orrs	r2, r1
 80038dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	6a1b      	ldr	r3, [r3, #32]
 80038e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	4a6a      	ldr	r2, [pc, #424]	; (8003a98 <HAL_I2C_Init+0x274>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d802      	bhi.n	80038f8 <HAL_I2C_Init+0xd4>
 80038f2:	68bb      	ldr	r3, [r7, #8]
 80038f4:	3301      	adds	r3, #1
 80038f6:	e009      	b.n	800390c <HAL_I2C_Init+0xe8>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80038fe:	fb02 f303 	mul.w	r3, r2, r3
 8003902:	4a69      	ldr	r2, [pc, #420]	; (8003aa8 <HAL_I2C_Init+0x284>)
 8003904:	fba2 2303 	umull	r2, r3, r2, r3
 8003908:	099b      	lsrs	r3, r3, #6
 800390a:	3301      	adds	r3, #1
 800390c:	687a      	ldr	r2, [r7, #4]
 800390e:	6812      	ldr	r2, [r2, #0]
 8003910:	430b      	orrs	r3, r1
 8003912:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	69db      	ldr	r3, [r3, #28]
 800391a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800391e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	495c      	ldr	r1, [pc, #368]	; (8003a98 <HAL_I2C_Init+0x274>)
 8003928:	428b      	cmp	r3, r1
 800392a:	d819      	bhi.n	8003960 <HAL_I2C_Init+0x13c>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	1e59      	subs	r1, r3, #1
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	fbb1 f3f3 	udiv	r3, r1, r3
 800393a:	1c59      	adds	r1, r3, #1
 800393c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003940:	400b      	ands	r3, r1
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00a      	beq.n	800395c <HAL_I2C_Init+0x138>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1e59      	subs	r1, r3, #1
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	005b      	lsls	r3, r3, #1
 8003950:	fbb1 f3f3 	udiv	r3, r1, r3
 8003954:	3301      	adds	r3, #1
 8003956:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800395a:	e051      	b.n	8003a00 <HAL_I2C_Init+0x1dc>
 800395c:	2304      	movs	r3, #4
 800395e:	e04f      	b.n	8003a00 <HAL_I2C_Init+0x1dc>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	2b00      	cmp	r3, #0
 8003966:	d111      	bne.n	800398c <HAL_I2C_Init+0x168>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1e58      	subs	r0, r3, #1
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6859      	ldr	r1, [r3, #4]
 8003970:	460b      	mov	r3, r1
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	440b      	add	r3, r1
 8003976:	fbb0 f3f3 	udiv	r3, r0, r3
 800397a:	3301      	adds	r3, #1
 800397c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003980:	2b00      	cmp	r3, #0
 8003982:	bf0c      	ite	eq
 8003984:	2301      	moveq	r3, #1
 8003986:	2300      	movne	r3, #0
 8003988:	b2db      	uxtb	r3, r3
 800398a:	e012      	b.n	80039b2 <HAL_I2C_Init+0x18e>
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	1e58      	subs	r0, r3, #1
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6859      	ldr	r1, [r3, #4]
 8003994:	460b      	mov	r3, r1
 8003996:	009b      	lsls	r3, r3, #2
 8003998:	440b      	add	r3, r1
 800399a:	0099      	lsls	r1, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	fbb0 f3f3 	udiv	r3, r0, r3
 80039a2:	3301      	adds	r3, #1
 80039a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	bf0c      	ite	eq
 80039ac:	2301      	moveq	r3, #1
 80039ae:	2300      	movne	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_I2C_Init+0x196>
 80039b6:	2301      	movs	r3, #1
 80039b8:	e022      	b.n	8003a00 <HAL_I2C_Init+0x1dc>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10e      	bne.n	80039e0 <HAL_I2C_Init+0x1bc>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1e58      	subs	r0, r3, #1
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6859      	ldr	r1, [r3, #4]
 80039ca:	460b      	mov	r3, r1
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	440b      	add	r3, r1
 80039d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80039d4:	3301      	adds	r3, #1
 80039d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80039de:	e00f      	b.n	8003a00 <HAL_I2C_Init+0x1dc>
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	1e58      	subs	r0, r3, #1
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6859      	ldr	r1, [r3, #4]
 80039e8:	460b      	mov	r3, r1
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	0099      	lsls	r1, r3, #2
 80039f0:	440b      	add	r3, r1
 80039f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80039f6:	3301      	adds	r3, #1
 80039f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a00:	6879      	ldr	r1, [r7, #4]
 8003a02:	6809      	ldr	r1, [r1, #0]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	69da      	ldr	r2, [r3, #28]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a1b      	ldr	r3, [r3, #32]
 8003a1a:	431a      	orrs	r2, r3
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	430a      	orrs	r2, r1
 8003a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a32:	687a      	ldr	r2, [r7, #4]
 8003a34:	6911      	ldr	r1, [r2, #16]
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	68d2      	ldr	r2, [r2, #12]
 8003a3a:	4311      	orrs	r1, r2
 8003a3c:	687a      	ldr	r2, [r7, #4]
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	430b      	orrs	r3, r1
 8003a42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68db      	ldr	r3, [r3, #12]
 8003a4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695a      	ldr	r2, [r3, #20]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	431a      	orrs	r2, r3
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	430a      	orrs	r2, r1
 8003a5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2200      	movs	r2, #0
 8003a74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2220      	movs	r2, #32
 8003a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	2200      	movs	r2, #0
 8003a82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2200      	movs	r2, #0
 8003a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a8c:	2300      	movs	r3, #0
}
 8003a8e:	4618      	mov	r0, r3
 8003a90:	3710      	adds	r7, #16
 8003a92:	46bd      	mov	sp, r7
 8003a94:	bd80      	pop	{r7, pc}
 8003a96:	bf00      	nop
 8003a98:	000186a0 	.word	0x000186a0
 8003a9c:	001e847f 	.word	0x001e847f
 8003aa0:	003d08ff 	.word	0x003d08ff
 8003aa4:	431bde83 	.word	0x431bde83
 8003aa8:	10624dd3 	.word	0x10624dd3

08003aac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b088      	sub	sp, #32
 8003ab0:	af02      	add	r7, sp, #8
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	607a      	str	r2, [r7, #4]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	460b      	mov	r3, r1
 8003aba:	817b      	strh	r3, [r7, #10]
 8003abc:	4613      	mov	r3, r2
 8003abe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ac0:	f7fd fb06 	bl	80010d0 <HAL_GetTick>
 8003ac4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b20      	cmp	r3, #32
 8003ad0:	f040 80e0 	bne.w	8003c94 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	9300      	str	r3, [sp, #0]
 8003ad8:	2319      	movs	r3, #25
 8003ada:	2201      	movs	r2, #1
 8003adc:	4970      	ldr	r1, [pc, #448]	; (8003ca0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ade:	68f8      	ldr	r0, [r7, #12]
 8003ae0:	f000 fc58 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d001      	beq.n	8003aee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003aea:	2302      	movs	r3, #2
 8003aec:	e0d3      	b.n	8003c96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d101      	bne.n	8003afc <HAL_I2C_Master_Transmit+0x50>
 8003af8:	2302      	movs	r3, #2
 8003afa:	e0cc      	b.n	8003c96 <HAL_I2C_Master_Transmit+0x1ea>
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d007      	beq.n	8003b22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f042 0201 	orr.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2221      	movs	r2, #33	; 0x21
 8003b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	2210      	movs	r2, #16
 8003b3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2200      	movs	r2, #0
 8003b46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	687a      	ldr	r2, [r7, #4]
 8003b4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	893a      	ldrh	r2, [r7, #8]
 8003b52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b58:	b29a      	uxth	r2, r3
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4a50      	ldr	r2, [pc, #320]	; (8003ca4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003b62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b64:	8979      	ldrh	r1, [r7, #10]
 8003b66:	697b      	ldr	r3, [r7, #20]
 8003b68:	6a3a      	ldr	r2, [r7, #32]
 8003b6a:	68f8      	ldr	r0, [r7, #12]
 8003b6c:	f000 fac2 	bl	80040f4 <I2C_MasterRequestWrite>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d001      	beq.n	8003b7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b76:	2301      	movs	r3, #1
 8003b78:	e08d      	b.n	8003c96 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	613b      	str	r3, [r7, #16]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	613b      	str	r3, [r7, #16]
 8003b8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b90:	e066      	b.n	8003c60 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b92:	697a      	ldr	r2, [r7, #20]
 8003b94:	6a39      	ldr	r1, [r7, #32]
 8003b96:	68f8      	ldr	r0, [r7, #12]
 8003b98:	f000 fcd2 	bl	8004540 <I2C_WaitOnTXEFlagUntilTimeout>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d00d      	beq.n	8003bbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba6:	2b04      	cmp	r3, #4
 8003ba8:	d107      	bne.n	8003bba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e06b      	b.n	8003c96 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bc2:	781a      	ldrb	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bce:	1c5a      	adds	r2, r3, #1
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd8:	b29b      	uxth	r3, r3
 8003bda:	3b01      	subs	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003be6:	3b01      	subs	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	695b      	ldr	r3, [r3, #20]
 8003bf4:	f003 0304 	and.w	r3, r3, #4
 8003bf8:	2b04      	cmp	r3, #4
 8003bfa:	d11b      	bne.n	8003c34 <HAL_I2C_Master_Transmit+0x188>
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d017      	beq.n	8003c34 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c08:	781a      	ldrb	r2, [r3, #0]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	3b01      	subs	r3, #1
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c2c:	3b01      	subs	r3, #1
 8003c2e:	b29a      	uxth	r2, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	6a39      	ldr	r1, [r7, #32]
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fcc2 	bl	80045c2 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d00d      	beq.n	8003c60 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c48:	2b04      	cmp	r3, #4
 8003c4a:	d107      	bne.n	8003c5c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c5a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c5c:	2301      	movs	r3, #1
 8003c5e:	e01a      	b.n	8003c96 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d194      	bne.n	8003b92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2220      	movs	r2, #32
 8003c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2200      	movs	r2, #0
 8003c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c90:	2300      	movs	r3, #0
 8003c92:	e000      	b.n	8003c96 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c94:	2302      	movs	r3, #2
  }
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	00100002 	.word	0x00100002
 8003ca4:	ffff0000 	.word	0xffff0000

08003ca8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b08c      	sub	sp, #48	; 0x30
 8003cac:	af02      	add	r7, sp, #8
 8003cae:	60f8      	str	r0, [r7, #12]
 8003cb0:	607a      	str	r2, [r7, #4]
 8003cb2:	461a      	mov	r2, r3
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	817b      	strh	r3, [r7, #10]
 8003cb8:	4613      	mov	r3, r2
 8003cba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cbc:	f7fd fa08 	bl	80010d0 <HAL_GetTick>
 8003cc0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	2b20      	cmp	r3, #32
 8003ccc:	f040 820b 	bne.w	80040e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd2:	9300      	str	r3, [sp, #0]
 8003cd4:	2319      	movs	r3, #25
 8003cd6:	2201      	movs	r2, #1
 8003cd8:	497c      	ldr	r1, [pc, #496]	; (8003ecc <HAL_I2C_Master_Receive+0x224>)
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fb5a 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d001      	beq.n	8003cea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003ce6:	2302      	movs	r3, #2
 8003ce8:	e1fe      	b.n	80040e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d101      	bne.n	8003cf8 <HAL_I2C_Master_Receive+0x50>
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	e1f7      	b.n	80040e8 <HAL_I2C_Master_Receive+0x440>
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d007      	beq.n	8003d1e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0201 	orr.w	r2, r2, #1
 8003d1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d2c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	2222      	movs	r2, #34	; 0x22
 8003d32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	2210      	movs	r2, #16
 8003d3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	2200      	movs	r2, #0
 8003d42:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	687a      	ldr	r2, [r7, #4]
 8003d48:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	893a      	ldrh	r2, [r7, #8]
 8003d4e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d54:	b29a      	uxth	r2, r3
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	4a5c      	ldr	r2, [pc, #368]	; (8003ed0 <HAL_I2C_Master_Receive+0x228>)
 8003d5e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d60:	8979      	ldrh	r1, [r7, #10]
 8003d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fa46 	bl	80041f8 <I2C_MasterRequestRead>
 8003d6c:	4603      	mov	r3, r0
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d001      	beq.n	8003d76 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e1b8      	b.n	80040e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d113      	bne.n	8003da6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d7e:	2300      	movs	r3, #0
 8003d80:	623b      	str	r3, [r7, #32]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	695b      	ldr	r3, [r3, #20]
 8003d88:	623b      	str	r3, [r7, #32]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	699b      	ldr	r3, [r3, #24]
 8003d90:	623b      	str	r3, [r7, #32]
 8003d92:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003da2:	601a      	str	r2, [r3, #0]
 8003da4:	e18c      	b.n	80040c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003daa:	2b01      	cmp	r3, #1
 8003dac:	d11b      	bne.n	8003de6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	61fb      	str	r3, [r7, #28]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	61fb      	str	r3, [r7, #28]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	61fb      	str	r3, [r7, #28]
 8003dd2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e16c      	b.n	80040c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	2b02      	cmp	r3, #2
 8003dec:	d11b      	bne.n	8003e26 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e0c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e0e:	2300      	movs	r3, #0
 8003e10:	61bb      	str	r3, [r7, #24]
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	695b      	ldr	r3, [r3, #20]
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	61bb      	str	r3, [r7, #24]
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	e14c      	b.n	80040c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e34:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e36:	2300      	movs	r3, #0
 8003e38:	617b      	str	r3, [r7, #20]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	695b      	ldr	r3, [r3, #20]
 8003e40:	617b      	str	r3, [r7, #20]
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e4c:	e138      	b.n	80040c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	2b03      	cmp	r3, #3
 8003e54:	f200 80f1 	bhi.w	800403a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e5c:	2b01      	cmp	r3, #1
 8003e5e:	d123      	bne.n	8003ea8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	f000 fbed 	bl	8004644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e139      	b.n	80040e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	691a      	ldr	r2, [r3, #16]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e7e:	b2d2      	uxtb	r2, r2
 8003e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e86:	1c5a      	adds	r2, r3, #1
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e90:	3b01      	subs	r3, #1
 8003e92:	b29a      	uxth	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e9c:	b29b      	uxth	r3, r3
 8003e9e:	3b01      	subs	r3, #1
 8003ea0:	b29a      	uxth	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ea6:	e10b      	b.n	80040c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	d14e      	bne.n	8003f4e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb2:	9300      	str	r3, [sp, #0]
 8003eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	4906      	ldr	r1, [pc, #24]	; (8003ed4 <HAL_I2C_Master_Receive+0x22c>)
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fa6a 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e10e      	b.n	80040e8 <HAL_I2C_Master_Receive+0x440>
 8003eca:	bf00      	nop
 8003ecc:	00100002 	.word	0x00100002
 8003ed0:	ffff0000 	.word	0xffff0000
 8003ed4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ee6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	691a      	ldr	r2, [r3, #16]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	b2d2      	uxtb	r2, r2
 8003ef4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	1c5a      	adds	r2, r3, #1
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f10:	b29b      	uxth	r3, r3
 8003f12:	3b01      	subs	r3, #1
 8003f14:	b29a      	uxth	r2, r3
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	691a      	ldr	r2, [r3, #16]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	b2d2      	uxtb	r2, r2
 8003f26:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	1c5a      	adds	r2, r3, #1
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f36:	3b01      	subs	r3, #1
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f4c:	e0b8      	b.n	80040c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	2200      	movs	r2, #0
 8003f56:	4966      	ldr	r1, [pc, #408]	; (80040f0 <HAL_I2C_Master_Receive+0x448>)
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 fa1b 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d001      	beq.n	8003f68 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0bf      	b.n	80040e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f76:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	691a      	ldr	r2, [r3, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	b2d2      	uxtb	r2, r2
 8003f84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f8a:	1c5a      	adds	r2, r3, #1
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f94:	3b01      	subs	r3, #1
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fa0:	b29b      	uxth	r3, r3
 8003fa2:	3b01      	subs	r3, #1
 8003fa4:	b29a      	uxth	r2, r3
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fac:	9300      	str	r3, [sp, #0]
 8003fae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	494f      	ldr	r1, [pc, #316]	; (80040f0 <HAL_I2C_Master_Receive+0x448>)
 8003fb4:	68f8      	ldr	r0, [r7, #12]
 8003fb6:	f000 f9ed 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d001      	beq.n	8003fc4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e091      	b.n	80040e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fd2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691a      	ldr	r2, [r3, #16]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fde:	b2d2      	uxtb	r2, r2
 8003fe0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ff0:	3b01      	subs	r3, #1
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	3b01      	subs	r3, #1
 8004000:	b29a      	uxth	r2, r3
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	691a      	ldr	r2, [r3, #16]
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004010:	b2d2      	uxtb	r2, r2
 8004012:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004018:	1c5a      	adds	r2, r3, #1
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800402e:	b29b      	uxth	r3, r3
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004038:	e042      	b.n	80040c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800403a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800403c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800403e:	68f8      	ldr	r0, [r7, #12]
 8004040:	f000 fb00 	bl	8004644 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d001      	beq.n	800404e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e04c      	b.n	80040e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	b2d2      	uxtb	r2, r2
 800405a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004060:	1c5a      	adds	r2, r3, #1
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800406a:	3b01      	subs	r3, #1
 800406c:	b29a      	uxth	r2, r3
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	3b01      	subs	r3, #1
 800407a:	b29a      	uxth	r2, r3
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	695b      	ldr	r3, [r3, #20]
 8004086:	f003 0304 	and.w	r3, r3, #4
 800408a:	2b04      	cmp	r3, #4
 800408c:	d118      	bne.n	80040c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f47f aec2 	bne.w	8003e4e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e000      	b.n	80040e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80040e6:	2302      	movs	r3, #2
  }
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3728      	adds	r7, #40	; 0x28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	00010004 	.word	0x00010004

080040f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	607a      	str	r2, [r7, #4]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	460b      	mov	r3, r1
 8004102:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	2b08      	cmp	r3, #8
 800410e:	d006      	beq.n	800411e <I2C_MasterRequestWrite+0x2a>
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	2b01      	cmp	r3, #1
 8004114:	d003      	beq.n	800411e <I2C_MasterRequestWrite+0x2a>
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800411c:	d108      	bne.n	8004130 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800412c:	601a      	str	r2, [r3, #0]
 800412e:	e00b      	b.n	8004148 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	2b12      	cmp	r3, #18
 8004136:	d107      	bne.n	8004148 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	681a      	ldr	r2, [r3, #0]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004146:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	9300      	str	r3, [sp, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2200      	movs	r2, #0
 8004150:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004154:	68f8      	ldr	r0, [r7, #12]
 8004156:	f000 f91d 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 800415a:	4603      	mov	r3, r0
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00d      	beq.n	800417c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800416a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800416e:	d103      	bne.n	8004178 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004176:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004178:	2303      	movs	r3, #3
 800417a:	e035      	b.n	80041e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	691b      	ldr	r3, [r3, #16]
 8004180:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004184:	d108      	bne.n	8004198 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004186:	897b      	ldrh	r3, [r7, #10]
 8004188:	b2db      	uxtb	r3, r3
 800418a:	461a      	mov	r2, r3
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004194:	611a      	str	r2, [r3, #16]
 8004196:	e01b      	b.n	80041d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004198:	897b      	ldrh	r3, [r7, #10]
 800419a:	11db      	asrs	r3, r3, #7
 800419c:	b2db      	uxtb	r3, r3
 800419e:	f003 0306 	and.w	r3, r3, #6
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	f063 030f 	orn	r3, r3, #15
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	687a      	ldr	r2, [r7, #4]
 80041b4:	490e      	ldr	r1, [pc, #56]	; (80041f0 <I2C_MasterRequestWrite+0xfc>)
 80041b6:	68f8      	ldr	r0, [r7, #12]
 80041b8:	f000 f943 	bl	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d001      	beq.n	80041c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80041c2:	2301      	movs	r3, #1
 80041c4:	e010      	b.n	80041e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80041c6:	897b      	ldrh	r3, [r7, #10]
 80041c8:	b2da      	uxtb	r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	687a      	ldr	r2, [r7, #4]
 80041d4:	4907      	ldr	r1, [pc, #28]	; (80041f4 <I2C_MasterRequestWrite+0x100>)
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 f933 	bl	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d001      	beq.n	80041e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e000      	b.n	80041e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80041e6:	2300      	movs	r3, #0
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3718      	adds	r7, #24
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	00010008 	.word	0x00010008
 80041f4:	00010002 	.word	0x00010002

080041f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b088      	sub	sp, #32
 80041fc:	af02      	add	r7, sp, #8
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	603b      	str	r3, [r7, #0]
 8004204:	460b      	mov	r3, r1
 8004206:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800420c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	681a      	ldr	r2, [r3, #0]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800421c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	2b08      	cmp	r3, #8
 8004222:	d006      	beq.n	8004232 <I2C_MasterRequestRead+0x3a>
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d003      	beq.n	8004232 <I2C_MasterRequestRead+0x3a>
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004230:	d108      	bne.n	8004244 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004240:	601a      	str	r2, [r3, #0]
 8004242:	e00b      	b.n	800425c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	2b11      	cmp	r3, #17
 800424a:	d107      	bne.n	800425c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800425a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	9300      	str	r3, [sp, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004268:	68f8      	ldr	r0, [r7, #12]
 800426a:	f000 f893 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 800426e:	4603      	mov	r3, r0
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00d      	beq.n	8004290 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004282:	d103      	bne.n	800428c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f44f 7200 	mov.w	r2, #512	; 0x200
 800428a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e079      	b.n	8004384 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	691b      	ldr	r3, [r3, #16]
 8004294:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004298:	d108      	bne.n	80042ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800429a:	897b      	ldrh	r3, [r7, #10]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	b2da      	uxtb	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	611a      	str	r2, [r3, #16]
 80042aa:	e05f      	b.n	800436c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042ac:	897b      	ldrh	r3, [r7, #10]
 80042ae:	11db      	asrs	r3, r3, #7
 80042b0:	b2db      	uxtb	r3, r3
 80042b2:	f003 0306 	and.w	r3, r3, #6
 80042b6:	b2db      	uxtb	r3, r3
 80042b8:	f063 030f 	orn	r3, r3, #15
 80042bc:	b2da      	uxtb	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	4930      	ldr	r1, [pc, #192]	; (800438c <I2C_MasterRequestRead+0x194>)
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f8b9 	bl	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d001      	beq.n	80042da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e054      	b.n	8004384 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80042da:	897b      	ldrh	r3, [r7, #10]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	687a      	ldr	r2, [r7, #4]
 80042e8:	4929      	ldr	r1, [pc, #164]	; (8004390 <I2C_MasterRequestRead+0x198>)
 80042ea:	68f8      	ldr	r0, [r7, #12]
 80042ec:	f000 f8a9 	bl	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042f0:	4603      	mov	r3, r0
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d001      	beq.n	80042fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e044      	b.n	8004384 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042fa:	2300      	movs	r3, #0
 80042fc:	613b      	str	r3, [r7, #16]
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	695b      	ldr	r3, [r3, #20]
 8004304:	613b      	str	r3, [r7, #16]
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	613b      	str	r3, [r7, #16]
 800430e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800431e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	9300      	str	r3, [sp, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2200      	movs	r2, #0
 8004328:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800432c:	68f8      	ldr	r0, [r7, #12]
 800432e:	f000 f831 	bl	8004394 <I2C_WaitOnFlagUntilTimeout>
 8004332:	4603      	mov	r3, r0
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00d      	beq.n	8004354 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004346:	d103      	bne.n	8004350 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800434e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004350:	2303      	movs	r3, #3
 8004352:	e017      	b.n	8004384 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004354:	897b      	ldrh	r3, [r7, #10]
 8004356:	11db      	asrs	r3, r3, #7
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f003 0306 	and.w	r3, r3, #6
 800435e:	b2db      	uxtb	r3, r3
 8004360:	f063 030e 	orn	r3, r3, #14
 8004364:	b2da      	uxtb	r2, r3
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	4907      	ldr	r1, [pc, #28]	; (8004390 <I2C_MasterRequestRead+0x198>)
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 f865 	bl	8004442 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e000      	b.n	8004384 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004382:	2300      	movs	r3, #0
}
 8004384:	4618      	mov	r0, r3
 8004386:	3718      	adds	r7, #24
 8004388:	46bd      	mov	sp, r7
 800438a:	bd80      	pop	{r7, pc}
 800438c:	00010008 	.word	0x00010008
 8004390:	00010002 	.word	0x00010002

08004394 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	60f8      	str	r0, [r7, #12]
 800439c:	60b9      	str	r1, [r7, #8]
 800439e:	603b      	str	r3, [r7, #0]
 80043a0:	4613      	mov	r3, r2
 80043a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043a4:	e025      	b.n	80043f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ac:	d021      	beq.n	80043f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ae:	f7fc fe8f 	bl	80010d0 <HAL_GetTick>
 80043b2:	4602      	mov	r2, r0
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	1ad3      	subs	r3, r2, r3
 80043b8:	683a      	ldr	r2, [r7, #0]
 80043ba:	429a      	cmp	r2, r3
 80043bc:	d302      	bcc.n	80043c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d116      	bne.n	80043f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	2200      	movs	r2, #0
 80043c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043de:	f043 0220 	orr.w	r2, r3, #32
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	e023      	b.n	800443a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043f2:	68bb      	ldr	r3, [r7, #8]
 80043f4:	0c1b      	lsrs	r3, r3, #16
 80043f6:	b2db      	uxtb	r3, r3
 80043f8:	2b01      	cmp	r3, #1
 80043fa:	d10d      	bne.n	8004418 <I2C_WaitOnFlagUntilTimeout+0x84>
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	43da      	mvns	r2, r3
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	4013      	ands	r3, r2
 8004408:	b29b      	uxth	r3, r3
 800440a:	2b00      	cmp	r3, #0
 800440c:	bf0c      	ite	eq
 800440e:	2301      	moveq	r3, #1
 8004410:	2300      	movne	r3, #0
 8004412:	b2db      	uxtb	r3, r3
 8004414:	461a      	mov	r2, r3
 8004416:	e00c      	b.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	699b      	ldr	r3, [r3, #24]
 800441e:	43da      	mvns	r2, r3
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	4013      	ands	r3, r2
 8004424:	b29b      	uxth	r3, r3
 8004426:	2b00      	cmp	r3, #0
 8004428:	bf0c      	ite	eq
 800442a:	2301      	moveq	r3, #1
 800442c:	2300      	movne	r3, #0
 800442e:	b2db      	uxtb	r3, r3
 8004430:	461a      	mov	r2, r3
 8004432:	79fb      	ldrb	r3, [r7, #7]
 8004434:	429a      	cmp	r2, r3
 8004436:	d0b6      	beq.n	80043a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}

08004442 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004442:	b580      	push	{r7, lr}
 8004444:	b084      	sub	sp, #16
 8004446:	af00      	add	r7, sp, #0
 8004448:	60f8      	str	r0, [r7, #12]
 800444a:	60b9      	str	r1, [r7, #8]
 800444c:	607a      	str	r2, [r7, #4]
 800444e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004450:	e051      	b.n	80044f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	695b      	ldr	r3, [r3, #20]
 8004458:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800445c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004460:	d123      	bne.n	80044aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004470:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800447a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2220      	movs	r2, #32
 8004486:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004496:	f043 0204 	orr.w	r2, r3, #4
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	e046      	b.n	8004538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044b0:	d021      	beq.n	80044f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044b2:	f7fc fe0d 	bl	80010d0 <HAL_GetTick>
 80044b6:	4602      	mov	r2, r0
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	1ad3      	subs	r3, r2, r3
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	429a      	cmp	r2, r3
 80044c0:	d302      	bcc.n	80044c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d116      	bne.n	80044f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	2200      	movs	r2, #0
 80044cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	2220      	movs	r2, #32
 80044d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	2200      	movs	r2, #0
 80044da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e2:	f043 0220 	orr.w	r2, r3, #32
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e020      	b.n	8004538 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	0c1b      	lsrs	r3, r3, #16
 80044fa:	b2db      	uxtb	r3, r3
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d10c      	bne.n	800451a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	695b      	ldr	r3, [r3, #20]
 8004506:	43da      	mvns	r2, r3
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	4013      	ands	r3, r2
 800450c:	b29b      	uxth	r3, r3
 800450e:	2b00      	cmp	r3, #0
 8004510:	bf14      	ite	ne
 8004512:	2301      	movne	r3, #1
 8004514:	2300      	moveq	r3, #0
 8004516:	b2db      	uxtb	r3, r3
 8004518:	e00b      	b.n	8004532 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	699b      	ldr	r3, [r3, #24]
 8004520:	43da      	mvns	r2, r3
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	4013      	ands	r3, r2
 8004526:	b29b      	uxth	r3, r3
 8004528:	2b00      	cmp	r3, #0
 800452a:	bf14      	ite	ne
 800452c:	2301      	movne	r3, #1
 800452e:	2300      	moveq	r3, #0
 8004530:	b2db      	uxtb	r3, r3
 8004532:	2b00      	cmp	r3, #0
 8004534:	d18d      	bne.n	8004452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004536:	2300      	movs	r3, #0
}
 8004538:	4618      	mov	r0, r3
 800453a:	3710      	adds	r7, #16
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}

08004540 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800454c:	e02d      	b.n	80045aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800454e:	68f8      	ldr	r0, [r7, #12]
 8004550:	f000 f8ce 	bl	80046f0 <I2C_IsAcknowledgeFailed>
 8004554:	4603      	mov	r3, r0
 8004556:	2b00      	cmp	r3, #0
 8004558:	d001      	beq.n	800455e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e02d      	b.n	80045ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d021      	beq.n	80045aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004566:	f7fc fdb3 	bl	80010d0 <HAL_GetTick>
 800456a:	4602      	mov	r2, r0
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	1ad3      	subs	r3, r2, r3
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	429a      	cmp	r2, r3
 8004574:	d302      	bcc.n	800457c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d116      	bne.n	80045aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2200      	movs	r2, #0
 8004580:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2220      	movs	r2, #32
 8004586:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	f043 0220 	orr.w	r2, r3, #32
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	2200      	movs	r2, #0
 80045a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045a6:	2301      	movs	r3, #1
 80045a8:	e007      	b.n	80045ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045b4:	2b80      	cmp	r3, #128	; 0x80
 80045b6:	d1ca      	bne.n	800454e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045b8:	2300      	movs	r3, #0
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b084      	sub	sp, #16
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	60f8      	str	r0, [r7, #12]
 80045ca:	60b9      	str	r1, [r7, #8]
 80045cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80045ce:	e02d      	b.n	800462c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f88d 	bl	80046f0 <I2C_IsAcknowledgeFailed>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e02d      	b.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045e6:	d021      	beq.n	800462c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045e8:	f7fc fd72 	bl	80010d0 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	68ba      	ldr	r2, [r7, #8]
 80045f4:	429a      	cmp	r2, r3
 80045f6:	d302      	bcc.n	80045fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d116      	bne.n	800462c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	2220      	movs	r2, #32
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004618:	f043 0220 	orr.w	r2, r3, #32
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	e007      	b.n	800463c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	695b      	ldr	r3, [r3, #20]
 8004632:	f003 0304 	and.w	r3, r3, #4
 8004636:	2b04      	cmp	r3, #4
 8004638:	d1ca      	bne.n	80045d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800463a:	2300      	movs	r3, #0
}
 800463c:	4618      	mov	r0, r3
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	60f8      	str	r0, [r7, #12]
 800464c:	60b9      	str	r1, [r7, #8]
 800464e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004650:	e042      	b.n	80046d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	695b      	ldr	r3, [r3, #20]
 8004658:	f003 0310 	and.w	r3, r3, #16
 800465c:	2b10      	cmp	r3, #16
 800465e:	d119      	bne.n	8004694 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f06f 0210 	mvn.w	r2, #16
 8004668:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2200      	movs	r2, #0
 800466e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	2200      	movs	r2, #0
 800467c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	2200      	movs	r2, #0
 800468c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004690:	2301      	movs	r3, #1
 8004692:	e029      	b.n	80046e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004694:	f7fc fd1c 	bl	80010d0 <HAL_GetTick>
 8004698:	4602      	mov	r2, r0
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	1ad3      	subs	r3, r2, r3
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	429a      	cmp	r2, r3
 80046a2:	d302      	bcc.n	80046aa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d116      	bne.n	80046d8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	f043 0220 	orr.w	r2, r3, #32
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e007      	b.n	80046e8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	695b      	ldr	r3, [r3, #20]
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b40      	cmp	r3, #64	; 0x40
 80046e4:	d1b5      	bne.n	8004652 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b083      	sub	sp, #12
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	695b      	ldr	r3, [r3, #20]
 80046fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004702:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004706:	d11b      	bne.n	8004740 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004710:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2200      	movs	r2, #0
 8004716:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2220      	movs	r2, #32
 800471c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472c:	f043 0204 	orr.w	r2, r3, #4
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800473c:	2301      	movs	r3, #1
 800473e:	e000      	b.n	8004742 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
	...

08004750 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b086      	sub	sp, #24
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d101      	bne.n	8004762 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e267      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0301 	and.w	r3, r3, #1
 800476a:	2b00      	cmp	r3, #0
 800476c:	d075      	beq.n	800485a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800476e:	4b88      	ldr	r3, [pc, #544]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 8004770:	689b      	ldr	r3, [r3, #8]
 8004772:	f003 030c 	and.w	r3, r3, #12
 8004776:	2b04      	cmp	r3, #4
 8004778:	d00c      	beq.n	8004794 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800477a:	4b85      	ldr	r3, [pc, #532]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004782:	2b08      	cmp	r3, #8
 8004784:	d112      	bne.n	80047ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004786:	4b82      	ldr	r3, [pc, #520]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800478e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004792:	d10b      	bne.n	80047ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004794:	4b7e      	ldr	r3, [pc, #504]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800479c:	2b00      	cmp	r3, #0
 800479e:	d05b      	beq.n	8004858 <HAL_RCC_OscConfig+0x108>
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	d157      	bne.n	8004858 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047a8:	2301      	movs	r3, #1
 80047aa:	e242      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047b4:	d106      	bne.n	80047c4 <HAL_RCC_OscConfig+0x74>
 80047b6:	4b76      	ldr	r3, [pc, #472]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a75      	ldr	r2, [pc, #468]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c0:	6013      	str	r3, [r2, #0]
 80047c2:	e01d      	b.n	8004800 <HAL_RCC_OscConfig+0xb0>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	685b      	ldr	r3, [r3, #4]
 80047c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047cc:	d10c      	bne.n	80047e8 <HAL_RCC_OscConfig+0x98>
 80047ce:	4b70      	ldr	r3, [pc, #448]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4a6f      	ldr	r2, [pc, #444]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80047d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80047d8:	6013      	str	r3, [r2, #0]
 80047da:	4b6d      	ldr	r3, [pc, #436]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	4a6c      	ldr	r2, [pc, #432]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80047e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047e4:	6013      	str	r3, [r2, #0]
 80047e6:	e00b      	b.n	8004800 <HAL_RCC_OscConfig+0xb0>
 80047e8:	4b69      	ldr	r3, [pc, #420]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a68      	ldr	r2, [pc, #416]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80047ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	4b66      	ldr	r3, [pc, #408]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a65      	ldr	r2, [pc, #404]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80047fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80047fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d013      	beq.n	8004830 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004808:	f7fc fc62 	bl	80010d0 <HAL_GetTick>
 800480c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800480e:	e008      	b.n	8004822 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004810:	f7fc fc5e 	bl	80010d0 <HAL_GetTick>
 8004814:	4602      	mov	r2, r0
 8004816:	693b      	ldr	r3, [r7, #16]
 8004818:	1ad3      	subs	r3, r2, r3
 800481a:	2b64      	cmp	r3, #100	; 0x64
 800481c:	d901      	bls.n	8004822 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800481e:	2303      	movs	r3, #3
 8004820:	e207      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004822:	4b5b      	ldr	r3, [pc, #364]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482a:	2b00      	cmp	r3, #0
 800482c:	d0f0      	beq.n	8004810 <HAL_RCC_OscConfig+0xc0>
 800482e:	e014      	b.n	800485a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004830:	f7fc fc4e 	bl	80010d0 <HAL_GetTick>
 8004834:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004836:	e008      	b.n	800484a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004838:	f7fc fc4a 	bl	80010d0 <HAL_GetTick>
 800483c:	4602      	mov	r2, r0
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	1ad3      	subs	r3, r2, r3
 8004842:	2b64      	cmp	r3, #100	; 0x64
 8004844:	d901      	bls.n	800484a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004846:	2303      	movs	r3, #3
 8004848:	e1f3      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800484a:	4b51      	ldr	r3, [pc, #324]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004852:	2b00      	cmp	r3, #0
 8004854:	d1f0      	bne.n	8004838 <HAL_RCC_OscConfig+0xe8>
 8004856:	e000      	b.n	800485a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004858:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f003 0302 	and.w	r3, r3, #2
 8004862:	2b00      	cmp	r3, #0
 8004864:	d063      	beq.n	800492e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004866:	4b4a      	ldr	r3, [pc, #296]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00b      	beq.n	800488a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004872:	4b47      	ldr	r3, [pc, #284]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800487a:	2b08      	cmp	r3, #8
 800487c:	d11c      	bne.n	80048b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800487e:	4b44      	ldr	r3, [pc, #272]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d116      	bne.n	80048b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800488a:	4b41      	ldr	r3, [pc, #260]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0302 	and.w	r3, r3, #2
 8004892:	2b00      	cmp	r3, #0
 8004894:	d005      	beq.n	80048a2 <HAL_RCC_OscConfig+0x152>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d001      	beq.n	80048a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e1c7      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048a2:	4b3b      	ldr	r3, [pc, #236]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	691b      	ldr	r3, [r3, #16]
 80048ae:	00db      	lsls	r3, r3, #3
 80048b0:	4937      	ldr	r1, [pc, #220]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048b6:	e03a      	b.n	800492e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	68db      	ldr	r3, [r3, #12]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d020      	beq.n	8004902 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80048c0:	4b34      	ldr	r3, [pc, #208]	; (8004994 <HAL_RCC_OscConfig+0x244>)
 80048c2:	2201      	movs	r2, #1
 80048c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048c6:	f7fc fc03 	bl	80010d0 <HAL_GetTick>
 80048ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048cc:	e008      	b.n	80048e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80048ce:	f7fc fbff 	bl	80010d0 <HAL_GetTick>
 80048d2:	4602      	mov	r2, r0
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	1ad3      	subs	r3, r2, r3
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d901      	bls.n	80048e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80048dc:	2303      	movs	r3, #3
 80048de:	e1a8      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e0:	4b2b      	ldr	r3, [pc, #172]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0302 	and.w	r3, r3, #2
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d0f0      	beq.n	80048ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048ec:	4b28      	ldr	r3, [pc, #160]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	691b      	ldr	r3, [r3, #16]
 80048f8:	00db      	lsls	r3, r3, #3
 80048fa:	4925      	ldr	r1, [pc, #148]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	600b      	str	r3, [r1, #0]
 8004900:	e015      	b.n	800492e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004902:	4b24      	ldr	r3, [pc, #144]	; (8004994 <HAL_RCC_OscConfig+0x244>)
 8004904:	2200      	movs	r2, #0
 8004906:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004908:	f7fc fbe2 	bl	80010d0 <HAL_GetTick>
 800490c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004910:	f7fc fbde 	bl	80010d0 <HAL_GetTick>
 8004914:	4602      	mov	r2, r0
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b02      	cmp	r3, #2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e187      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004922:	4b1b      	ldr	r3, [pc, #108]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f0      	bne.n	8004910 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0308 	and.w	r3, r3, #8
 8004936:	2b00      	cmp	r3, #0
 8004938:	d036      	beq.n	80049a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d016      	beq.n	8004970 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004942:	4b15      	ldr	r3, [pc, #84]	; (8004998 <HAL_RCC_OscConfig+0x248>)
 8004944:	2201      	movs	r2, #1
 8004946:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004948:	f7fc fbc2 	bl	80010d0 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004950:	f7fc fbbe 	bl	80010d0 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e167      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004962:	4b0b      	ldr	r3, [pc, #44]	; (8004990 <HAL_RCC_OscConfig+0x240>)
 8004964:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0x200>
 800496e:	e01b      	b.n	80049a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004970:	4b09      	ldr	r3, [pc, #36]	; (8004998 <HAL_RCC_OscConfig+0x248>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004976:	f7fc fbab 	bl	80010d0 <HAL_GetTick>
 800497a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800497c:	e00e      	b.n	800499c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800497e:	f7fc fba7 	bl	80010d0 <HAL_GetTick>
 8004982:	4602      	mov	r2, r0
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	1ad3      	subs	r3, r2, r3
 8004988:	2b02      	cmp	r3, #2
 800498a:	d907      	bls.n	800499c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800498c:	2303      	movs	r3, #3
 800498e:	e150      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
 8004990:	40023800 	.word	0x40023800
 8004994:	42470000 	.word	0x42470000
 8004998:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800499c:	4b88      	ldr	r3, [pc, #544]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 800499e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1ea      	bne.n	800497e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0304 	and.w	r3, r3, #4
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8097 	beq.w	8004ae4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049b6:	2300      	movs	r3, #0
 80049b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049ba:	4b81      	ldr	r3, [pc, #516]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 80049bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10f      	bne.n	80049e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80049c6:	2300      	movs	r3, #0
 80049c8:	60bb      	str	r3, [r7, #8]
 80049ca:	4b7d      	ldr	r3, [pc, #500]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	4a7c      	ldr	r2, [pc, #496]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 80049d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049d4:	6413      	str	r3, [r2, #64]	; 0x40
 80049d6:	4b7a      	ldr	r3, [pc, #488]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 80049d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049de:	60bb      	str	r3, [r7, #8]
 80049e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80049e2:	2301      	movs	r3, #1
 80049e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80049e6:	4b77      	ldr	r3, [pc, #476]	; (8004bc4 <HAL_RCC_OscConfig+0x474>)
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d118      	bne.n	8004a24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80049f2:	4b74      	ldr	r3, [pc, #464]	; (8004bc4 <HAL_RCC_OscConfig+0x474>)
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4a73      	ldr	r2, [pc, #460]	; (8004bc4 <HAL_RCC_OscConfig+0x474>)
 80049f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80049fe:	f7fc fb67 	bl	80010d0 <HAL_GetTick>
 8004a02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a04:	e008      	b.n	8004a18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a06:	f7fc fb63 	bl	80010d0 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	2b02      	cmp	r3, #2
 8004a12:	d901      	bls.n	8004a18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a14:	2303      	movs	r3, #3
 8004a16:	e10c      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a18:	4b6a      	ldr	r3, [pc, #424]	; (8004bc4 <HAL_RCC_OscConfig+0x474>)
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d0f0      	beq.n	8004a06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d106      	bne.n	8004a3a <HAL_RCC_OscConfig+0x2ea>
 8004a2c:	4b64      	ldr	r3, [pc, #400]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a30:	4a63      	ldr	r2, [pc, #396]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a32:	f043 0301 	orr.w	r3, r3, #1
 8004a36:	6713      	str	r3, [r2, #112]	; 0x70
 8004a38:	e01c      	b.n	8004a74 <HAL_RCC_OscConfig+0x324>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	689b      	ldr	r3, [r3, #8]
 8004a3e:	2b05      	cmp	r3, #5
 8004a40:	d10c      	bne.n	8004a5c <HAL_RCC_OscConfig+0x30c>
 8004a42:	4b5f      	ldr	r3, [pc, #380]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a46:	4a5e      	ldr	r2, [pc, #376]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a48:	f043 0304 	orr.w	r3, r3, #4
 8004a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a4e:	4b5c      	ldr	r3, [pc, #368]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a52:	4a5b      	ldr	r2, [pc, #364]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a54:	f043 0301 	orr.w	r3, r3, #1
 8004a58:	6713      	str	r3, [r2, #112]	; 0x70
 8004a5a:	e00b      	b.n	8004a74 <HAL_RCC_OscConfig+0x324>
 8004a5c:	4b58      	ldr	r3, [pc, #352]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a60:	4a57      	ldr	r2, [pc, #348]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a62:	f023 0301 	bic.w	r3, r3, #1
 8004a66:	6713      	str	r3, [r2, #112]	; 0x70
 8004a68:	4b55      	ldr	r3, [pc, #340]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a6c:	4a54      	ldr	r2, [pc, #336]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a6e:	f023 0304 	bic.w	r3, r3, #4
 8004a72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d015      	beq.n	8004aa8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a7c:	f7fc fb28 	bl	80010d0 <HAL_GetTick>
 8004a80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a82:	e00a      	b.n	8004a9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a84:	f7fc fb24 	bl	80010d0 <HAL_GetTick>
 8004a88:	4602      	mov	r2, r0
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	1ad3      	subs	r3, r2, r3
 8004a8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d901      	bls.n	8004a9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004a96:	2303      	movs	r3, #3
 8004a98:	e0cb      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a9a:	4b49      	ldr	r3, [pc, #292]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004a9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0ee      	beq.n	8004a84 <HAL_RCC_OscConfig+0x334>
 8004aa6:	e014      	b.n	8004ad2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004aa8:	f7fc fb12 	bl	80010d0 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aae:	e00a      	b.n	8004ac6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ab0:	f7fc fb0e 	bl	80010d0 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d901      	bls.n	8004ac6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ac2:	2303      	movs	r3, #3
 8004ac4:	e0b5      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ac6:	4b3e      	ldr	r3, [pc, #248]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aca:	f003 0302 	and.w	r3, r3, #2
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1ee      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ad2:	7dfb      	ldrb	r3, [r7, #23]
 8004ad4:	2b01      	cmp	r3, #1
 8004ad6:	d105      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ad8:	4b39      	ldr	r3, [pc, #228]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004adc:	4a38      	ldr	r2, [pc, #224]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004ade:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ae2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	699b      	ldr	r3, [r3, #24]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80a1 	beq.w	8004c30 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004aee:	4b34      	ldr	r3, [pc, #208]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	f003 030c 	and.w	r3, r3, #12
 8004af6:	2b08      	cmp	r3, #8
 8004af8:	d05c      	beq.n	8004bb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	699b      	ldr	r3, [r3, #24]
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d141      	bne.n	8004b86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b02:	4b31      	ldr	r3, [pc, #196]	; (8004bc8 <HAL_RCC_OscConfig+0x478>)
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b08:	f7fc fae2 	bl	80010d0 <HAL_GetTick>
 8004b0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b0e:	e008      	b.n	8004b22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b10:	f7fc fade 	bl	80010d0 <HAL_GetTick>
 8004b14:	4602      	mov	r2, r0
 8004b16:	693b      	ldr	r3, [r7, #16]
 8004b18:	1ad3      	subs	r3, r2, r3
 8004b1a:	2b02      	cmp	r3, #2
 8004b1c:	d901      	bls.n	8004b22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b1e:	2303      	movs	r3, #3
 8004b20:	e087      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b22:	4b27      	ldr	r3, [pc, #156]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d1f0      	bne.n	8004b10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	69da      	ldr	r2, [r3, #28]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6a1b      	ldr	r3, [r3, #32]
 8004b36:	431a      	orrs	r2, r3
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	019b      	lsls	r3, r3, #6
 8004b3e:	431a      	orrs	r2, r3
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	085b      	lsrs	r3, r3, #1
 8004b46:	3b01      	subs	r3, #1
 8004b48:	041b      	lsls	r3, r3, #16
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b50:	061b      	lsls	r3, r3, #24
 8004b52:	491b      	ldr	r1, [pc, #108]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004b54:	4313      	orrs	r3, r2
 8004b56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b58:	4b1b      	ldr	r3, [pc, #108]	; (8004bc8 <HAL_RCC_OscConfig+0x478>)
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b5e:	f7fc fab7 	bl	80010d0 <HAL_GetTick>
 8004b62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b64:	e008      	b.n	8004b78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b66:	f7fc fab3 	bl	80010d0 <HAL_GetTick>
 8004b6a:	4602      	mov	r2, r0
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	1ad3      	subs	r3, r2, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d901      	bls.n	8004b78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
 8004b76:	e05c      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b78:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d0f0      	beq.n	8004b66 <HAL_RCC_OscConfig+0x416>
 8004b84:	e054      	b.n	8004c30 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b86:	4b10      	ldr	r3, [pc, #64]	; (8004bc8 <HAL_RCC_OscConfig+0x478>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b8c:	f7fc faa0 	bl	80010d0 <HAL_GetTick>
 8004b90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b92:	e008      	b.n	8004ba6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b94:	f7fc fa9c 	bl	80010d0 <HAL_GetTick>
 8004b98:	4602      	mov	r2, r0
 8004b9a:	693b      	ldr	r3, [r7, #16]
 8004b9c:	1ad3      	subs	r3, r2, r3
 8004b9e:	2b02      	cmp	r3, #2
 8004ba0:	d901      	bls.n	8004ba6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ba2:	2303      	movs	r3, #3
 8004ba4:	e045      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ba6:	4b06      	ldr	r3, [pc, #24]	; (8004bc0 <HAL_RCC_OscConfig+0x470>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d1f0      	bne.n	8004b94 <HAL_RCC_OscConfig+0x444>
 8004bb2:	e03d      	b.n	8004c30 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	699b      	ldr	r3, [r3, #24]
 8004bb8:	2b01      	cmp	r3, #1
 8004bba:	d107      	bne.n	8004bcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	e038      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
 8004bc0:	40023800 	.word	0x40023800
 8004bc4:	40007000 	.word	0x40007000
 8004bc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004bcc:	4b1b      	ldr	r3, [pc, #108]	; (8004c3c <HAL_RCC_OscConfig+0x4ec>)
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	699b      	ldr	r3, [r3, #24]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d028      	beq.n	8004c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d121      	bne.n	8004c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d11a      	bne.n	8004c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004bf6:	68fa      	ldr	r2, [r7, #12]
 8004bf8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c02:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c04:	4293      	cmp	r3, r2
 8004c06:	d111      	bne.n	8004c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c12:	085b      	lsrs	r3, r3, #1
 8004c14:	3b01      	subs	r3, #1
 8004c16:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d107      	bne.n	8004c2c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e000      	b.n	8004c32 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	40023800 	.word	0x40023800

08004c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b084      	sub	sp, #16
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
 8004c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d101      	bne.n	8004c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0cc      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c54:	4b68      	ldr	r3, [pc, #416]	; (8004df8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f003 0307 	and.w	r3, r3, #7
 8004c5c:	683a      	ldr	r2, [r7, #0]
 8004c5e:	429a      	cmp	r2, r3
 8004c60:	d90c      	bls.n	8004c7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c62:	4b65      	ldr	r3, [pc, #404]	; (8004df8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c64:	683a      	ldr	r2, [r7, #0]
 8004c66:	b2d2      	uxtb	r2, r2
 8004c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c6a:	4b63      	ldr	r3, [pc, #396]	; (8004df8 <HAL_RCC_ClockConfig+0x1b8>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f003 0307 	and.w	r3, r3, #7
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d001      	beq.n	8004c7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e0b8      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d020      	beq.n	8004cca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 0304 	and.w	r3, r3, #4
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d005      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c94:	4b59      	ldr	r3, [pc, #356]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004c96:	689b      	ldr	r3, [r3, #8]
 8004c98:	4a58      	ldr	r2, [pc, #352]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004c9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004c9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cac:	4b53      	ldr	r3, [pc, #332]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4a52      	ldr	r2, [pc, #328]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004cb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb8:	4b50      	ldr	r3, [pc, #320]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004cba:	689b      	ldr	r3, [r3, #8]
 8004cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	689b      	ldr	r3, [r3, #8]
 8004cc4:	494d      	ldr	r1, [pc, #308]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004cc6:	4313      	orrs	r3, r2
 8004cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f003 0301 	and.w	r3, r3, #1
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d044      	beq.n	8004d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d107      	bne.n	8004cee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cde:	4b47      	ldr	r3, [pc, #284]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d119      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004cea:	2301      	movs	r3, #1
 8004cec:	e07f      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	2b02      	cmp	r3, #2
 8004cf4:	d003      	beq.n	8004cfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004cfa:	2b03      	cmp	r3, #3
 8004cfc:	d107      	bne.n	8004d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cfe:	4b3f      	ldr	r3, [pc, #252]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d109      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	e06f      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d0e:	4b3b      	ldr	r3, [pc, #236]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	f003 0302 	and.w	r3, r3, #2
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d101      	bne.n	8004d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	e067      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d1e:	4b37      	ldr	r3, [pc, #220]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f023 0203 	bic.w	r2, r3, #3
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	685b      	ldr	r3, [r3, #4]
 8004d2a:	4934      	ldr	r1, [pc, #208]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d30:	f7fc f9ce 	bl	80010d0 <HAL_GetTick>
 8004d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d36:	e00a      	b.n	8004d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d38:	f7fc f9ca 	bl	80010d0 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d901      	bls.n	8004d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d4a:	2303      	movs	r3, #3
 8004d4c:	e04f      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d4e:	4b2b      	ldr	r3, [pc, #172]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	689b      	ldr	r3, [r3, #8]
 8004d52:	f003 020c 	and.w	r2, r3, #12
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d1eb      	bne.n	8004d38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d60:	4b25      	ldr	r3, [pc, #148]	; (8004df8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f003 0307 	and.w	r3, r3, #7
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d20c      	bcs.n	8004d88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d6e:	4b22      	ldr	r3, [pc, #136]	; (8004df8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d70:	683a      	ldr	r2, [r7, #0]
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d76:	4b20      	ldr	r3, [pc, #128]	; (8004df8 <HAL_RCC_ClockConfig+0x1b8>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0307 	and.w	r3, r3, #7
 8004d7e:	683a      	ldr	r2, [r7, #0]
 8004d80:	429a      	cmp	r2, r3
 8004d82:	d001      	beq.n	8004d88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e032      	b.n	8004dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 0304 	and.w	r3, r3, #4
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d008      	beq.n	8004da6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004d94:	4b19      	ldr	r3, [pc, #100]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68db      	ldr	r3, [r3, #12]
 8004da0:	4916      	ldr	r1, [pc, #88]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004da2:	4313      	orrs	r3, r2
 8004da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	f003 0308 	and.w	r3, r3, #8
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d009      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004db2:	4b12      	ldr	r3, [pc, #72]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	00db      	lsls	r3, r3, #3
 8004dc0:	490e      	ldr	r1, [pc, #56]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004dc6:	f000 f889 	bl	8004edc <HAL_RCC_GetSysClockFreq>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	4b0b      	ldr	r3, [pc, #44]	; (8004dfc <HAL_RCC_ClockConfig+0x1bc>)
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	091b      	lsrs	r3, r3, #4
 8004dd2:	f003 030f 	and.w	r3, r3, #15
 8004dd6:	490a      	ldr	r1, [pc, #40]	; (8004e00 <HAL_RCC_ClockConfig+0x1c0>)
 8004dd8:	5ccb      	ldrb	r3, [r1, r3]
 8004dda:	fa22 f303 	lsr.w	r3, r2, r3
 8004dde:	4a09      	ldr	r2, [pc, #36]	; (8004e04 <HAL_RCC_ClockConfig+0x1c4>)
 8004de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004de2:	4b09      	ldr	r3, [pc, #36]	; (8004e08 <HAL_RCC_ClockConfig+0x1c8>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fc f92e 	bl	8001048 <HAL_InitTick>

  return HAL_OK;
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3710      	adds	r7, #16
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	40023c00 	.word	0x40023c00
 8004dfc:	40023800 	.word	0x40023800
 8004e00:	080071f4 	.word	0x080071f4
 8004e04:	20000000 	.word	0x20000000
 8004e08:	20000004 	.word	0x20000004

08004e0c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b08c      	sub	sp, #48	; 0x30
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	60f8      	str	r0, [r7, #12]
 8004e14:	60b9      	str	r1, [r7, #8]
 8004e16:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d129      	bne.n	8004e72 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004e1e:	2300      	movs	r3, #0
 8004e20:	61bb      	str	r3, [r7, #24]
 8004e22:	4b2b      	ldr	r3, [pc, #172]	; (8004ed0 <HAL_RCC_MCOConfig+0xc4>)
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	4a2a      	ldr	r2, [pc, #168]	; (8004ed0 <HAL_RCC_MCOConfig+0xc4>)
 8004e28:	f043 0301 	orr.w	r3, r3, #1
 8004e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e2e:	4b28      	ldr	r3, [pc, #160]	; (8004ed0 <HAL_RCC_MCOConfig+0xc4>)
 8004e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004e3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e40:	2302      	movs	r3, #2
 8004e42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e44:	2303      	movs	r3, #3
 8004e46:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e48:	2300      	movs	r3, #0
 8004e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004e50:	f107 031c 	add.w	r3, r7, #28
 8004e54:	4619      	mov	r1, r3
 8004e56:	481f      	ldr	r0, [pc, #124]	; (8004ed4 <HAL_RCC_MCOConfig+0xc8>)
 8004e58:	f7fe fb16 	bl	8003488 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004e5c:	4b1c      	ldr	r3, [pc, #112]	; (8004ed0 <HAL_RCC_MCOConfig+0xc4>)
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	430b      	orrs	r3, r1
 8004e6a:	4919      	ldr	r1, [pc, #100]	; (8004ed0 <HAL_RCC_MCOConfig+0xc4>)
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004e70:	e029      	b.n	8004ec6 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004e72:	2300      	movs	r3, #0
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	4b16      	ldr	r3, [pc, #88]	; (8004ed0 <HAL_RCC_MCOConfig+0xc4>)
 8004e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e7a:	4a15      	ldr	r2, [pc, #84]	; (8004ed0 <HAL_RCC_MCOConfig+0xc4>)
 8004e7c:	f043 0304 	orr.w	r3, r3, #4
 8004e80:	6313      	str	r3, [r2, #48]	; 0x30
 8004e82:	4b13      	ldr	r3, [pc, #76]	; (8004ed0 <HAL_RCC_MCOConfig+0xc4>)
 8004e84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e86:	f003 0304 	and.w	r3, r3, #4
 8004e8a:	617b      	str	r3, [r7, #20]
 8004e8c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004e8e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004e92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e94:	2302      	movs	r3, #2
 8004e96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004ea4:	f107 031c 	add.w	r3, r7, #28
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	480b      	ldr	r0, [pc, #44]	; (8004ed8 <HAL_RCC_MCOConfig+0xcc>)
 8004eac:	f7fe faec 	bl	8003488 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004eb0:	4b07      	ldr	r3, [pc, #28]	; (8004ed0 <HAL_RCC_MCOConfig+0xc4>)
 8004eb2:	689b      	ldr	r3, [r3, #8]
 8004eb4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	00d9      	lsls	r1, r3, #3
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	430b      	orrs	r3, r1
 8004ec0:	4903      	ldr	r1, [pc, #12]	; (8004ed0 <HAL_RCC_MCOConfig+0xc4>)
 8004ec2:	4313      	orrs	r3, r2
 8004ec4:	608b      	str	r3, [r1, #8]
}
 8004ec6:	bf00      	nop
 8004ec8:	3730      	adds	r7, #48	; 0x30
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
 8004ece:	bf00      	nop
 8004ed0:	40023800 	.word	0x40023800
 8004ed4:	40020000 	.word	0x40020000
 8004ed8:	40020800 	.word	0x40020800

08004edc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004edc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee0:	b090      	sub	sp, #64	; 0x40
 8004ee2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	637b      	str	r3, [r7, #52]	; 0x34
 8004ee8:	2300      	movs	r3, #0
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004eec:	2300      	movs	r3, #0
 8004eee:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004ef0:	2300      	movs	r3, #0
 8004ef2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004ef4:	4b59      	ldr	r3, [pc, #356]	; (800505c <HAL_RCC_GetSysClockFreq+0x180>)
 8004ef6:	689b      	ldr	r3, [r3, #8]
 8004ef8:	f003 030c 	and.w	r3, r3, #12
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d00d      	beq.n	8004f1c <HAL_RCC_GetSysClockFreq+0x40>
 8004f00:	2b08      	cmp	r3, #8
 8004f02:	f200 80a1 	bhi.w	8005048 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d002      	beq.n	8004f10 <HAL_RCC_GetSysClockFreq+0x34>
 8004f0a:	2b04      	cmp	r3, #4
 8004f0c:	d003      	beq.n	8004f16 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f0e:	e09b      	b.n	8005048 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f10:	4b53      	ldr	r3, [pc, #332]	; (8005060 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f12:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f14:	e09b      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f16:	4b53      	ldr	r3, [pc, #332]	; (8005064 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f18:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f1a:	e098      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f1c:	4b4f      	ldr	r3, [pc, #316]	; (800505c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f24:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f26:	4b4d      	ldr	r3, [pc, #308]	; (800505c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d028      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f32:	4b4a      	ldr	r3, [pc, #296]	; (800505c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	099b      	lsrs	r3, r3, #6
 8004f38:	2200      	movs	r2, #0
 8004f3a:	623b      	str	r3, [r7, #32]
 8004f3c:	627a      	str	r2, [r7, #36]	; 0x24
 8004f3e:	6a3b      	ldr	r3, [r7, #32]
 8004f40:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f44:	2100      	movs	r1, #0
 8004f46:	4b47      	ldr	r3, [pc, #284]	; (8005064 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f48:	fb03 f201 	mul.w	r2, r3, r1
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	fb00 f303 	mul.w	r3, r0, r3
 8004f52:	4413      	add	r3, r2
 8004f54:	4a43      	ldr	r2, [pc, #268]	; (8005064 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f56:	fba0 1202 	umull	r1, r2, r0, r2
 8004f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f5c:	460a      	mov	r2, r1
 8004f5e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f62:	4413      	add	r3, r2
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004f66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f68:	2200      	movs	r2, #0
 8004f6a:	61bb      	str	r3, [r7, #24]
 8004f6c:	61fa      	str	r2, [r7, #28]
 8004f6e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f72:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004f76:	f7fb f983 	bl	8000280 <__aeabi_uldivmod>
 8004f7a:	4602      	mov	r2, r0
 8004f7c:	460b      	mov	r3, r1
 8004f7e:	4613      	mov	r3, r2
 8004f80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f82:	e053      	b.n	800502c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f84:	4b35      	ldr	r3, [pc, #212]	; (800505c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	099b      	lsrs	r3, r3, #6
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	613b      	str	r3, [r7, #16]
 8004f8e:	617a      	str	r2, [r7, #20]
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004f96:	f04f 0b00 	mov.w	fp, #0
 8004f9a:	4652      	mov	r2, sl
 8004f9c:	465b      	mov	r3, fp
 8004f9e:	f04f 0000 	mov.w	r0, #0
 8004fa2:	f04f 0100 	mov.w	r1, #0
 8004fa6:	0159      	lsls	r1, r3, #5
 8004fa8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fac:	0150      	lsls	r0, r2, #5
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	ebb2 080a 	subs.w	r8, r2, sl
 8004fb6:	eb63 090b 	sbc.w	r9, r3, fp
 8004fba:	f04f 0200 	mov.w	r2, #0
 8004fbe:	f04f 0300 	mov.w	r3, #0
 8004fc2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004fc6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004fca:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004fce:	ebb2 0408 	subs.w	r4, r2, r8
 8004fd2:	eb63 0509 	sbc.w	r5, r3, r9
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	f04f 0300 	mov.w	r3, #0
 8004fde:	00eb      	lsls	r3, r5, #3
 8004fe0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004fe4:	00e2      	lsls	r2, r4, #3
 8004fe6:	4614      	mov	r4, r2
 8004fe8:	461d      	mov	r5, r3
 8004fea:	eb14 030a 	adds.w	r3, r4, sl
 8004fee:	603b      	str	r3, [r7, #0]
 8004ff0:	eb45 030b 	adc.w	r3, r5, fp
 8004ff4:	607b      	str	r3, [r7, #4]
 8004ff6:	f04f 0200 	mov.w	r2, #0
 8004ffa:	f04f 0300 	mov.w	r3, #0
 8004ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005002:	4629      	mov	r1, r5
 8005004:	028b      	lsls	r3, r1, #10
 8005006:	4621      	mov	r1, r4
 8005008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800500c:	4621      	mov	r1, r4
 800500e:	028a      	lsls	r2, r1, #10
 8005010:	4610      	mov	r0, r2
 8005012:	4619      	mov	r1, r3
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	2200      	movs	r2, #0
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	60fa      	str	r2, [r7, #12]
 800501c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005020:	f7fb f92e 	bl	8000280 <__aeabi_uldivmod>
 8005024:	4602      	mov	r2, r0
 8005026:	460b      	mov	r3, r1
 8005028:	4613      	mov	r3, r2
 800502a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800502c:	4b0b      	ldr	r3, [pc, #44]	; (800505c <HAL_RCC_GetSysClockFreq+0x180>)
 800502e:	685b      	ldr	r3, [r3, #4]
 8005030:	0c1b      	lsrs	r3, r3, #16
 8005032:	f003 0303 	and.w	r3, r3, #3
 8005036:	3301      	adds	r3, #1
 8005038:	005b      	lsls	r3, r3, #1
 800503a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800503c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800503e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005040:	fbb2 f3f3 	udiv	r3, r2, r3
 8005044:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005046:	e002      	b.n	800504e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005048:	4b05      	ldr	r3, [pc, #20]	; (8005060 <HAL_RCC_GetSysClockFreq+0x184>)
 800504a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800504c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800504e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005050:	4618      	mov	r0, r3
 8005052:	3740      	adds	r7, #64	; 0x40
 8005054:	46bd      	mov	sp, r7
 8005056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800505a:	bf00      	nop
 800505c:	40023800 	.word	0x40023800
 8005060:	00f42400 	.word	0x00f42400
 8005064:	017d7840 	.word	0x017d7840

08005068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005068:	b480      	push	{r7}
 800506a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800506c:	4b03      	ldr	r3, [pc, #12]	; (800507c <HAL_RCC_GetHCLKFreq+0x14>)
 800506e:	681b      	ldr	r3, [r3, #0]
}
 8005070:	4618      	mov	r0, r3
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	20000000 	.word	0x20000000

08005080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005084:	f7ff fff0 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 8005088:	4602      	mov	r2, r0
 800508a:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800508c:	689b      	ldr	r3, [r3, #8]
 800508e:	0a9b      	lsrs	r3, r3, #10
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	4903      	ldr	r1, [pc, #12]	; (80050a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005096:	5ccb      	ldrb	r3, [r1, r3]
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800509c:	4618      	mov	r0, r3
 800509e:	bd80      	pop	{r7, pc}
 80050a0:	40023800 	.word	0x40023800
 80050a4:	08007204 	.word	0x08007204

080050a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050ac:	f7ff ffdc 	bl	8005068 <HAL_RCC_GetHCLKFreq>
 80050b0:	4602      	mov	r2, r0
 80050b2:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050b4:	689b      	ldr	r3, [r3, #8]
 80050b6:	0b5b      	lsrs	r3, r3, #13
 80050b8:	f003 0307 	and.w	r3, r3, #7
 80050bc:	4903      	ldr	r1, [pc, #12]	; (80050cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80050be:	5ccb      	ldrb	r3, [r1, r3]
 80050c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050c4:	4618      	mov	r0, r3
 80050c6:	bd80      	pop	{r7, pc}
 80050c8:	40023800 	.word	0x40023800
 80050cc:	08007204 	.word	0x08007204

080050d0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d101      	bne.n	80050e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e03f      	b.n	8005162 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d106      	bne.n	80050fc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2200      	movs	r2, #0
 80050f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fb fe5e 	bl	8000db8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2224      	movs	r2, #36	; 0x24
 8005100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	68da      	ldr	r2, [r3, #12]
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005112:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fed1 	bl	8005ebc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005128:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	695a      	ldr	r2, [r3, #20]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005138:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005148:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2200      	movs	r2, #0
 800514e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2220      	movs	r2, #32
 8005154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2220      	movs	r2, #32
 800515c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005160:	2300      	movs	r3, #0
}
 8005162:	4618      	mov	r0, r3
 8005164:	3708      	adds	r7, #8
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}

0800516a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b08a      	sub	sp, #40	; 0x28
 800516e:	af02      	add	r7, sp, #8
 8005170:	60f8      	str	r0, [r7, #12]
 8005172:	60b9      	str	r1, [r7, #8]
 8005174:	603b      	str	r3, [r7, #0]
 8005176:	4613      	mov	r3, r2
 8005178:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800517a:	2300      	movs	r3, #0
 800517c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b20      	cmp	r3, #32
 8005188:	d17c      	bne.n	8005284 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800518a:	68bb      	ldr	r3, [r7, #8]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d002      	beq.n	8005196 <HAL_UART_Transmit+0x2c>
 8005190:	88fb      	ldrh	r3, [r7, #6]
 8005192:	2b00      	cmp	r3, #0
 8005194:	d101      	bne.n	800519a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005196:	2301      	movs	r3, #1
 8005198:	e075      	b.n	8005286 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d101      	bne.n	80051a8 <HAL_UART_Transmit+0x3e>
 80051a4:	2302      	movs	r3, #2
 80051a6:	e06e      	b.n	8005286 <HAL_UART_Transmit+0x11c>
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2201      	movs	r2, #1
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2200      	movs	r2, #0
 80051b4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	2221      	movs	r2, #33	; 0x21
 80051ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80051be:	f7fb ff87 	bl	80010d0 <HAL_GetTick>
 80051c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	88fa      	ldrh	r2, [r7, #6]
 80051c8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	88fa      	ldrh	r2, [r7, #6]
 80051ce:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	689b      	ldr	r3, [r3, #8]
 80051d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d8:	d108      	bne.n	80051ec <HAL_UART_Transmit+0x82>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d104      	bne.n	80051ec <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80051e2:	2300      	movs	r3, #0
 80051e4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80051e6:	68bb      	ldr	r3, [r7, #8]
 80051e8:	61bb      	str	r3, [r7, #24]
 80051ea:	e003      	b.n	80051f4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80051ec:	68bb      	ldr	r3, [r7, #8]
 80051ee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80051f0:	2300      	movs	r3, #0
 80051f2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80051fc:	e02a      	b.n	8005254 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	9300      	str	r3, [sp, #0]
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2200      	movs	r2, #0
 8005206:	2180      	movs	r1, #128	; 0x80
 8005208:	68f8      	ldr	r0, [r7, #12]
 800520a:	f000 fc26 	bl	8005a5a <UART_WaitOnFlagUntilTimeout>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d001      	beq.n	8005218 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e036      	b.n	8005286 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10b      	bne.n	8005236 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800521e:	69bb      	ldr	r3, [r7, #24]
 8005220:	881b      	ldrh	r3, [r3, #0]
 8005222:	461a      	mov	r2, r3
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800522c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	3302      	adds	r3, #2
 8005232:	61bb      	str	r3, [r7, #24]
 8005234:	e007      	b.n	8005246 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	781a      	ldrb	r2, [r3, #0]
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	3301      	adds	r3, #1
 8005244:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800524a:	b29b      	uxth	r3, r3
 800524c:	3b01      	subs	r3, #1
 800524e:	b29a      	uxth	r2, r3
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005258:	b29b      	uxth	r3, r3
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1cf      	bne.n	80051fe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	9300      	str	r3, [sp, #0]
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2200      	movs	r2, #0
 8005266:	2140      	movs	r1, #64	; 0x40
 8005268:	68f8      	ldr	r0, [r7, #12]
 800526a:	f000 fbf6 	bl	8005a5a <UART_WaitOnFlagUntilTimeout>
 800526e:	4603      	mov	r3, r0
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005274:	2303      	movs	r3, #3
 8005276:	e006      	b.n	8005286 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2220      	movs	r2, #32
 800527c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005280:	2300      	movs	r3, #0
 8005282:	e000      	b.n	8005286 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005284:	2302      	movs	r3, #2
  }
}
 8005286:	4618      	mov	r0, r3
 8005288:	3720      	adds	r7, #32
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
	...

08005290 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b08c      	sub	sp, #48	; 0x30
 8005294:	af00      	add	r7, sp, #0
 8005296:	60f8      	str	r0, [r7, #12]
 8005298:	60b9      	str	r1, [r7, #8]
 800529a:	4613      	mov	r3, r2
 800529c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b20      	cmp	r3, #32
 80052a8:	d165      	bne.n	8005376 <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d002      	beq.n	80052b6 <HAL_UART_Transmit_DMA+0x26>
 80052b0:	88fb      	ldrh	r3, [r7, #6]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80052b6:	2301      	movs	r3, #1
 80052b8:	e05e      	b.n	8005378 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052c0:	2b01      	cmp	r3, #1
 80052c2:	d101      	bne.n	80052c8 <HAL_UART_Transmit_DMA+0x38>
 80052c4:	2302      	movs	r3, #2
 80052c6:	e057      	b.n	8005378 <HAL_UART_Transmit_DMA+0xe8>
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	88fa      	ldrh	r2, [r7, #6]
 80052da:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	88fa      	ldrh	r2, [r7, #6]
 80052e0:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2200      	movs	r2, #0
 80052e6:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2221      	movs	r2, #33	; 0x21
 80052ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052f4:	4a22      	ldr	r2, [pc, #136]	; (8005380 <HAL_UART_Transmit_DMA+0xf0>)
 80052f6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052fc:	4a21      	ldr	r2, [pc, #132]	; (8005384 <HAL_UART_Transmit_DMA+0xf4>)
 80052fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005304:	4a20      	ldr	r2, [pc, #128]	; (8005388 <HAL_UART_Transmit_DMA+0xf8>)
 8005306:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800530c:	2200      	movs	r2, #0
 800530e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005310:	f107 0308 	add.w	r3, r7, #8
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531c:	6819      	ldr	r1, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	3304      	adds	r3, #4
 8005324:	461a      	mov	r2, r3
 8005326:	88fb      	ldrh	r3, [r7, #6]
 8005328:	f7fc fbd2 	bl	8001ad0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005334:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2200      	movs	r2, #0
 800533a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	3314      	adds	r3, #20
 8005344:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005346:	69bb      	ldr	r3, [r7, #24]
 8005348:	e853 3f00 	ldrex	r3, [r3]
 800534c:	617b      	str	r3, [r7, #20]
   return(result);
 800534e:	697b      	ldr	r3, [r7, #20]
 8005350:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005354:	62bb      	str	r3, [r7, #40]	; 0x28
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	3314      	adds	r3, #20
 800535c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800535e:	627a      	str	r2, [r7, #36]	; 0x24
 8005360:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6a39      	ldr	r1, [r7, #32]
 8005364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	61fb      	str	r3, [r7, #28]
   return(result);
 800536c:	69fb      	ldr	r3, [r7, #28]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e5      	bne.n	800533e <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005372:	2300      	movs	r3, #0
 8005374:	e000      	b.n	8005378 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 8005376:	2302      	movs	r3, #2
  }
}
 8005378:	4618      	mov	r0, r3
 800537a:	3730      	adds	r7, #48	; 0x30
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	08005911 	.word	0x08005911
 8005384:	080059ab 	.word	0x080059ab
 8005388:	080059c7 	.word	0x080059c7

0800538c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b0ba      	sub	sp, #232	; 0xe8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80053ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10f      	bne.n	80053f2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	f003 0320 	and.w	r3, r3, #32
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d009      	beq.n	80053f2 <HAL_UART_IRQHandler+0x66>
 80053de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053e2:	f003 0320 	and.w	r3, r3, #32
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d003      	beq.n	80053f2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fcaa 	bl	8005d44 <UART_Receive_IT>
      return;
 80053f0:	e256      	b.n	80058a0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	f000 80de 	beq.w	80055b8 <HAL_UART_IRQHandler+0x22c>
 80053fc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005400:	f003 0301 	and.w	r3, r3, #1
 8005404:	2b00      	cmp	r3, #0
 8005406:	d106      	bne.n	8005416 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005408:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800540c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005410:	2b00      	cmp	r3, #0
 8005412:	f000 80d1 	beq.w	80055b8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800541a:	f003 0301 	and.w	r3, r3, #1
 800541e:	2b00      	cmp	r3, #0
 8005420:	d00b      	beq.n	800543a <HAL_UART_IRQHandler+0xae>
 8005422:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	f043 0201 	orr.w	r2, r3, #1
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800543a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800543e:	f003 0304 	and.w	r3, r3, #4
 8005442:	2b00      	cmp	r3, #0
 8005444:	d00b      	beq.n	800545e <HAL_UART_IRQHandler+0xd2>
 8005446:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800544a:	f003 0301 	and.w	r3, r3, #1
 800544e:	2b00      	cmp	r3, #0
 8005450:	d005      	beq.n	800545e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005456:	f043 0202 	orr.w	r2, r3, #2
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800545e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005462:	f003 0302 	and.w	r3, r3, #2
 8005466:	2b00      	cmp	r3, #0
 8005468:	d00b      	beq.n	8005482 <HAL_UART_IRQHandler+0xf6>
 800546a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800546e:	f003 0301 	and.w	r3, r3, #1
 8005472:	2b00      	cmp	r3, #0
 8005474:	d005      	beq.n	8005482 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547a:	f043 0204 	orr.w	r2, r3, #4
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005486:	f003 0308 	and.w	r3, r3, #8
 800548a:	2b00      	cmp	r3, #0
 800548c:	d011      	beq.n	80054b2 <HAL_UART_IRQHandler+0x126>
 800548e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005492:	f003 0320 	and.w	r3, r3, #32
 8005496:	2b00      	cmp	r3, #0
 8005498:	d105      	bne.n	80054a6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800549a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800549e:	f003 0301 	and.w	r3, r3, #1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d005      	beq.n	80054b2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	f043 0208 	orr.w	r2, r3, #8
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	f000 81ed 	beq.w	8005896 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054c0:	f003 0320 	and.w	r3, r3, #32
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d008      	beq.n	80054da <HAL_UART_IRQHandler+0x14e>
 80054c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054cc:	f003 0320 	and.w	r3, r3, #32
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 fc35 	bl	8005d44 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	695b      	ldr	r3, [r3, #20]
 80054e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054e4:	2b40      	cmp	r3, #64	; 0x40
 80054e6:	bf0c      	ite	eq
 80054e8:	2301      	moveq	r3, #1
 80054ea:	2300      	movne	r3, #0
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	f003 0308 	and.w	r3, r3, #8
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d103      	bne.n	8005506 <HAL_UART_IRQHandler+0x17a>
 80054fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005502:	2b00      	cmp	r3, #0
 8005504:	d04f      	beq.n	80055a6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 fb3d 	bl	8005b86 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005516:	2b40      	cmp	r3, #64	; 0x40
 8005518:	d141      	bne.n	800559e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3314      	adds	r3, #20
 8005520:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005524:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005528:	e853 3f00 	ldrex	r3, [r3]
 800552c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005530:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005534:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005538:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	3314      	adds	r3, #20
 8005542:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005546:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800554a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800554e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005552:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005556:	e841 2300 	strex	r3, r2, [r1]
 800555a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800555e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005562:	2b00      	cmp	r3, #0
 8005564:	d1d9      	bne.n	800551a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800556a:	2b00      	cmp	r3, #0
 800556c:	d013      	beq.n	8005596 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	4a7d      	ldr	r2, [pc, #500]	; (8005768 <HAL_UART_IRQHandler+0x3dc>)
 8005574:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557a:	4618      	mov	r0, r3
 800557c:	f7fc fb70 	bl	8001c60 <HAL_DMA_Abort_IT>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d016      	beq.n	80055b4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005590:	4610      	mov	r0, r2
 8005592:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005594:	e00e      	b.n	80055b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9a4 	bl	80058e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800559c:	e00a      	b.n	80055b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9a0 	bl	80058e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a4:	e006      	b.n	80055b4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055a6:	6878      	ldr	r0, [r7, #4]
 80055a8:	f000 f99c 	bl	80058e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055b2:	e170      	b.n	8005896 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b4:	bf00      	nop
    return;
 80055b6:	e16e      	b.n	8005896 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055bc:	2b01      	cmp	r3, #1
 80055be:	f040 814a 	bne.w	8005856 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	f000 8143 	beq.w	8005856 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055d4:	f003 0310 	and.w	r3, r3, #16
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f000 813c 	beq.w	8005856 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055de:	2300      	movs	r3, #0
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60bb      	str	r3, [r7, #8]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	685b      	ldr	r3, [r3, #4]
 80055f0:	60bb      	str	r3, [r7, #8]
 80055f2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	695b      	ldr	r3, [r3, #20]
 80055fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055fe:	2b40      	cmp	r3, #64	; 0x40
 8005600:	f040 80b4 	bne.w	800576c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005610:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 8140 	beq.w	800589a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800561e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005622:	429a      	cmp	r2, r3
 8005624:	f080 8139 	bcs.w	800589a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800562e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800563a:	f000 8088 	beq.w	800574e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	330c      	adds	r3, #12
 8005644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005648:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800564c:	e853 3f00 	ldrex	r3, [r3]
 8005650:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005654:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005658:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800565c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	330c      	adds	r3, #12
 8005666:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800566a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800566e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005672:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005676:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800567a:	e841 2300 	strex	r3, r2, [r1]
 800567e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005682:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1d9      	bne.n	800563e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	3314      	adds	r3, #20
 8005690:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005692:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005694:	e853 3f00 	ldrex	r3, [r3]
 8005698:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800569a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800569c:	f023 0301 	bic.w	r3, r3, #1
 80056a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	3314      	adds	r3, #20
 80056aa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056ae:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056b2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056b4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056b6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056ba:	e841 2300 	strex	r3, r2, [r1]
 80056be:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d1e1      	bne.n	800568a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	3314      	adds	r3, #20
 80056cc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056d0:	e853 3f00 	ldrex	r3, [r3]
 80056d4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056d8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056dc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	3314      	adds	r3, #20
 80056e6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056ea:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056ec:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ee:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056f2:	e841 2300 	strex	r3, r2, [r1]
 80056f6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d1e3      	bne.n	80056c6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2220      	movs	r2, #32
 8005702:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	2200      	movs	r2, #0
 800570a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	330c      	adds	r3, #12
 8005712:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005714:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005716:	e853 3f00 	ldrex	r3, [r3]
 800571a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800571c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800571e:	f023 0310 	bic.w	r3, r3, #16
 8005722:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	330c      	adds	r3, #12
 800572c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005730:	65ba      	str	r2, [r7, #88]	; 0x58
 8005732:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005734:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005736:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005738:	e841 2300 	strex	r3, r2, [r1]
 800573c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800573e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1e3      	bne.n	800570c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005748:	4618      	mov	r0, r3
 800574a:	f7fc fa19 	bl	8001b80 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005756:	b29b      	uxth	r3, r3
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	b29b      	uxth	r3, r3
 800575c:	4619      	mov	r1, r3
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f8ca 	bl	80058f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005764:	e099      	b.n	800589a <HAL_UART_IRQHandler+0x50e>
 8005766:	bf00      	nop
 8005768:	08005c4d 	.word	0x08005c4d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005774:	b29b      	uxth	r3, r3
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005780:	b29b      	uxth	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	f000 808b 	beq.w	800589e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005788:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8086 	beq.w	800589e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	330c      	adds	r3, #12
 8005798:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579c:	e853 3f00 	ldrex	r3, [r3]
 80057a0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057a4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	330c      	adds	r3, #12
 80057b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057b6:	647a      	str	r2, [r7, #68]	; 0x44
 80057b8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057be:	e841 2300 	strex	r3, r2, [r1]
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d1e3      	bne.n	8005792 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	3314      	adds	r3, #20
 80057d0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d4:	e853 3f00 	ldrex	r3, [r3]
 80057d8:	623b      	str	r3, [r7, #32]
   return(result);
 80057da:	6a3b      	ldr	r3, [r7, #32]
 80057dc:	f023 0301 	bic.w	r3, r3, #1
 80057e0:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	3314      	adds	r3, #20
 80057ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80057ee:	633a      	str	r2, [r7, #48]	; 0x30
 80057f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80057f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057f6:	e841 2300 	strex	r3, r2, [r1]
 80057fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80057fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1e3      	bne.n	80057ca <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2220      	movs	r2, #32
 8005806:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2200      	movs	r2, #0
 800580e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	330c      	adds	r3, #12
 8005816:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	e853 3f00 	ldrex	r3, [r3]
 800581e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	f023 0310 	bic.w	r3, r3, #16
 8005826:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	330c      	adds	r3, #12
 8005830:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005834:	61fa      	str	r2, [r7, #28]
 8005836:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005838:	69b9      	ldr	r1, [r7, #24]
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	e841 2300 	strex	r3, r2, [r1]
 8005840:	617b      	str	r3, [r7, #20]
   return(result);
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d1e3      	bne.n	8005810 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005848:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800584c:	4619      	mov	r1, r3
 800584e:	6878      	ldr	r0, [r7, #4]
 8005850:	f000 f852 	bl	80058f8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005854:	e023      	b.n	800589e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800585a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <HAL_UART_IRQHandler+0x4ea>
 8005862:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586a:	2b00      	cmp	r3, #0
 800586c:	d003      	beq.n	8005876 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f000 fa00 	bl	8005c74 <UART_Transmit_IT>
    return;
 8005874:	e014      	b.n	80058a0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005876:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800587a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00e      	beq.n	80058a0 <HAL_UART_IRQHandler+0x514>
 8005882:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005886:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588a:	2b00      	cmp	r3, #0
 800588c:	d008      	beq.n	80058a0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800588e:	6878      	ldr	r0, [r7, #4]
 8005890:	f000 fa40 	bl	8005d14 <UART_EndTransmit_IT>
    return;
 8005894:	e004      	b.n	80058a0 <HAL_UART_IRQHandler+0x514>
    return;
 8005896:	bf00      	nop
 8005898:	e002      	b.n	80058a0 <HAL_UART_IRQHandler+0x514>
      return;
 800589a:	bf00      	nop
 800589c:	e000      	b.n	80058a0 <HAL_UART_IRQHandler+0x514>
      return;
 800589e:	bf00      	nop
  }
}
 80058a0:	37e8      	adds	r7, #232	; 0xe8
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop

080058a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058a8:	b480      	push	{r7}
 80058aa:	b083      	sub	sp, #12
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058b0:	bf00      	nop
 80058b2:	370c      	adds	r7, #12
 80058b4:	46bd      	mov	sp, r7
 80058b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ba:	4770      	bx	lr

080058bc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	460b      	mov	r3, r1
 8005902:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005904:	bf00      	nop
 8005906:	370c      	adds	r7, #12
 8005908:	46bd      	mov	sp, r7
 800590a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590e:	4770      	bx	lr

08005910 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	b090      	sub	sp, #64	; 0x40
 8005914:	af00      	add	r7, sp, #0
 8005916:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800591c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005928:	2b00      	cmp	r3, #0
 800592a:	d137      	bne.n	800599c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 800592c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592e:	2200      	movs	r2, #0
 8005930:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	3314      	adds	r3, #20
 8005938:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800593a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593c:	e853 3f00 	ldrex	r3, [r3]
 8005940:	623b      	str	r3, [r7, #32]
   return(result);
 8005942:	6a3b      	ldr	r3, [r7, #32]
 8005944:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005948:	63bb      	str	r3, [r7, #56]	; 0x38
 800594a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	3314      	adds	r3, #20
 8005950:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005952:	633a      	str	r2, [r7, #48]	; 0x30
 8005954:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005956:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005958:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800595a:	e841 2300 	strex	r3, r2, [r1]
 800595e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005962:	2b00      	cmp	r3, #0
 8005964:	d1e5      	bne.n	8005932 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	330c      	adds	r3, #12
 800596c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	e853 3f00 	ldrex	r3, [r3]
 8005974:	60fb      	str	r3, [r7, #12]
   return(result);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
 800597e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	330c      	adds	r3, #12
 8005984:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005986:	61fa      	str	r2, [r7, #28]
 8005988:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800598a:	69b9      	ldr	r1, [r7, #24]
 800598c:	69fa      	ldr	r2, [r7, #28]
 800598e:	e841 2300 	strex	r3, r2, [r1]
 8005992:	617b      	str	r3, [r7, #20]
   return(result);
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d1e5      	bne.n	8005966 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800599a:	e002      	b.n	80059a2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 800599c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800599e:	f7ff ff83 	bl	80058a8 <HAL_UART_TxCpltCallback>
}
 80059a2:	bf00      	nop
 80059a4:	3740      	adds	r7, #64	; 0x40
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b084      	sub	sp, #16
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059b6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f7ff ff7f 	bl	80058bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80059be:	bf00      	nop
 80059c0:	3710      	adds	r7, #16
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}

080059c6 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80059c6:	b580      	push	{r7, lr}
 80059c8:	b084      	sub	sp, #16
 80059ca:	af00      	add	r7, sp, #0
 80059cc:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80059ce:	2300      	movs	r3, #0
 80059d0:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059d6:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	695b      	ldr	r3, [r3, #20]
 80059de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059e2:	2b80      	cmp	r3, #128	; 0x80
 80059e4:	bf0c      	ite	eq
 80059e6:	2301      	moveq	r3, #1
 80059e8:	2300      	movne	r3, #0
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80059ee:	68bb      	ldr	r3, [r7, #8]
 80059f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b21      	cmp	r3, #33	; 0x21
 80059f8:	d108      	bne.n	8005a0c <UART_DMAError+0x46>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d005      	beq.n	8005a0c <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005a00:	68bb      	ldr	r3, [r7, #8]
 8005a02:	2200      	movs	r2, #0
 8005a04:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005a06:	68b8      	ldr	r0, [r7, #8]
 8005a08:	f000 f895 	bl	8005b36 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	695b      	ldr	r3, [r3, #20]
 8005a12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a16:	2b40      	cmp	r3, #64	; 0x40
 8005a18:	bf0c      	ite	eq
 8005a1a:	2301      	moveq	r3, #1
 8005a1c:	2300      	movne	r3, #0
 8005a1e:	b2db      	uxtb	r3, r3
 8005a20:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b22      	cmp	r3, #34	; 0x22
 8005a2c:	d108      	bne.n	8005a40 <UART_DMAError+0x7a>
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d005      	beq.n	8005a40 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	2200      	movs	r2, #0
 8005a38:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005a3a:	68b8      	ldr	r0, [r7, #8]
 8005a3c:	f000 f8a3 	bl	8005b86 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a44:	f043 0210 	orr.w	r2, r3, #16
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005a4c:	68b8      	ldr	r0, [r7, #8]
 8005a4e:	f7ff ff49 	bl	80058e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a52:	bf00      	nop
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}

08005a5a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a5a:	b580      	push	{r7, lr}
 8005a5c:	b090      	sub	sp, #64	; 0x40
 8005a5e:	af00      	add	r7, sp, #0
 8005a60:	60f8      	str	r0, [r7, #12]
 8005a62:	60b9      	str	r1, [r7, #8]
 8005a64:	603b      	str	r3, [r7, #0]
 8005a66:	4613      	mov	r3, r2
 8005a68:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a6a:	e050      	b.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d04c      	beq.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005a74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d007      	beq.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x30>
 8005a7a:	f7fb fb29 	bl	80010d0 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005a86:	429a      	cmp	r2, r3
 8005a88:	d241      	bcs.n	8005b0e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	330c      	adds	r3, #12
 8005a90:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a94:	e853 3f00 	ldrex	r3, [r3]
 8005a98:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a9c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005aa0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	330c      	adds	r3, #12
 8005aa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005aaa:	637a      	str	r2, [r7, #52]	; 0x34
 8005aac:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005aae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005ab2:	e841 2300 	strex	r3, r2, [r1]
 8005ab6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d1e5      	bne.n	8005a8a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3314      	adds	r3, #20
 8005ac4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	e853 3f00 	ldrex	r3, [r3]
 8005acc:	613b      	str	r3, [r7, #16]
   return(result);
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f023 0301 	bic.w	r3, r3, #1
 8005ad4:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	3314      	adds	r3, #20
 8005adc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ade:	623a      	str	r2, [r7, #32]
 8005ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ae2:	69f9      	ldr	r1, [r7, #28]
 8005ae4:	6a3a      	ldr	r2, [r7, #32]
 8005ae6:	e841 2300 	strex	r3, r2, [r1]
 8005aea:	61bb      	str	r3, [r7, #24]
   return(result);
 8005aec:	69bb      	ldr	r3, [r7, #24]
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d1e5      	bne.n	8005abe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2220      	movs	r2, #32
 8005af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005b0a:	2303      	movs	r3, #3
 8005b0c:	e00f      	b.n	8005b2e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	4013      	ands	r3, r2
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	bf0c      	ite	eq
 8005b1e:	2301      	moveq	r3, #1
 8005b20:	2300      	movne	r3, #0
 8005b22:	b2db      	uxtb	r3, r3
 8005b24:	461a      	mov	r2, r3
 8005b26:	79fb      	ldrb	r3, [r7, #7]
 8005b28:	429a      	cmp	r2, r3
 8005b2a:	d09f      	beq.n	8005a6c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3740      	adds	r7, #64	; 0x40
 8005b32:	46bd      	mov	sp, r7
 8005b34:	bd80      	pop	{r7, pc}

08005b36 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005b36:	b480      	push	{r7}
 8005b38:	b089      	sub	sp, #36	; 0x24
 8005b3a:	af00      	add	r7, sp, #0
 8005b3c:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	330c      	adds	r3, #12
 8005b44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	e853 3f00 	ldrex	r3, [r3]
 8005b4c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005b54:	61fb      	str	r3, [r7, #28]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	69fa      	ldr	r2, [r7, #28]
 8005b5e:	61ba      	str	r2, [r7, #24]
 8005b60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b62:	6979      	ldr	r1, [r7, #20]
 8005b64:	69ba      	ldr	r2, [r7, #24]
 8005b66:	e841 2300 	strex	r3, r2, [r1]
 8005b6a:	613b      	str	r3, [r7, #16]
   return(result);
 8005b6c:	693b      	ldr	r3, [r7, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d1e5      	bne.n	8005b3e <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2220      	movs	r2, #32
 8005b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005b7a:	bf00      	nop
 8005b7c:	3724      	adds	r7, #36	; 0x24
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b84:	4770      	bx	lr

08005b86 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b86:	b480      	push	{r7}
 8005b88:	b095      	sub	sp, #84	; 0x54
 8005b8a:	af00      	add	r7, sp, #0
 8005b8c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	330c      	adds	r3, #12
 8005b94:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b98:	e853 3f00 	ldrex	r3, [r3]
 8005b9c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ba0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ba4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	330c      	adds	r3, #12
 8005bac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005bae:	643a      	str	r2, [r7, #64]	; 0x40
 8005bb0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bb2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005bb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bb6:	e841 2300 	strex	r3, r2, [r1]
 8005bba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005bbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d1e5      	bne.n	8005b8e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	3314      	adds	r3, #20
 8005bc8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bca:	6a3b      	ldr	r3, [r7, #32]
 8005bcc:	e853 3f00 	ldrex	r3, [r3]
 8005bd0:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bd2:	69fb      	ldr	r3, [r7, #28]
 8005bd4:	f023 0301 	bic.w	r3, r3, #1
 8005bd8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	3314      	adds	r3, #20
 8005be0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005be2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005be4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005bea:	e841 2300 	strex	r3, r2, [r1]
 8005bee:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d1e5      	bne.n	8005bc2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d119      	bne.n	8005c32 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	330c      	adds	r3, #12
 8005c04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	e853 3f00 	ldrex	r3, [r3]
 8005c0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c0e:	68bb      	ldr	r3, [r7, #8]
 8005c10:	f023 0310 	bic.w	r3, r3, #16
 8005c14:	647b      	str	r3, [r7, #68]	; 0x44
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	330c      	adds	r3, #12
 8005c1c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c1e:	61ba      	str	r2, [r7, #24]
 8005c20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c22:	6979      	ldr	r1, [r7, #20]
 8005c24:	69ba      	ldr	r2, [r7, #24]
 8005c26:	e841 2300 	strex	r3, r2, [r1]
 8005c2a:	613b      	str	r3, [r7, #16]
   return(result);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d1e5      	bne.n	8005bfe <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2220      	movs	r2, #32
 8005c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2200      	movs	r2, #0
 8005c3e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005c40:	bf00      	nop
 8005c42:	3754      	adds	r7, #84	; 0x54
 8005c44:	46bd      	mov	sp, r7
 8005c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4a:	4770      	bx	lr

08005c4c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c58:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	2200      	movs	r2, #0
 8005c64:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff fe3c 	bl	80058e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c6c:	bf00      	nop
 8005c6e:	3710      	adds	r7, #16
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}

08005c74 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b085      	sub	sp, #20
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b21      	cmp	r3, #33	; 0x21
 8005c86:	d13e      	bne.n	8005d06 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	689b      	ldr	r3, [r3, #8]
 8005c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c90:	d114      	bne.n	8005cbc <UART_Transmit_IT+0x48>
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	691b      	ldr	r3, [r3, #16]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d110      	bne.n	8005cbc <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	881b      	ldrh	r3, [r3, #0]
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cae:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a1b      	ldr	r3, [r3, #32]
 8005cb4:	1c9a      	adds	r2, r3, #2
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	621a      	str	r2, [r3, #32]
 8005cba:	e008      	b.n	8005cce <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	1c59      	adds	r1, r3, #1
 8005cc2:	687a      	ldr	r2, [r7, #4]
 8005cc4:	6211      	str	r1, [r2, #32]
 8005cc6:	781a      	ldrb	r2, [r3, #0]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	4619      	mov	r1, r3
 8005cdc:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10f      	bne.n	8005d02 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	68da      	ldr	r2, [r3, #12]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cf0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	68da      	ldr	r2, [r3, #12]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005d00:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d02:	2300      	movs	r3, #0
 8005d04:	e000      	b.n	8005d08 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d06:	2302      	movs	r3, #2
  }
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	3714      	adds	r7, #20
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr

08005d14 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b082      	sub	sp, #8
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d2a:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2220      	movs	r2, #32
 8005d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f7ff fdb7 	bl	80058a8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d3a:	2300      	movs	r3, #0
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3708      	adds	r7, #8
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b08c      	sub	sp, #48	; 0x30
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b22      	cmp	r3, #34	; 0x22
 8005d56:	f040 80ab 	bne.w	8005eb0 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d62:	d117      	bne.n	8005d94 <UART_Receive_IT+0x50>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	691b      	ldr	r3, [r3, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d113      	bne.n	8005d94 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	b29b      	uxth	r3, r3
 8005d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d82:	b29a      	uxth	r2, r3
 8005d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d86:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d8c:	1c9a      	adds	r2, r3, #2
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	629a      	str	r2, [r3, #40]	; 0x28
 8005d92:	e026      	b.n	8005de2 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d98:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005da6:	d007      	beq.n	8005db8 <UART_Receive_IT+0x74>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	689b      	ldr	r3, [r3, #8]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d10a      	bne.n	8005dc6 <UART_Receive_IT+0x82>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	691b      	ldr	r3, [r3, #16]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d106      	bne.n	8005dc6 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	b2da      	uxtb	r2, r3
 8005dc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc2:	701a      	strb	r2, [r3, #0]
 8005dc4:	e008      	b.n	8005dd8 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	685b      	ldr	r3, [r3, #4]
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dd2:	b2da      	uxtb	r2, r3
 8005dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dd6:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ddc:	1c5a      	adds	r2, r3, #1
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	3b01      	subs	r3, #1
 8005dea:	b29b      	uxth	r3, r3
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	4619      	mov	r1, r3
 8005df0:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d15a      	bne.n	8005eac <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	68da      	ldr	r2, [r3, #12]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	f022 0220 	bic.w	r2, r2, #32
 8005e04:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005e14:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	695a      	ldr	r2, [r3, #20]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	f022 0201 	bic.w	r2, r2, #1
 8005e24:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	2220      	movs	r2, #32
 8005e2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e32:	2b01      	cmp	r3, #1
 8005e34:	d135      	bne.n	8005ea2 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	330c      	adds	r3, #12
 8005e42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	e853 3f00 	ldrex	r3, [r3]
 8005e4a:	613b      	str	r3, [r7, #16]
   return(result);
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	f023 0310 	bic.w	r3, r3, #16
 8005e52:	627b      	str	r3, [r7, #36]	; 0x24
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	330c      	adds	r3, #12
 8005e5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e5c:	623a      	str	r2, [r7, #32]
 8005e5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e60:	69f9      	ldr	r1, [r7, #28]
 8005e62:	6a3a      	ldr	r2, [r7, #32]
 8005e64:	e841 2300 	strex	r3, r2, [r1]
 8005e68:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e6a:	69bb      	ldr	r3, [r7, #24]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d1e5      	bne.n	8005e3c <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f003 0310 	and.w	r3, r3, #16
 8005e7a:	2b10      	cmp	r3, #16
 8005e7c:	d10a      	bne.n	8005e94 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e7e:	2300      	movs	r3, #0
 8005e80:	60fb      	str	r3, [r7, #12]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	60fb      	str	r3, [r7, #12]
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	60fb      	str	r3, [r7, #12]
 8005e92:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005e98:	4619      	mov	r1, r3
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f7ff fd2c 	bl	80058f8 <HAL_UARTEx_RxEventCallback>
 8005ea0:	e002      	b.n	8005ea8 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff fd14 	bl	80058d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	e002      	b.n	8005eb2 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005eac:	2300      	movs	r3, #0
 8005eae:	e000      	b.n	8005eb2 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005eb0:	2302      	movs	r3, #2
  }
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3730      	adds	r7, #48	; 0x30
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ebc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ec0:	b0c0      	sub	sp, #256	; 0x100
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	691b      	ldr	r3, [r3, #16]
 8005ed0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ed8:	68d9      	ldr	r1, [r3, #12]
 8005eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ede:	681a      	ldr	r2, [r3, #0]
 8005ee0:	ea40 0301 	orr.w	r3, r0, r1
 8005ee4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005eea:	689a      	ldr	r2, [r3, #8]
 8005eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	431a      	orrs	r2, r3
 8005ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ef8:	695b      	ldr	r3, [r3, #20]
 8005efa:	431a      	orrs	r2, r3
 8005efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f00:	69db      	ldr	r3, [r3, #28]
 8005f02:	4313      	orrs	r3, r2
 8005f04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	68db      	ldr	r3, [r3, #12]
 8005f10:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f14:	f021 010c 	bic.w	r1, r1, #12
 8005f18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f1c:	681a      	ldr	r2, [r3, #0]
 8005f1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f22:	430b      	orrs	r3, r1
 8005f24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	695b      	ldr	r3, [r3, #20]
 8005f2e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f36:	6999      	ldr	r1, [r3, #24]
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	ea40 0301 	orr.w	r3, r0, r1
 8005f42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	4b8f      	ldr	r3, [pc, #572]	; (8006188 <UART_SetConfig+0x2cc>)
 8005f4c:	429a      	cmp	r2, r3
 8005f4e:	d005      	beq.n	8005f5c <UART_SetConfig+0xa0>
 8005f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	4b8d      	ldr	r3, [pc, #564]	; (800618c <UART_SetConfig+0x2d0>)
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d104      	bne.n	8005f66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f5c:	f7ff f8a4 	bl	80050a8 <HAL_RCC_GetPCLK2Freq>
 8005f60:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f64:	e003      	b.n	8005f6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f66:	f7ff f88b 	bl	8005080 <HAL_RCC_GetPCLK1Freq>
 8005f6a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f72:	69db      	ldr	r3, [r3, #28]
 8005f74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005f78:	f040 810c 	bne.w	8006194 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f80:	2200      	movs	r2, #0
 8005f82:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005f86:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005f8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005f8e:	4622      	mov	r2, r4
 8005f90:	462b      	mov	r3, r5
 8005f92:	1891      	adds	r1, r2, r2
 8005f94:	65b9      	str	r1, [r7, #88]	; 0x58
 8005f96:	415b      	adcs	r3, r3
 8005f98:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005f9e:	4621      	mov	r1, r4
 8005fa0:	eb12 0801 	adds.w	r8, r2, r1
 8005fa4:	4629      	mov	r1, r5
 8005fa6:	eb43 0901 	adc.w	r9, r3, r1
 8005faa:	f04f 0200 	mov.w	r2, #0
 8005fae:	f04f 0300 	mov.w	r3, #0
 8005fb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fbe:	4690      	mov	r8, r2
 8005fc0:	4699      	mov	r9, r3
 8005fc2:	4623      	mov	r3, r4
 8005fc4:	eb18 0303 	adds.w	r3, r8, r3
 8005fc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005fcc:	462b      	mov	r3, r5
 8005fce:	eb49 0303 	adc.w	r3, r9, r3
 8005fd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005fd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005fe2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005fe6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005fea:	460b      	mov	r3, r1
 8005fec:	18db      	adds	r3, r3, r3
 8005fee:	653b      	str	r3, [r7, #80]	; 0x50
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	eb42 0303 	adc.w	r3, r2, r3
 8005ff6:	657b      	str	r3, [r7, #84]	; 0x54
 8005ff8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ffc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006000:	f7fa f93e 	bl	8000280 <__aeabi_uldivmod>
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4b61      	ldr	r3, [pc, #388]	; (8006190 <UART_SetConfig+0x2d4>)
 800600a:	fba3 2302 	umull	r2, r3, r3, r2
 800600e:	095b      	lsrs	r3, r3, #5
 8006010:	011c      	lsls	r4, r3, #4
 8006012:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006016:	2200      	movs	r2, #0
 8006018:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800601c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006020:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006024:	4642      	mov	r2, r8
 8006026:	464b      	mov	r3, r9
 8006028:	1891      	adds	r1, r2, r2
 800602a:	64b9      	str	r1, [r7, #72]	; 0x48
 800602c:	415b      	adcs	r3, r3
 800602e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006030:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006034:	4641      	mov	r1, r8
 8006036:	eb12 0a01 	adds.w	sl, r2, r1
 800603a:	4649      	mov	r1, r9
 800603c:	eb43 0b01 	adc.w	fp, r3, r1
 8006040:	f04f 0200 	mov.w	r2, #0
 8006044:	f04f 0300 	mov.w	r3, #0
 8006048:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800604c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006050:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006054:	4692      	mov	sl, r2
 8006056:	469b      	mov	fp, r3
 8006058:	4643      	mov	r3, r8
 800605a:	eb1a 0303 	adds.w	r3, sl, r3
 800605e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006062:	464b      	mov	r3, r9
 8006064:	eb4b 0303 	adc.w	r3, fp, r3
 8006068:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800606c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006070:	685b      	ldr	r3, [r3, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006078:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800607c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006080:	460b      	mov	r3, r1
 8006082:	18db      	adds	r3, r3, r3
 8006084:	643b      	str	r3, [r7, #64]	; 0x40
 8006086:	4613      	mov	r3, r2
 8006088:	eb42 0303 	adc.w	r3, r2, r3
 800608c:	647b      	str	r3, [r7, #68]	; 0x44
 800608e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006092:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006096:	f7fa f8f3 	bl	8000280 <__aeabi_uldivmod>
 800609a:	4602      	mov	r2, r0
 800609c:	460b      	mov	r3, r1
 800609e:	4611      	mov	r1, r2
 80060a0:	4b3b      	ldr	r3, [pc, #236]	; (8006190 <UART_SetConfig+0x2d4>)
 80060a2:	fba3 2301 	umull	r2, r3, r3, r1
 80060a6:	095b      	lsrs	r3, r3, #5
 80060a8:	2264      	movs	r2, #100	; 0x64
 80060aa:	fb02 f303 	mul.w	r3, r2, r3
 80060ae:	1acb      	subs	r3, r1, r3
 80060b0:	00db      	lsls	r3, r3, #3
 80060b2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80060b6:	4b36      	ldr	r3, [pc, #216]	; (8006190 <UART_SetConfig+0x2d4>)
 80060b8:	fba3 2302 	umull	r2, r3, r3, r2
 80060bc:	095b      	lsrs	r3, r3, #5
 80060be:	005b      	lsls	r3, r3, #1
 80060c0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060c4:	441c      	add	r4, r3
 80060c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060ca:	2200      	movs	r2, #0
 80060cc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80060d0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80060d4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80060d8:	4642      	mov	r2, r8
 80060da:	464b      	mov	r3, r9
 80060dc:	1891      	adds	r1, r2, r2
 80060de:	63b9      	str	r1, [r7, #56]	; 0x38
 80060e0:	415b      	adcs	r3, r3
 80060e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80060e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80060e8:	4641      	mov	r1, r8
 80060ea:	1851      	adds	r1, r2, r1
 80060ec:	6339      	str	r1, [r7, #48]	; 0x30
 80060ee:	4649      	mov	r1, r9
 80060f0:	414b      	adcs	r3, r1
 80060f2:	637b      	str	r3, [r7, #52]	; 0x34
 80060f4:	f04f 0200 	mov.w	r2, #0
 80060f8:	f04f 0300 	mov.w	r3, #0
 80060fc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006100:	4659      	mov	r1, fp
 8006102:	00cb      	lsls	r3, r1, #3
 8006104:	4651      	mov	r1, sl
 8006106:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800610a:	4651      	mov	r1, sl
 800610c:	00ca      	lsls	r2, r1, #3
 800610e:	4610      	mov	r0, r2
 8006110:	4619      	mov	r1, r3
 8006112:	4603      	mov	r3, r0
 8006114:	4642      	mov	r2, r8
 8006116:	189b      	adds	r3, r3, r2
 8006118:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800611c:	464b      	mov	r3, r9
 800611e:	460a      	mov	r2, r1
 8006120:	eb42 0303 	adc.w	r3, r2, r3
 8006124:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	2200      	movs	r2, #0
 8006130:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006134:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006138:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800613c:	460b      	mov	r3, r1
 800613e:	18db      	adds	r3, r3, r3
 8006140:	62bb      	str	r3, [r7, #40]	; 0x28
 8006142:	4613      	mov	r3, r2
 8006144:	eb42 0303 	adc.w	r3, r2, r3
 8006148:	62fb      	str	r3, [r7, #44]	; 0x2c
 800614a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800614e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006152:	f7fa f895 	bl	8000280 <__aeabi_uldivmod>
 8006156:	4602      	mov	r2, r0
 8006158:	460b      	mov	r3, r1
 800615a:	4b0d      	ldr	r3, [pc, #52]	; (8006190 <UART_SetConfig+0x2d4>)
 800615c:	fba3 1302 	umull	r1, r3, r3, r2
 8006160:	095b      	lsrs	r3, r3, #5
 8006162:	2164      	movs	r1, #100	; 0x64
 8006164:	fb01 f303 	mul.w	r3, r1, r3
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	00db      	lsls	r3, r3, #3
 800616c:	3332      	adds	r3, #50	; 0x32
 800616e:	4a08      	ldr	r2, [pc, #32]	; (8006190 <UART_SetConfig+0x2d4>)
 8006170:	fba2 2303 	umull	r2, r3, r2, r3
 8006174:	095b      	lsrs	r3, r3, #5
 8006176:	f003 0207 	and.w	r2, r3, #7
 800617a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4422      	add	r2, r4
 8006182:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006184:	e105      	b.n	8006392 <UART_SetConfig+0x4d6>
 8006186:	bf00      	nop
 8006188:	40011000 	.word	0x40011000
 800618c:	40011400 	.word	0x40011400
 8006190:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006198:	2200      	movs	r2, #0
 800619a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800619e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80061a2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80061a6:	4642      	mov	r2, r8
 80061a8:	464b      	mov	r3, r9
 80061aa:	1891      	adds	r1, r2, r2
 80061ac:	6239      	str	r1, [r7, #32]
 80061ae:	415b      	adcs	r3, r3
 80061b0:	627b      	str	r3, [r7, #36]	; 0x24
 80061b2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061b6:	4641      	mov	r1, r8
 80061b8:	1854      	adds	r4, r2, r1
 80061ba:	4649      	mov	r1, r9
 80061bc:	eb43 0501 	adc.w	r5, r3, r1
 80061c0:	f04f 0200 	mov.w	r2, #0
 80061c4:	f04f 0300 	mov.w	r3, #0
 80061c8:	00eb      	lsls	r3, r5, #3
 80061ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061ce:	00e2      	lsls	r2, r4, #3
 80061d0:	4614      	mov	r4, r2
 80061d2:	461d      	mov	r5, r3
 80061d4:	4643      	mov	r3, r8
 80061d6:	18e3      	adds	r3, r4, r3
 80061d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80061dc:	464b      	mov	r3, r9
 80061de:	eb45 0303 	adc.w	r3, r5, r3
 80061e2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80061e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061f2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80061f6:	f04f 0200 	mov.w	r2, #0
 80061fa:	f04f 0300 	mov.w	r3, #0
 80061fe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006202:	4629      	mov	r1, r5
 8006204:	008b      	lsls	r3, r1, #2
 8006206:	4621      	mov	r1, r4
 8006208:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800620c:	4621      	mov	r1, r4
 800620e:	008a      	lsls	r2, r1, #2
 8006210:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006214:	f7fa f834 	bl	8000280 <__aeabi_uldivmod>
 8006218:	4602      	mov	r2, r0
 800621a:	460b      	mov	r3, r1
 800621c:	4b60      	ldr	r3, [pc, #384]	; (80063a0 <UART_SetConfig+0x4e4>)
 800621e:	fba3 2302 	umull	r2, r3, r3, r2
 8006222:	095b      	lsrs	r3, r3, #5
 8006224:	011c      	lsls	r4, r3, #4
 8006226:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800622a:	2200      	movs	r2, #0
 800622c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006230:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006234:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006238:	4642      	mov	r2, r8
 800623a:	464b      	mov	r3, r9
 800623c:	1891      	adds	r1, r2, r2
 800623e:	61b9      	str	r1, [r7, #24]
 8006240:	415b      	adcs	r3, r3
 8006242:	61fb      	str	r3, [r7, #28]
 8006244:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006248:	4641      	mov	r1, r8
 800624a:	1851      	adds	r1, r2, r1
 800624c:	6139      	str	r1, [r7, #16]
 800624e:	4649      	mov	r1, r9
 8006250:	414b      	adcs	r3, r1
 8006252:	617b      	str	r3, [r7, #20]
 8006254:	f04f 0200 	mov.w	r2, #0
 8006258:	f04f 0300 	mov.w	r3, #0
 800625c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006260:	4659      	mov	r1, fp
 8006262:	00cb      	lsls	r3, r1, #3
 8006264:	4651      	mov	r1, sl
 8006266:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800626a:	4651      	mov	r1, sl
 800626c:	00ca      	lsls	r2, r1, #3
 800626e:	4610      	mov	r0, r2
 8006270:	4619      	mov	r1, r3
 8006272:	4603      	mov	r3, r0
 8006274:	4642      	mov	r2, r8
 8006276:	189b      	adds	r3, r3, r2
 8006278:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800627c:	464b      	mov	r3, r9
 800627e:	460a      	mov	r2, r1
 8006280:	eb42 0303 	adc.w	r3, r2, r3
 8006284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	2200      	movs	r2, #0
 8006290:	67bb      	str	r3, [r7, #120]	; 0x78
 8006292:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006294:	f04f 0200 	mov.w	r2, #0
 8006298:	f04f 0300 	mov.w	r3, #0
 800629c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80062a0:	4649      	mov	r1, r9
 80062a2:	008b      	lsls	r3, r1, #2
 80062a4:	4641      	mov	r1, r8
 80062a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062aa:	4641      	mov	r1, r8
 80062ac:	008a      	lsls	r2, r1, #2
 80062ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80062b2:	f7f9 ffe5 	bl	8000280 <__aeabi_uldivmod>
 80062b6:	4602      	mov	r2, r0
 80062b8:	460b      	mov	r3, r1
 80062ba:	4b39      	ldr	r3, [pc, #228]	; (80063a0 <UART_SetConfig+0x4e4>)
 80062bc:	fba3 1302 	umull	r1, r3, r3, r2
 80062c0:	095b      	lsrs	r3, r3, #5
 80062c2:	2164      	movs	r1, #100	; 0x64
 80062c4:	fb01 f303 	mul.w	r3, r1, r3
 80062c8:	1ad3      	subs	r3, r2, r3
 80062ca:	011b      	lsls	r3, r3, #4
 80062cc:	3332      	adds	r3, #50	; 0x32
 80062ce:	4a34      	ldr	r2, [pc, #208]	; (80063a0 <UART_SetConfig+0x4e4>)
 80062d0:	fba2 2303 	umull	r2, r3, r2, r3
 80062d4:	095b      	lsrs	r3, r3, #5
 80062d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80062da:	441c      	add	r4, r3
 80062dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062e0:	2200      	movs	r2, #0
 80062e2:	673b      	str	r3, [r7, #112]	; 0x70
 80062e4:	677a      	str	r2, [r7, #116]	; 0x74
 80062e6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80062ea:	4642      	mov	r2, r8
 80062ec:	464b      	mov	r3, r9
 80062ee:	1891      	adds	r1, r2, r2
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	415b      	adcs	r3, r3
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80062fa:	4641      	mov	r1, r8
 80062fc:	1851      	adds	r1, r2, r1
 80062fe:	6039      	str	r1, [r7, #0]
 8006300:	4649      	mov	r1, r9
 8006302:	414b      	adcs	r3, r1
 8006304:	607b      	str	r3, [r7, #4]
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006312:	4659      	mov	r1, fp
 8006314:	00cb      	lsls	r3, r1, #3
 8006316:	4651      	mov	r1, sl
 8006318:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800631c:	4651      	mov	r1, sl
 800631e:	00ca      	lsls	r2, r1, #3
 8006320:	4610      	mov	r0, r2
 8006322:	4619      	mov	r1, r3
 8006324:	4603      	mov	r3, r0
 8006326:	4642      	mov	r2, r8
 8006328:	189b      	adds	r3, r3, r2
 800632a:	66bb      	str	r3, [r7, #104]	; 0x68
 800632c:	464b      	mov	r3, r9
 800632e:	460a      	mov	r2, r1
 8006330:	eb42 0303 	adc.w	r3, r2, r3
 8006334:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	663b      	str	r3, [r7, #96]	; 0x60
 8006340:	667a      	str	r2, [r7, #100]	; 0x64
 8006342:	f04f 0200 	mov.w	r2, #0
 8006346:	f04f 0300 	mov.w	r3, #0
 800634a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800634e:	4649      	mov	r1, r9
 8006350:	008b      	lsls	r3, r1, #2
 8006352:	4641      	mov	r1, r8
 8006354:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006358:	4641      	mov	r1, r8
 800635a:	008a      	lsls	r2, r1, #2
 800635c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006360:	f7f9 ff8e 	bl	8000280 <__aeabi_uldivmod>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4b0d      	ldr	r3, [pc, #52]	; (80063a0 <UART_SetConfig+0x4e4>)
 800636a:	fba3 1302 	umull	r1, r3, r3, r2
 800636e:	095b      	lsrs	r3, r3, #5
 8006370:	2164      	movs	r1, #100	; 0x64
 8006372:	fb01 f303 	mul.w	r3, r1, r3
 8006376:	1ad3      	subs	r3, r2, r3
 8006378:	011b      	lsls	r3, r3, #4
 800637a:	3332      	adds	r3, #50	; 0x32
 800637c:	4a08      	ldr	r2, [pc, #32]	; (80063a0 <UART_SetConfig+0x4e4>)
 800637e:	fba2 2303 	umull	r2, r3, r2, r3
 8006382:	095b      	lsrs	r3, r3, #5
 8006384:	f003 020f 	and.w	r2, r3, #15
 8006388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	4422      	add	r2, r4
 8006390:	609a      	str	r2, [r3, #8]
}
 8006392:	bf00      	nop
 8006394:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006398:	46bd      	mov	sp, r7
 800639a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800639e:	bf00      	nop
 80063a0:	51eb851f 	.word	0x51eb851f

080063a4 <OV7670_Init>:
const unsigned char OV7670_LIGHT_MODE_HOME[][2] = { { 0xff, 0x00 },
		{ 0xc7, 0x40 }, { 0xcc, 0x42 }, { 0xcd, 0x3f }, { 0xce, 0x71 }, { 0xff,
				0xff } };


void OV7670_Init(I2C_HandleTypeDef *p_hi2c, DCMI_HandleTypeDef *p_hdcmi) {
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	6078      	str	r0, [r7, #4]
 80063ac:	6039      	str	r1, [r7, #0]
	phi2c = p_hi2c;
 80063ae:	4a1d      	ldr	r2, [pc, #116]	; (8006424 <OV7670_Init+0x80>)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6013      	str	r3, [r2, #0]
	phdcmi = p_hdcmi;
 80063b4:	4a1c      	ldr	r2, [pc, #112]	; (8006428 <OV7670_Init+0x84>)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	6013      	str	r3, [r2, #0]

	// Hardware reset
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 80063ba:	2200      	movs	r2, #0
 80063bc:	2180      	movs	r1, #128	; 0x80
 80063be:	481b      	ldr	r0, [pc, #108]	; (800642c <OV7670_Init+0x88>)
 80063c0:	f7fd fa16 	bl	80037f0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80063c4:	2064      	movs	r0, #100	; 0x64
 80063c6:	f7fa fe8f 	bl	80010e8 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 80063ca:	2201      	movs	r2, #1
 80063cc:	2180      	movs	r1, #128	; 0x80
 80063ce:	4817      	ldr	r0, [pc, #92]	; (800642c <OV7670_Init+0x88>)
 80063d0:	f7fd fa0e 	bl	80037f0 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80063d4:	2064      	movs	r0, #100	; 0x64
 80063d6:	f7fa fe87 	bl	80010e8 <HAL_Delay>

	// Software reset: reset all registers to default values
	SCCB_Write(0xff, 0x01);
 80063da:	2101      	movs	r1, #1
 80063dc:	20ff      	movs	r0, #255	; 0xff
 80063de:	f000 f965 	bl	80066ac <SCCB_Write>
	SCCB_Write(0x12, 0x80);
 80063e2:	2180      	movs	r1, #128	; 0x80
 80063e4:	2012      	movs	r0, #18
 80063e6:	f000 f961 	bl	80066ac <SCCB_Write>
	HAL_Delay(100);
 80063ea:	2064      	movs	r0, #100	; 0x64
 80063ec:	f7fa fe7c 	bl	80010e8 <HAL_Delay>

#ifdef DEBUG
	uint8_t pid;
	uint8_t ver;
	SCCB_Read(0x0a, &pid);  // pid value is 0x26
 80063f0:	f107 030f 	add.w	r3, r7, #15
 80063f4:	4619      	mov	r1, r3
 80063f6:	200a      	movs	r0, #10
 80063f8:	f000 f988 	bl	800670c <SCCB_Read>
	SCCB_Read(0x0b, &ver);  // ver value is 0x42
 80063fc:	f107 030e 	add.w	r3, r7, #14
 8006400:	4619      	mov	r1, r3
 8006402:	200b      	movs	r0, #11
 8006404:	f000 f982 	bl	800670c <SCCB_Read>
	my_printf("PID: 0x%x, VER: 0x%x\n", pid, ver);
 8006408:	7bfb      	ldrb	r3, [r7, #15]
 800640a:	4619      	mov	r1, r3
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	461a      	mov	r2, r3
 8006410:	4807      	ldr	r0, [pc, #28]	; (8006430 <OV7670_Init+0x8c>)
 8006412:	f7fa f905 	bl	8000620 <my_printf>
#endif

	// Stop DCMI clear buffer
	OV7670_StopDCMI();
 8006416:	f000 f915 	bl	8006644 <OV7670_StopDCMI>
}
 800641a:	bf00      	nop
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
 8006422:	bf00      	nop
 8006424:	20003ee0 	.word	0x20003ee0
 8006428:	20003ee4 	.word	0x20003ee4
 800642c:	40021000 	.word	0x40021000
 8006430:	08007144 	.word	0x08007144

08006434 <OV7670_ResolutionOptions>:

void OV7670_ResolutionOptions(uint16_t opt) {
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	4603      	mov	r3, r0
 800643c:	80fb      	strh	r3, [r7, #6]
	switch (opt) {
 800643e:	88fb      	ldrh	r3, [r7, #6]
 8006440:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006444:	4293      	cmp	r3, r2
 8006446:	d037      	beq.n	80064b8 <OV7670_ResolutionOptions+0x84>
 8006448:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800644c:	da38      	bge.n	80064c0 <OV7670_ResolutionOptions+0x8c>
 800644e:	f24b 12df 	movw	r2, #45535	; 0xb1df
 8006452:	4293      	cmp	r3, r2
 8006454:	d02c      	beq.n	80064b0 <OV7670_ResolutionOptions+0x7c>
 8006456:	f24b 12df 	movw	r2, #45535	; 0xb1df
 800645a:	4293      	cmp	r3, r2
 800645c:	dc30      	bgt.n	80064c0 <OV7670_ResolutionOptions+0x8c>
 800645e:	f246 32bf 	movw	r2, #25535	; 0x63bf
 8006462:	4293      	cmp	r3, r2
 8006464:	d020      	beq.n	80064a8 <OV7670_ResolutionOptions+0x74>
 8006466:	f246 32bf 	movw	r2, #25535	; 0x63bf
 800646a:	4293      	cmp	r3, r2
 800646c:	dc28      	bgt.n	80064c0 <OV7670_ResolutionOptions+0x8c>
 800646e:	f643 42af 	movw	r2, #15535	; 0x3caf
 8006472:	4293      	cmp	r3, r2
 8006474:	d014      	beq.n	80064a0 <OV7670_ResolutionOptions+0x6c>
 8006476:	f643 42af 	movw	r2, #15535	; 0x3caf
 800647a:	4293      	cmp	r3, r2
 800647c:	dc20      	bgt.n	80064c0 <OV7670_ResolutionOptions+0x8c>
 800647e:	f643 42ad 	movw	r2, #15533	; 0x3cad
 8006482:	4293      	cmp	r3, r2
 8006484:	d004      	beq.n	8006490 <OV7670_ResolutionOptions+0x5c>
 8006486:	f643 42ae 	movw	r2, #15534	; 0x3cae
 800648a:	4293      	cmp	r3, r2
 800648c:	d004      	beq.n	8006498 <OV7670_ResolutionOptions+0x64>
 800648e:	e017      	b.n	80064c0 <OV7670_ResolutionOptions+0x8c>
	case 15533:
		OV7670_ResolutionConfiguration(0);
 8006490:	2000      	movs	r0, #0
 8006492:	f000 f81d 	bl	80064d0 <OV7670_ResolutionConfiguration>
		break;
 8006496:	e017      	b.n	80064c8 <OV7670_ResolutionOptions+0x94>
	case 15534:
		OV7670_ResolutionConfiguration(1);
 8006498:	2001      	movs	r0, #1
 800649a:	f000 f819 	bl	80064d0 <OV7670_ResolutionConfiguration>
		break;
 800649e:	e013      	b.n	80064c8 <OV7670_ResolutionOptions+0x94>
	case 15535:
		OV7670_ResolutionConfiguration(2);
 80064a0:	2002      	movs	r0, #2
 80064a2:	f000 f815 	bl	80064d0 <OV7670_ResolutionConfiguration>
		break;
 80064a6:	e00f      	b.n	80064c8 <OV7670_ResolutionOptions+0x94>
	case 25535:
		OV7670_ResolutionConfiguration(3);
 80064a8:	2003      	movs	r0, #3
 80064aa:	f000 f811 	bl	80064d0 <OV7670_ResolutionConfiguration>
		break;
 80064ae:	e00b      	b.n	80064c8 <OV7670_ResolutionOptions+0x94>
	case 45535:
		OV7670_ResolutionConfiguration(4);
 80064b0:	2004      	movs	r0, #4
 80064b2:	f000 f80d 	bl	80064d0 <OV7670_ResolutionConfiguration>
		break;
 80064b6:	e007      	b.n	80064c8 <OV7670_ResolutionOptions+0x94>
	case 65535:
		OV7670_ResolutionConfiguration(5);
 80064b8:	2005      	movs	r0, #5
 80064ba:	f000 f809 	bl	80064d0 <OV7670_ResolutionConfiguration>
		break;
 80064be:	e003      	b.n	80064c8 <OV7670_ResolutionOptions+0x94>
	default:
		OV7670_ResolutionConfiguration(1);
 80064c0:	2001      	movs	r0, #1
 80064c2:	f000 f805 	bl	80064d0 <OV7670_ResolutionConfiguration>
		break;
 80064c6:	bf00      	nop
	}

}
 80064c8:	bf00      	nop
 80064ca:	3708      	adds	r7, #8
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <OV7670_ResolutionConfiguration>:

void OV7670_ResolutionConfiguration(short opt) {
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b082      	sub	sp, #8
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	4603      	mov	r3, r0
 80064d8:	80fb      	strh	r3, [r7, #6]
#ifdef DEBUG
	my_printf("Starting resolution choice \r\n");
 80064da:	4828      	ldr	r0, [pc, #160]	; (800657c <OV7670_ResolutionConfiguration+0xac>)
 80064dc:	f7fa f8a0 	bl	8000620 <my_printf>
#endif
	OV7670_Configuration(OV7670_JPEG_INIT);
 80064e0:	4827      	ldr	r0, [pc, #156]	; (8006580 <OV7670_ResolutionConfiguration+0xb0>)
 80064e2:	f000 f861 	bl	80065a8 <OV7670_Configuration>
	OV7670_Configuration(OV7670_YUV422);
 80064e6:	4827      	ldr	r0, [pc, #156]	; (8006584 <OV7670_ResolutionConfiguration+0xb4>)
 80064e8:	f000 f85e 	bl	80065a8 <OV7670_Configuration>
	OV7670_Configuration(OV7670_JPEG);
 80064ec:	4826      	ldr	r0, [pc, #152]	; (8006588 <OV7670_ResolutionConfiguration+0xb8>)
 80064ee:	f000 f85b 	bl	80065a8 <OV7670_Configuration>
	HAL_Delay(10);
 80064f2:	200a      	movs	r0, #10
 80064f4:	f7fa fdf8 	bl	80010e8 <HAL_Delay>
	SCCB_Write(0xff, 0x01);
 80064f8:	2101      	movs	r1, #1
 80064fa:	20ff      	movs	r0, #255	; 0xff
 80064fc:	f000 f8d6 	bl	80066ac <SCCB_Write>
	HAL_Delay(10);
 8006500:	200a      	movs	r0, #10
 8006502:	f7fa fdf1 	bl	80010e8 <HAL_Delay>
	SCCB_Write(0x15, 0x00);
 8006506:	2100      	movs	r1, #0
 8006508:	2015      	movs	r0, #21
 800650a:	f000 f8cf 	bl	80066ac <SCCB_Write>

	switch (opt) {
 800650e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006512:	2b05      	cmp	r3, #5
 8006514:	d826      	bhi.n	8006564 <OV7670_ResolutionConfiguration+0x94>
 8006516:	a201      	add	r2, pc, #4	; (adr r2, 800651c <OV7670_ResolutionConfiguration+0x4c>)
 8006518:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800651c:	08006535 	.word	0x08006535
 8006520:	0800653d 	.word	0x0800653d
 8006524:	08006545 	.word	0x08006545
 8006528:	0800654d 	.word	0x0800654d
 800652c:	08006555 	.word	0x08006555
 8006530:	0800655d 	.word	0x0800655d
	case 0:
		OV7670_Configuration(OV7670_160x120_JPEG);
 8006534:	4815      	ldr	r0, [pc, #84]	; (800658c <OV7670_ResolutionConfiguration+0xbc>)
 8006536:	f000 f837 	bl	80065a8 <OV7670_Configuration>
		break;
 800653a:	e017      	b.n	800656c <OV7670_ResolutionConfiguration+0x9c>
	case 1:
		OV7670_Configuration(OV7670_320x240_JPEG);
 800653c:	4814      	ldr	r0, [pc, #80]	; (8006590 <OV7670_ResolutionConfiguration+0xc0>)
 800653e:	f000 f833 	bl	80065a8 <OV7670_Configuration>
		break;
 8006542:	e013      	b.n	800656c <OV7670_ResolutionConfiguration+0x9c>
	case 2:
		OV7670_Configuration(OV7670_640x480_JPEG);
 8006544:	4813      	ldr	r0, [pc, #76]	; (8006594 <OV7670_ResolutionConfiguration+0xc4>)
 8006546:	f000 f82f 	bl	80065a8 <OV7670_Configuration>
		break;
 800654a:	e00f      	b.n	800656c <OV7670_ResolutionConfiguration+0x9c>
	case 3:
		OV7670_Configuration(OV7670_800x600_JPEG);
 800654c:	4812      	ldr	r0, [pc, #72]	; (8006598 <OV7670_ResolutionConfiguration+0xc8>)
 800654e:	f000 f82b 	bl	80065a8 <OV7670_Configuration>
		break;
 8006552:	e00b      	b.n	800656c <OV7670_ResolutionConfiguration+0x9c>
	case 4:
		OV7670_Configuration(OV7670_1024x768_JPEG);
 8006554:	4811      	ldr	r0, [pc, #68]	; (800659c <OV7670_ResolutionConfiguration+0xcc>)
 8006556:	f000 f827 	bl	80065a8 <OV7670_Configuration>
		break;
 800655a:	e007      	b.n	800656c <OV7670_ResolutionConfiguration+0x9c>
	case 5:
		OV7670_Configuration(OV7670_1280x960_JPEG);
 800655c:	4810      	ldr	r0, [pc, #64]	; (80065a0 <OV7670_ResolutionConfiguration+0xd0>)
 800655e:	f000 f823 	bl	80065a8 <OV7670_Configuration>
		break;
 8006562:	e003      	b.n	800656c <OV7670_ResolutionConfiguration+0x9c>
	default:
		OV7670_Configuration(OV7670_320x240_JPEG);
 8006564:	480a      	ldr	r0, [pc, #40]	; (8006590 <OV7670_ResolutionConfiguration+0xc0>)
 8006566:	f000 f81f 	bl	80065a8 <OV7670_Configuration>
		break;
 800656a:	bf00      	nop
	}

#ifdef DEBUG
	my_printf("Finalize configuration \r\n");
 800656c:	480d      	ldr	r0, [pc, #52]	; (80065a4 <OV7670_ResolutionConfiguration+0xd4>)
 800656e:	f7fa f857 	bl	8000620 <my_printf>
#endif
}
 8006572:	bf00      	nop
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}
 800657a:	bf00      	nop
 800657c:	0800715c 	.word	0x0800715c
 8006580:	08007214 	.word	0x08007214
 8006584:	08007394 	.word	0x08007394
 8006588:	080073a8 	.word	0x080073a8
 800658c:	080073bc 	.word	0x080073bc
 8006590:	0800740c 	.word	0x0800740c
 8006594:	0800745c 	.word	0x0800745c
 8006598:	080074b0 	.word	0x080074b0
 800659c:	08007504 	.word	0x08007504
 80065a0:	08007554 	.word	0x08007554
 80065a4:	0800717c 	.word	0x0800717c

080065a8 <OV7670_Configuration>:

void OV7670_Configuration(const unsigned char arr[][2]) {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
	unsigned short i = 0;
 80065b0:	2300      	movs	r3, #0
 80065b2:	81fb      	strh	r3, [r7, #14]
	uint8_t reg_addr, data, data_read;
	while (1) {
		reg_addr = arr[i][0];
 80065b4:	89fb      	ldrh	r3, [r7, #14]
 80065b6:	005b      	lsls	r3, r3, #1
 80065b8:	687a      	ldr	r2, [r7, #4]
 80065ba:	4413      	add	r3, r2
 80065bc:	781b      	ldrb	r3, [r3, #0]
 80065be:	737b      	strb	r3, [r7, #13]
		data = arr[i][1];
 80065c0:	89fb      	ldrh	r3, [r7, #14]
 80065c2:	005b      	lsls	r3, r3, #1
 80065c4:	687a      	ldr	r2, [r7, #4]
 80065c6:	4413      	add	r3, r2
 80065c8:	785b      	ldrb	r3, [r3, #1]
 80065ca:	733b      	strb	r3, [r7, #12]
		if (reg_addr == 0xff && data == 0xff) {
 80065cc:	7b7b      	ldrb	r3, [r7, #13]
 80065ce:	2bff      	cmp	r3, #255	; 0xff
 80065d0:	d102      	bne.n	80065d8 <OV7670_Configuration+0x30>
 80065d2:	7b3b      	ldrb	r3, [r7, #12]
 80065d4:	2bff      	cmp	r3, #255	; 0xff
 80065d6:	d02b      	beq.n	8006630 <OV7670_Configuration+0x88>
			break;
		}
		SCCB_Read(reg_addr, &data_read);
 80065d8:	f107 020b 	add.w	r2, r7, #11
 80065dc:	7b7b      	ldrb	r3, [r7, #13]
 80065de:	4611      	mov	r1, r2
 80065e0:	4618      	mov	r0, r3
 80065e2:	f000 f893 	bl	800670c <SCCB_Read>
		SCCB_Write(reg_addr, data);
 80065e6:	7b3a      	ldrb	r2, [r7, #12]
 80065e8:	7b7b      	ldrb	r3, [r7, #13]
 80065ea:	4611      	mov	r1, r2
 80065ec:	4618      	mov	r0, r3
 80065ee:	f000 f85d 	bl	80066ac <SCCB_Write>
#ifdef DEBUG
		my_printf("SCCB write: 0x%x 0x%x=>0x%x\r\n", reg_addr, data_read, data);
 80065f2:	7b79      	ldrb	r1, [r7, #13]
 80065f4:	7afb      	ldrb	r3, [r7, #11]
 80065f6:	461a      	mov	r2, r3
 80065f8:	7b3b      	ldrb	r3, [r7, #12]
 80065fa:	4810      	ldr	r0, [pc, #64]	; (800663c <OV7670_Configuration+0x94>)
 80065fc:	f7fa f810 	bl	8000620 <my_printf>
#endif
		HAL_Delay(10);
 8006600:	200a      	movs	r0, #10
 8006602:	f7fa fd71 	bl	80010e8 <HAL_Delay>
		SCCB_Read(reg_addr, &data_read);
 8006606:	f107 020b 	add.w	r2, r7, #11
 800660a:	7b7b      	ldrb	r3, [r7, #13]
 800660c:	4611      	mov	r1, r2
 800660e:	4618      	mov	r0, r3
 8006610:	f000 f87c 	bl	800670c <SCCB_Read>
		if (data != data_read) {
 8006614:	7afb      	ldrb	r3, [r7, #11]
 8006616:	7b3a      	ldrb	r2, [r7, #12]
 8006618:	429a      	cmp	r2, r3
 800661a:	d005      	beq.n	8006628 <OV7670_Configuration+0x80>
#ifdef DEBUG
			my_printf("SCCB write failure: 0x%x 0x%x\r\n", reg_addr, data_read);
 800661c:	7b7b      	ldrb	r3, [r7, #13]
 800661e:	7afa      	ldrb	r2, [r7, #11]
 8006620:	4619      	mov	r1, r3
 8006622:	4807      	ldr	r0, [pc, #28]	; (8006640 <OV7670_Configuration+0x98>)
 8006624:	f7f9 fffc 	bl	8000620 <my_printf>
#endif
		}
		i++;
 8006628:	89fb      	ldrh	r3, [r7, #14]
 800662a:	3301      	adds	r3, #1
 800662c:	81fb      	strh	r3, [r7, #14]
	while (1) {
 800662e:	e7c1      	b.n	80065b4 <OV7670_Configuration+0xc>
			break;
 8006630:	bf00      	nop
	}
}
 8006632:	bf00      	nop
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}
 800663a:	bf00      	nop
 800663c:	08007198 	.word	0x08007198
 8006640:	080071b8 	.word	0x080071b8

08006644 <OV7670_StopDCMI>:

/**
 * Stop DCMI (Clear  memory buffer)
 */
void OV7670_StopDCMI(void) {
 8006644:	b580      	push	{r7, lr}
 8006646:	af00      	add	r7, sp, #0
#ifdef DEBUG
	my_printf("DCMI has been stopped \r\n");
 8006648:	4806      	ldr	r0, [pc, #24]	; (8006664 <OV7670_StopDCMI+0x20>)
 800664a:	f7f9 ffe9 	bl	8000620 <my_printf>
#endif
	HAL_DCMI_Stop(phdcmi);
 800664e:	4b06      	ldr	r3, [pc, #24]	; (8006668 <OV7670_StopDCMI+0x24>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	4618      	mov	r0, r3
 8006654:	f7fa ff1e 	bl	8001494 <HAL_DCMI_Stop>
	HAL_Delay(10); // If you get a DCMI error (data is not received), increase value to 30.
 8006658:	200a      	movs	r0, #10
 800665a:	f7fa fd45 	bl	80010e8 <HAL_Delay>
}
 800665e:	bf00      	nop
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	080071d8 	.word	0x080071d8
 8006668:	20003ee4 	.word	0x20003ee4

0800666c <OV7670_CaptureSnapshot>:
/**
 * Executes a single reading from DCMI and returns  data as an image.
 * @param frameBuffer Table with data.
 * @param length Length of capture to be transferred.
 */
void OV7670_CaptureSnapshot(uint32_t frameBuffer, int length) {
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
	HAL_DCMI_Start_DMA(phdcmi, DCMI_MODE_SNAPSHOT, frameBuffer, length);
 8006676:	4b0c      	ldr	r3, [pc, #48]	; (80066a8 <OV7670_CaptureSnapshot+0x3c>)
 8006678:	6818      	ldr	r0, [r3, #0]
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	2102      	movs	r1, #2
 8006680:	f7fa fe68 	bl	8001354 <HAL_DCMI_Start_DMA>
	HAL_Delay(2000);
 8006684:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8006688:	f7fa fd2e 	bl	80010e8 <HAL_Delay>
	HAL_DCMI_Suspend(phdcmi);
 800668c:	4b06      	ldr	r3, [pc, #24]	; (80066a8 <OV7670_CaptureSnapshot+0x3c>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4618      	mov	r0, r3
 8006692:	f7fa ff5b 	bl	800154c <HAL_DCMI_Suspend>
	HAL_DCMI_Stop(phdcmi);
 8006696:	4b04      	ldr	r3, [pc, #16]	; (80066a8 <OV7670_CaptureSnapshot+0x3c>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	4618      	mov	r0, r3
 800669c:	f7fa fefa 	bl	8001494 <HAL_DCMI_Stop>
}
 80066a0:	bf00      	nop
 80066a2:	3708      	adds	r7, #8
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}
 80066a8:	20003ee4 	.word	0x20003ee4

080066ac <SCCB_Write>:
 * Write value to camera register.
 * @param reg_addr Address of register.
 * @param data New value.
 * @return  Operation status.
 */
short SCCB_Write(uint8_t reg_addr, uint8_t data) {
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af02      	add	r7, sp, #8
 80066b2:	4603      	mov	r3, r0
 80066b4:	460a      	mov	r2, r1
 80066b6:	71fb      	strb	r3, [r7, #7]
 80066b8:	4613      	mov	r3, r2
 80066ba:	71bb      	strb	r3, [r7, #6]
	short opertionStatus = 0;
 80066bc:	2300      	movs	r3, #0
 80066be:	81fb      	strh	r3, [r7, #14]
	uint8_t buffer[2] = { 0 };
 80066c0:	2300      	movs	r3, #0
 80066c2:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef connectionStatus;
	buffer[0] = reg_addr;
 80066c4:	79fb      	ldrb	r3, [r7, #7]
 80066c6:	723b      	strb	r3, [r7, #8]
	buffer[1] = data;
 80066c8:	79bb      	ldrb	r3, [r7, #6]
 80066ca:	727b      	strb	r3, [r7, #9]
  __ASM volatile ("cpsid i" : : : "memory");
 80066cc:	b672      	cpsid	i
}
 80066ce:	bf00      	nop
	__disable_irq();
	connectionStatus = HAL_I2C_Master_Transmit(phi2c, (uint16_t) 0x42, buffer,
 80066d0:	4b0d      	ldr	r3, [pc, #52]	; (8006708 <SCCB_Write+0x5c>)
 80066d2:	6818      	ldr	r0, [r3, #0]
 80066d4:	f107 0208 	add.w	r2, r7, #8
 80066d8:	2364      	movs	r3, #100	; 0x64
 80066da:	9300      	str	r3, [sp, #0]
 80066dc:	2302      	movs	r3, #2
 80066de:	2142      	movs	r1, #66	; 0x42
 80066e0:	f7fd f9e4 	bl	8003aac <HAL_I2C_Master_Transmit>
 80066e4:	4603      	mov	r3, r0
 80066e6:	737b      	strb	r3, [r7, #13]
			2, 100);
	if (connectionStatus == HAL_OK) {
 80066e8:	7b7b      	ldrb	r3, [r7, #13]
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d102      	bne.n	80066f4 <SCCB_Write+0x48>
		opertionStatus = 1;
 80066ee:	2301      	movs	r3, #1
 80066f0:	81fb      	strh	r3, [r7, #14]
 80066f2:	e001      	b.n	80066f8 <SCCB_Write+0x4c>
	} else {
		opertionStatus = 0;
 80066f4:	2300      	movs	r3, #0
 80066f6:	81fb      	strh	r3, [r7, #14]
  __ASM volatile ("cpsie i" : : : "memory");
 80066f8:	b662      	cpsie	i
}
 80066fa:	bf00      	nop
	}
	__enable_irq();
	return opertionStatus;
 80066fc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006700:	4618      	mov	r0, r3
 8006702:	3710      	adds	r7, #16
 8006704:	46bd      	mov	sp, r7
 8006706:	bd80      	pop	{r7, pc}
 8006708:	20003ee0 	.word	0x20003ee0

0800670c <SCCB_Read>:
 * Reading data from camera registers.
 * @param reg_addr Address of register.
 * @param pdata Value read from register.
 * @return Operation status.
 */
short SCCB_Read(uint8_t reg_addr, uint8_t *pdata) {
 800670c:	b580      	push	{r7, lr}
 800670e:	b086      	sub	sp, #24
 8006710:	af02      	add	r7, sp, #8
 8006712:	4603      	mov	r3, r0
 8006714:	6039      	str	r1, [r7, #0]
 8006716:	71fb      	strb	r3, [r7, #7]
	short opertionStatus = 0;
 8006718:	2300      	movs	r3, #0
 800671a:	81fb      	strh	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 800671c:	b672      	cpsid	i
}
 800671e:	bf00      	nop
	HAL_StatusTypeDef connectionStatus;
	__disable_irq();
	connectionStatus = HAL_I2C_Master_Transmit(phi2c, (uint16_t) 0x60,
 8006720:	4b15      	ldr	r3, [pc, #84]	; (8006778 <SCCB_Read+0x6c>)
 8006722:	6818      	ldr	r0, [r3, #0]
 8006724:	1dfa      	adds	r2, r7, #7
 8006726:	2364      	movs	r3, #100	; 0x64
 8006728:	9300      	str	r3, [sp, #0]
 800672a:	2301      	movs	r3, #1
 800672c:	2160      	movs	r1, #96	; 0x60
 800672e:	f7fd f9bd 	bl	8003aac <HAL_I2C_Master_Transmit>
 8006732:	4603      	mov	r3, r0
 8006734:	737b      	strb	r3, [r7, #13]
			&reg_addr, 1, 100);
	if (connectionStatus == HAL_OK) {
 8006736:	7b7b      	ldrb	r3, [r7, #13]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d113      	bne.n	8006764 <SCCB_Read+0x58>
		connectionStatus = HAL_I2C_Master_Receive(phi2c, (uint16_t) 0x43, pdata,
 800673c:	4b0e      	ldr	r3, [pc, #56]	; (8006778 <SCCB_Read+0x6c>)
 800673e:	6818      	ldr	r0, [r3, #0]
 8006740:	2364      	movs	r3, #100	; 0x64
 8006742:	9300      	str	r3, [sp, #0]
 8006744:	2301      	movs	r3, #1
 8006746:	683a      	ldr	r2, [r7, #0]
 8006748:	2143      	movs	r1, #67	; 0x43
 800674a:	f7fd faad 	bl	8003ca8 <HAL_I2C_Master_Receive>
 800674e:	4603      	mov	r3, r0
 8006750:	737b      	strb	r3, [r7, #13]
				1, 100);
		if (connectionStatus == HAL_OK) {
 8006752:	7b7b      	ldrb	r3, [r7, #13]
 8006754:	2b00      	cmp	r3, #0
 8006756:	d102      	bne.n	800675e <SCCB_Read+0x52>
			opertionStatus = 0;
 8006758:	2300      	movs	r3, #0
 800675a:	81fb      	strh	r3, [r7, #14]
 800675c:	e004      	b.n	8006768 <SCCB_Read+0x5c>
		} else {
			opertionStatus = 1;
 800675e:	2301      	movs	r3, #1
 8006760:	81fb      	strh	r3, [r7, #14]
 8006762:	e001      	b.n	8006768 <SCCB_Read+0x5c>
		}
	} else {
		opertionStatus = 2;
 8006764:	2302      	movs	r3, #2
 8006766:	81fb      	strh	r3, [r7, #14]
  __ASM volatile ("cpsie i" : : : "memory");
 8006768:	b662      	cpsie	i
}
 800676a:	bf00      	nop
	}
	__enable_irq();
	return opertionStatus;
 800676c:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006770:	4618      	mov	r0, r3
 8006772:	3710      	adds	r7, #16
 8006774:	46bd      	mov	sp, r7
 8006776:	bd80      	pop	{r7, pc}
 8006778:	20003ee0 	.word	0x20003ee0

0800677c <__errno>:
 800677c:	4b01      	ldr	r3, [pc, #4]	; (8006784 <__errno+0x8>)
 800677e:	6818      	ldr	r0, [r3, #0]
 8006780:	4770      	bx	lr
 8006782:	bf00      	nop
 8006784:	2000000c 	.word	0x2000000c

08006788 <__libc_init_array>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	4d0d      	ldr	r5, [pc, #52]	; (80067c0 <__libc_init_array+0x38>)
 800678c:	4c0d      	ldr	r4, [pc, #52]	; (80067c4 <__libc_init_array+0x3c>)
 800678e:	1b64      	subs	r4, r4, r5
 8006790:	10a4      	asrs	r4, r4, #2
 8006792:	2600      	movs	r6, #0
 8006794:	42a6      	cmp	r6, r4
 8006796:	d109      	bne.n	80067ac <__libc_init_array+0x24>
 8006798:	4d0b      	ldr	r5, [pc, #44]	; (80067c8 <__libc_init_array+0x40>)
 800679a:	4c0c      	ldr	r4, [pc, #48]	; (80067cc <__libc_init_array+0x44>)
 800679c:	f000 fc8e 	bl	80070bc <_init>
 80067a0:	1b64      	subs	r4, r4, r5
 80067a2:	10a4      	asrs	r4, r4, #2
 80067a4:	2600      	movs	r6, #0
 80067a6:	42a6      	cmp	r6, r4
 80067a8:	d105      	bne.n	80067b6 <__libc_init_array+0x2e>
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b0:	4798      	blx	r3
 80067b2:	3601      	adds	r6, #1
 80067b4:	e7ee      	b.n	8006794 <__libc_init_array+0xc>
 80067b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ba:	4798      	blx	r3
 80067bc:	3601      	adds	r6, #1
 80067be:	e7f2      	b.n	80067a6 <__libc_init_array+0x1e>
 80067c0:	080075e4 	.word	0x080075e4
 80067c4:	080075e4 	.word	0x080075e4
 80067c8:	080075e4 	.word	0x080075e4
 80067cc:	080075e8 	.word	0x080075e8

080067d0 <memset>:
 80067d0:	4402      	add	r2, r0
 80067d2:	4603      	mov	r3, r0
 80067d4:	4293      	cmp	r3, r2
 80067d6:	d100      	bne.n	80067da <memset+0xa>
 80067d8:	4770      	bx	lr
 80067da:	f803 1b01 	strb.w	r1, [r3], #1
 80067de:	e7f9      	b.n	80067d4 <memset+0x4>

080067e0 <_vsiprintf_r>:
 80067e0:	b500      	push	{lr}
 80067e2:	b09b      	sub	sp, #108	; 0x6c
 80067e4:	9100      	str	r1, [sp, #0]
 80067e6:	9104      	str	r1, [sp, #16]
 80067e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067ec:	9105      	str	r1, [sp, #20]
 80067ee:	9102      	str	r1, [sp, #8]
 80067f0:	4905      	ldr	r1, [pc, #20]	; (8006808 <_vsiprintf_r+0x28>)
 80067f2:	9103      	str	r1, [sp, #12]
 80067f4:	4669      	mov	r1, sp
 80067f6:	f000 f86f 	bl	80068d8 <_svfiprintf_r>
 80067fa:	9b00      	ldr	r3, [sp, #0]
 80067fc:	2200      	movs	r2, #0
 80067fe:	701a      	strb	r2, [r3, #0]
 8006800:	b01b      	add	sp, #108	; 0x6c
 8006802:	f85d fb04 	ldr.w	pc, [sp], #4
 8006806:	bf00      	nop
 8006808:	ffff0208 	.word	0xffff0208

0800680c <vsiprintf>:
 800680c:	4613      	mov	r3, r2
 800680e:	460a      	mov	r2, r1
 8006810:	4601      	mov	r1, r0
 8006812:	4802      	ldr	r0, [pc, #8]	; (800681c <vsiprintf+0x10>)
 8006814:	6800      	ldr	r0, [r0, #0]
 8006816:	f7ff bfe3 	b.w	80067e0 <_vsiprintf_r>
 800681a:	bf00      	nop
 800681c:	2000000c 	.word	0x2000000c

08006820 <__ssputs_r>:
 8006820:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006824:	688e      	ldr	r6, [r1, #8]
 8006826:	429e      	cmp	r6, r3
 8006828:	4682      	mov	sl, r0
 800682a:	460c      	mov	r4, r1
 800682c:	4690      	mov	r8, r2
 800682e:	461f      	mov	r7, r3
 8006830:	d838      	bhi.n	80068a4 <__ssputs_r+0x84>
 8006832:	898a      	ldrh	r2, [r1, #12]
 8006834:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006838:	d032      	beq.n	80068a0 <__ssputs_r+0x80>
 800683a:	6825      	ldr	r5, [r4, #0]
 800683c:	6909      	ldr	r1, [r1, #16]
 800683e:	eba5 0901 	sub.w	r9, r5, r1
 8006842:	6965      	ldr	r5, [r4, #20]
 8006844:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006848:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800684c:	3301      	adds	r3, #1
 800684e:	444b      	add	r3, r9
 8006850:	106d      	asrs	r5, r5, #1
 8006852:	429d      	cmp	r5, r3
 8006854:	bf38      	it	cc
 8006856:	461d      	movcc	r5, r3
 8006858:	0553      	lsls	r3, r2, #21
 800685a:	d531      	bpl.n	80068c0 <__ssputs_r+0xa0>
 800685c:	4629      	mov	r1, r5
 800685e:	f000 fb63 	bl	8006f28 <_malloc_r>
 8006862:	4606      	mov	r6, r0
 8006864:	b950      	cbnz	r0, 800687c <__ssputs_r+0x5c>
 8006866:	230c      	movs	r3, #12
 8006868:	f8ca 3000 	str.w	r3, [sl]
 800686c:	89a3      	ldrh	r3, [r4, #12]
 800686e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006872:	81a3      	strh	r3, [r4, #12]
 8006874:	f04f 30ff 	mov.w	r0, #4294967295
 8006878:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800687c:	6921      	ldr	r1, [r4, #16]
 800687e:	464a      	mov	r2, r9
 8006880:	f000 fabe 	bl	8006e00 <memcpy>
 8006884:	89a3      	ldrh	r3, [r4, #12]
 8006886:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800688a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800688e:	81a3      	strh	r3, [r4, #12]
 8006890:	6126      	str	r6, [r4, #16]
 8006892:	6165      	str	r5, [r4, #20]
 8006894:	444e      	add	r6, r9
 8006896:	eba5 0509 	sub.w	r5, r5, r9
 800689a:	6026      	str	r6, [r4, #0]
 800689c:	60a5      	str	r5, [r4, #8]
 800689e:	463e      	mov	r6, r7
 80068a0:	42be      	cmp	r6, r7
 80068a2:	d900      	bls.n	80068a6 <__ssputs_r+0x86>
 80068a4:	463e      	mov	r6, r7
 80068a6:	6820      	ldr	r0, [r4, #0]
 80068a8:	4632      	mov	r2, r6
 80068aa:	4641      	mov	r1, r8
 80068ac:	f000 fab6 	bl	8006e1c <memmove>
 80068b0:	68a3      	ldr	r3, [r4, #8]
 80068b2:	1b9b      	subs	r3, r3, r6
 80068b4:	60a3      	str	r3, [r4, #8]
 80068b6:	6823      	ldr	r3, [r4, #0]
 80068b8:	4433      	add	r3, r6
 80068ba:	6023      	str	r3, [r4, #0]
 80068bc:	2000      	movs	r0, #0
 80068be:	e7db      	b.n	8006878 <__ssputs_r+0x58>
 80068c0:	462a      	mov	r2, r5
 80068c2:	f000 fba5 	bl	8007010 <_realloc_r>
 80068c6:	4606      	mov	r6, r0
 80068c8:	2800      	cmp	r0, #0
 80068ca:	d1e1      	bne.n	8006890 <__ssputs_r+0x70>
 80068cc:	6921      	ldr	r1, [r4, #16]
 80068ce:	4650      	mov	r0, sl
 80068d0:	f000 fabe 	bl	8006e50 <_free_r>
 80068d4:	e7c7      	b.n	8006866 <__ssputs_r+0x46>
	...

080068d8 <_svfiprintf_r>:
 80068d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068dc:	4698      	mov	r8, r3
 80068de:	898b      	ldrh	r3, [r1, #12]
 80068e0:	061b      	lsls	r3, r3, #24
 80068e2:	b09d      	sub	sp, #116	; 0x74
 80068e4:	4607      	mov	r7, r0
 80068e6:	460d      	mov	r5, r1
 80068e8:	4614      	mov	r4, r2
 80068ea:	d50e      	bpl.n	800690a <_svfiprintf_r+0x32>
 80068ec:	690b      	ldr	r3, [r1, #16]
 80068ee:	b963      	cbnz	r3, 800690a <_svfiprintf_r+0x32>
 80068f0:	2140      	movs	r1, #64	; 0x40
 80068f2:	f000 fb19 	bl	8006f28 <_malloc_r>
 80068f6:	6028      	str	r0, [r5, #0]
 80068f8:	6128      	str	r0, [r5, #16]
 80068fa:	b920      	cbnz	r0, 8006906 <_svfiprintf_r+0x2e>
 80068fc:	230c      	movs	r3, #12
 80068fe:	603b      	str	r3, [r7, #0]
 8006900:	f04f 30ff 	mov.w	r0, #4294967295
 8006904:	e0d1      	b.n	8006aaa <_svfiprintf_r+0x1d2>
 8006906:	2340      	movs	r3, #64	; 0x40
 8006908:	616b      	str	r3, [r5, #20]
 800690a:	2300      	movs	r3, #0
 800690c:	9309      	str	r3, [sp, #36]	; 0x24
 800690e:	2320      	movs	r3, #32
 8006910:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006914:	f8cd 800c 	str.w	r8, [sp, #12]
 8006918:	2330      	movs	r3, #48	; 0x30
 800691a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006ac4 <_svfiprintf_r+0x1ec>
 800691e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006922:	f04f 0901 	mov.w	r9, #1
 8006926:	4623      	mov	r3, r4
 8006928:	469a      	mov	sl, r3
 800692a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800692e:	b10a      	cbz	r2, 8006934 <_svfiprintf_r+0x5c>
 8006930:	2a25      	cmp	r2, #37	; 0x25
 8006932:	d1f9      	bne.n	8006928 <_svfiprintf_r+0x50>
 8006934:	ebba 0b04 	subs.w	fp, sl, r4
 8006938:	d00b      	beq.n	8006952 <_svfiprintf_r+0x7a>
 800693a:	465b      	mov	r3, fp
 800693c:	4622      	mov	r2, r4
 800693e:	4629      	mov	r1, r5
 8006940:	4638      	mov	r0, r7
 8006942:	f7ff ff6d 	bl	8006820 <__ssputs_r>
 8006946:	3001      	adds	r0, #1
 8006948:	f000 80aa 	beq.w	8006aa0 <_svfiprintf_r+0x1c8>
 800694c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800694e:	445a      	add	r2, fp
 8006950:	9209      	str	r2, [sp, #36]	; 0x24
 8006952:	f89a 3000 	ldrb.w	r3, [sl]
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 80a2 	beq.w	8006aa0 <_svfiprintf_r+0x1c8>
 800695c:	2300      	movs	r3, #0
 800695e:	f04f 32ff 	mov.w	r2, #4294967295
 8006962:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006966:	f10a 0a01 	add.w	sl, sl, #1
 800696a:	9304      	str	r3, [sp, #16]
 800696c:	9307      	str	r3, [sp, #28]
 800696e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006972:	931a      	str	r3, [sp, #104]	; 0x68
 8006974:	4654      	mov	r4, sl
 8006976:	2205      	movs	r2, #5
 8006978:	f814 1b01 	ldrb.w	r1, [r4], #1
 800697c:	4851      	ldr	r0, [pc, #324]	; (8006ac4 <_svfiprintf_r+0x1ec>)
 800697e:	f7f9 fc2f 	bl	80001e0 <memchr>
 8006982:	9a04      	ldr	r2, [sp, #16]
 8006984:	b9d8      	cbnz	r0, 80069be <_svfiprintf_r+0xe6>
 8006986:	06d0      	lsls	r0, r2, #27
 8006988:	bf44      	itt	mi
 800698a:	2320      	movmi	r3, #32
 800698c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006990:	0711      	lsls	r1, r2, #28
 8006992:	bf44      	itt	mi
 8006994:	232b      	movmi	r3, #43	; 0x2b
 8006996:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800699a:	f89a 3000 	ldrb.w	r3, [sl]
 800699e:	2b2a      	cmp	r3, #42	; 0x2a
 80069a0:	d015      	beq.n	80069ce <_svfiprintf_r+0xf6>
 80069a2:	9a07      	ldr	r2, [sp, #28]
 80069a4:	4654      	mov	r4, sl
 80069a6:	2000      	movs	r0, #0
 80069a8:	f04f 0c0a 	mov.w	ip, #10
 80069ac:	4621      	mov	r1, r4
 80069ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 80069b2:	3b30      	subs	r3, #48	; 0x30
 80069b4:	2b09      	cmp	r3, #9
 80069b6:	d94e      	bls.n	8006a56 <_svfiprintf_r+0x17e>
 80069b8:	b1b0      	cbz	r0, 80069e8 <_svfiprintf_r+0x110>
 80069ba:	9207      	str	r2, [sp, #28]
 80069bc:	e014      	b.n	80069e8 <_svfiprintf_r+0x110>
 80069be:	eba0 0308 	sub.w	r3, r0, r8
 80069c2:	fa09 f303 	lsl.w	r3, r9, r3
 80069c6:	4313      	orrs	r3, r2
 80069c8:	9304      	str	r3, [sp, #16]
 80069ca:	46a2      	mov	sl, r4
 80069cc:	e7d2      	b.n	8006974 <_svfiprintf_r+0x9c>
 80069ce:	9b03      	ldr	r3, [sp, #12]
 80069d0:	1d19      	adds	r1, r3, #4
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	9103      	str	r1, [sp, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	bfbb      	ittet	lt
 80069da:	425b      	neglt	r3, r3
 80069dc:	f042 0202 	orrlt.w	r2, r2, #2
 80069e0:	9307      	strge	r3, [sp, #28]
 80069e2:	9307      	strlt	r3, [sp, #28]
 80069e4:	bfb8      	it	lt
 80069e6:	9204      	strlt	r2, [sp, #16]
 80069e8:	7823      	ldrb	r3, [r4, #0]
 80069ea:	2b2e      	cmp	r3, #46	; 0x2e
 80069ec:	d10c      	bne.n	8006a08 <_svfiprintf_r+0x130>
 80069ee:	7863      	ldrb	r3, [r4, #1]
 80069f0:	2b2a      	cmp	r3, #42	; 0x2a
 80069f2:	d135      	bne.n	8006a60 <_svfiprintf_r+0x188>
 80069f4:	9b03      	ldr	r3, [sp, #12]
 80069f6:	1d1a      	adds	r2, r3, #4
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	9203      	str	r2, [sp, #12]
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	bfb8      	it	lt
 8006a00:	f04f 33ff 	movlt.w	r3, #4294967295
 8006a04:	3402      	adds	r4, #2
 8006a06:	9305      	str	r3, [sp, #20]
 8006a08:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ad4 <_svfiprintf_r+0x1fc>
 8006a0c:	7821      	ldrb	r1, [r4, #0]
 8006a0e:	2203      	movs	r2, #3
 8006a10:	4650      	mov	r0, sl
 8006a12:	f7f9 fbe5 	bl	80001e0 <memchr>
 8006a16:	b140      	cbz	r0, 8006a2a <_svfiprintf_r+0x152>
 8006a18:	2340      	movs	r3, #64	; 0x40
 8006a1a:	eba0 000a 	sub.w	r0, r0, sl
 8006a1e:	fa03 f000 	lsl.w	r0, r3, r0
 8006a22:	9b04      	ldr	r3, [sp, #16]
 8006a24:	4303      	orrs	r3, r0
 8006a26:	3401      	adds	r4, #1
 8006a28:	9304      	str	r3, [sp, #16]
 8006a2a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a2e:	4826      	ldr	r0, [pc, #152]	; (8006ac8 <_svfiprintf_r+0x1f0>)
 8006a30:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a34:	2206      	movs	r2, #6
 8006a36:	f7f9 fbd3 	bl	80001e0 <memchr>
 8006a3a:	2800      	cmp	r0, #0
 8006a3c:	d038      	beq.n	8006ab0 <_svfiprintf_r+0x1d8>
 8006a3e:	4b23      	ldr	r3, [pc, #140]	; (8006acc <_svfiprintf_r+0x1f4>)
 8006a40:	bb1b      	cbnz	r3, 8006a8a <_svfiprintf_r+0x1b2>
 8006a42:	9b03      	ldr	r3, [sp, #12]
 8006a44:	3307      	adds	r3, #7
 8006a46:	f023 0307 	bic.w	r3, r3, #7
 8006a4a:	3308      	adds	r3, #8
 8006a4c:	9303      	str	r3, [sp, #12]
 8006a4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a50:	4433      	add	r3, r6
 8006a52:	9309      	str	r3, [sp, #36]	; 0x24
 8006a54:	e767      	b.n	8006926 <_svfiprintf_r+0x4e>
 8006a56:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a5a:	460c      	mov	r4, r1
 8006a5c:	2001      	movs	r0, #1
 8006a5e:	e7a5      	b.n	80069ac <_svfiprintf_r+0xd4>
 8006a60:	2300      	movs	r3, #0
 8006a62:	3401      	adds	r4, #1
 8006a64:	9305      	str	r3, [sp, #20]
 8006a66:	4619      	mov	r1, r3
 8006a68:	f04f 0c0a 	mov.w	ip, #10
 8006a6c:	4620      	mov	r0, r4
 8006a6e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a72:	3a30      	subs	r2, #48	; 0x30
 8006a74:	2a09      	cmp	r2, #9
 8006a76:	d903      	bls.n	8006a80 <_svfiprintf_r+0x1a8>
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d0c5      	beq.n	8006a08 <_svfiprintf_r+0x130>
 8006a7c:	9105      	str	r1, [sp, #20]
 8006a7e:	e7c3      	b.n	8006a08 <_svfiprintf_r+0x130>
 8006a80:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a84:	4604      	mov	r4, r0
 8006a86:	2301      	movs	r3, #1
 8006a88:	e7f0      	b.n	8006a6c <_svfiprintf_r+0x194>
 8006a8a:	ab03      	add	r3, sp, #12
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	462a      	mov	r2, r5
 8006a90:	4b0f      	ldr	r3, [pc, #60]	; (8006ad0 <_svfiprintf_r+0x1f8>)
 8006a92:	a904      	add	r1, sp, #16
 8006a94:	4638      	mov	r0, r7
 8006a96:	f3af 8000 	nop.w
 8006a9a:	1c42      	adds	r2, r0, #1
 8006a9c:	4606      	mov	r6, r0
 8006a9e:	d1d6      	bne.n	8006a4e <_svfiprintf_r+0x176>
 8006aa0:	89ab      	ldrh	r3, [r5, #12]
 8006aa2:	065b      	lsls	r3, r3, #25
 8006aa4:	f53f af2c 	bmi.w	8006900 <_svfiprintf_r+0x28>
 8006aa8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006aaa:	b01d      	add	sp, #116	; 0x74
 8006aac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ab0:	ab03      	add	r3, sp, #12
 8006ab2:	9300      	str	r3, [sp, #0]
 8006ab4:	462a      	mov	r2, r5
 8006ab6:	4b06      	ldr	r3, [pc, #24]	; (8006ad0 <_svfiprintf_r+0x1f8>)
 8006ab8:	a904      	add	r1, sp, #16
 8006aba:	4638      	mov	r0, r7
 8006abc:	f000 f87a 	bl	8006bb4 <_printf_i>
 8006ac0:	e7eb      	b.n	8006a9a <_svfiprintf_r+0x1c2>
 8006ac2:	bf00      	nop
 8006ac4:	080075a6 	.word	0x080075a6
 8006ac8:	080075b0 	.word	0x080075b0
 8006acc:	00000000 	.word	0x00000000
 8006ad0:	08006821 	.word	0x08006821
 8006ad4:	080075ac 	.word	0x080075ac

08006ad8 <_printf_common>:
 8006ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006adc:	4616      	mov	r6, r2
 8006ade:	4699      	mov	r9, r3
 8006ae0:	688a      	ldr	r2, [r1, #8]
 8006ae2:	690b      	ldr	r3, [r1, #16]
 8006ae4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	bfb8      	it	lt
 8006aec:	4613      	movlt	r3, r2
 8006aee:	6033      	str	r3, [r6, #0]
 8006af0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006af4:	4607      	mov	r7, r0
 8006af6:	460c      	mov	r4, r1
 8006af8:	b10a      	cbz	r2, 8006afe <_printf_common+0x26>
 8006afa:	3301      	adds	r3, #1
 8006afc:	6033      	str	r3, [r6, #0]
 8006afe:	6823      	ldr	r3, [r4, #0]
 8006b00:	0699      	lsls	r1, r3, #26
 8006b02:	bf42      	ittt	mi
 8006b04:	6833      	ldrmi	r3, [r6, #0]
 8006b06:	3302      	addmi	r3, #2
 8006b08:	6033      	strmi	r3, [r6, #0]
 8006b0a:	6825      	ldr	r5, [r4, #0]
 8006b0c:	f015 0506 	ands.w	r5, r5, #6
 8006b10:	d106      	bne.n	8006b20 <_printf_common+0x48>
 8006b12:	f104 0a19 	add.w	sl, r4, #25
 8006b16:	68e3      	ldr	r3, [r4, #12]
 8006b18:	6832      	ldr	r2, [r6, #0]
 8006b1a:	1a9b      	subs	r3, r3, r2
 8006b1c:	42ab      	cmp	r3, r5
 8006b1e:	dc26      	bgt.n	8006b6e <_printf_common+0x96>
 8006b20:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b24:	1e13      	subs	r3, r2, #0
 8006b26:	6822      	ldr	r2, [r4, #0]
 8006b28:	bf18      	it	ne
 8006b2a:	2301      	movne	r3, #1
 8006b2c:	0692      	lsls	r2, r2, #26
 8006b2e:	d42b      	bmi.n	8006b88 <_printf_common+0xb0>
 8006b30:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b34:	4649      	mov	r1, r9
 8006b36:	4638      	mov	r0, r7
 8006b38:	47c0      	blx	r8
 8006b3a:	3001      	adds	r0, #1
 8006b3c:	d01e      	beq.n	8006b7c <_printf_common+0xa4>
 8006b3e:	6823      	ldr	r3, [r4, #0]
 8006b40:	68e5      	ldr	r5, [r4, #12]
 8006b42:	6832      	ldr	r2, [r6, #0]
 8006b44:	f003 0306 	and.w	r3, r3, #6
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	bf08      	it	eq
 8006b4c:	1aad      	subeq	r5, r5, r2
 8006b4e:	68a3      	ldr	r3, [r4, #8]
 8006b50:	6922      	ldr	r2, [r4, #16]
 8006b52:	bf0c      	ite	eq
 8006b54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b58:	2500      	movne	r5, #0
 8006b5a:	4293      	cmp	r3, r2
 8006b5c:	bfc4      	itt	gt
 8006b5e:	1a9b      	subgt	r3, r3, r2
 8006b60:	18ed      	addgt	r5, r5, r3
 8006b62:	2600      	movs	r6, #0
 8006b64:	341a      	adds	r4, #26
 8006b66:	42b5      	cmp	r5, r6
 8006b68:	d11a      	bne.n	8006ba0 <_printf_common+0xc8>
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	e008      	b.n	8006b80 <_printf_common+0xa8>
 8006b6e:	2301      	movs	r3, #1
 8006b70:	4652      	mov	r2, sl
 8006b72:	4649      	mov	r1, r9
 8006b74:	4638      	mov	r0, r7
 8006b76:	47c0      	blx	r8
 8006b78:	3001      	adds	r0, #1
 8006b7a:	d103      	bne.n	8006b84 <_printf_common+0xac>
 8006b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b84:	3501      	adds	r5, #1
 8006b86:	e7c6      	b.n	8006b16 <_printf_common+0x3e>
 8006b88:	18e1      	adds	r1, r4, r3
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	2030      	movs	r0, #48	; 0x30
 8006b8e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b92:	4422      	add	r2, r4
 8006b94:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b98:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b9c:	3302      	adds	r3, #2
 8006b9e:	e7c7      	b.n	8006b30 <_printf_common+0x58>
 8006ba0:	2301      	movs	r3, #1
 8006ba2:	4622      	mov	r2, r4
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	4638      	mov	r0, r7
 8006ba8:	47c0      	blx	r8
 8006baa:	3001      	adds	r0, #1
 8006bac:	d0e6      	beq.n	8006b7c <_printf_common+0xa4>
 8006bae:	3601      	adds	r6, #1
 8006bb0:	e7d9      	b.n	8006b66 <_printf_common+0x8e>
	...

08006bb4 <_printf_i>:
 8006bb4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bb8:	7e0f      	ldrb	r7, [r1, #24]
 8006bba:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bbc:	2f78      	cmp	r7, #120	; 0x78
 8006bbe:	4691      	mov	r9, r2
 8006bc0:	4680      	mov	r8, r0
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	469a      	mov	sl, r3
 8006bc6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bca:	d807      	bhi.n	8006bdc <_printf_i+0x28>
 8006bcc:	2f62      	cmp	r7, #98	; 0x62
 8006bce:	d80a      	bhi.n	8006be6 <_printf_i+0x32>
 8006bd0:	2f00      	cmp	r7, #0
 8006bd2:	f000 80d8 	beq.w	8006d86 <_printf_i+0x1d2>
 8006bd6:	2f58      	cmp	r7, #88	; 0x58
 8006bd8:	f000 80a3 	beq.w	8006d22 <_printf_i+0x16e>
 8006bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006be0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006be4:	e03a      	b.n	8006c5c <_printf_i+0xa8>
 8006be6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bea:	2b15      	cmp	r3, #21
 8006bec:	d8f6      	bhi.n	8006bdc <_printf_i+0x28>
 8006bee:	a101      	add	r1, pc, #4	; (adr r1, 8006bf4 <_printf_i+0x40>)
 8006bf0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bf4:	08006c4d 	.word	0x08006c4d
 8006bf8:	08006c61 	.word	0x08006c61
 8006bfc:	08006bdd 	.word	0x08006bdd
 8006c00:	08006bdd 	.word	0x08006bdd
 8006c04:	08006bdd 	.word	0x08006bdd
 8006c08:	08006bdd 	.word	0x08006bdd
 8006c0c:	08006c61 	.word	0x08006c61
 8006c10:	08006bdd 	.word	0x08006bdd
 8006c14:	08006bdd 	.word	0x08006bdd
 8006c18:	08006bdd 	.word	0x08006bdd
 8006c1c:	08006bdd 	.word	0x08006bdd
 8006c20:	08006d6d 	.word	0x08006d6d
 8006c24:	08006c91 	.word	0x08006c91
 8006c28:	08006d4f 	.word	0x08006d4f
 8006c2c:	08006bdd 	.word	0x08006bdd
 8006c30:	08006bdd 	.word	0x08006bdd
 8006c34:	08006d8f 	.word	0x08006d8f
 8006c38:	08006bdd 	.word	0x08006bdd
 8006c3c:	08006c91 	.word	0x08006c91
 8006c40:	08006bdd 	.word	0x08006bdd
 8006c44:	08006bdd 	.word	0x08006bdd
 8006c48:	08006d57 	.word	0x08006d57
 8006c4c:	682b      	ldr	r3, [r5, #0]
 8006c4e:	1d1a      	adds	r2, r3, #4
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	602a      	str	r2, [r5, #0]
 8006c54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c58:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e0a3      	b.n	8006da8 <_printf_i+0x1f4>
 8006c60:	6820      	ldr	r0, [r4, #0]
 8006c62:	6829      	ldr	r1, [r5, #0]
 8006c64:	0606      	lsls	r6, r0, #24
 8006c66:	f101 0304 	add.w	r3, r1, #4
 8006c6a:	d50a      	bpl.n	8006c82 <_printf_i+0xce>
 8006c6c:	680e      	ldr	r6, [r1, #0]
 8006c6e:	602b      	str	r3, [r5, #0]
 8006c70:	2e00      	cmp	r6, #0
 8006c72:	da03      	bge.n	8006c7c <_printf_i+0xc8>
 8006c74:	232d      	movs	r3, #45	; 0x2d
 8006c76:	4276      	negs	r6, r6
 8006c78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c7c:	485e      	ldr	r0, [pc, #376]	; (8006df8 <_printf_i+0x244>)
 8006c7e:	230a      	movs	r3, #10
 8006c80:	e019      	b.n	8006cb6 <_printf_i+0x102>
 8006c82:	680e      	ldr	r6, [r1, #0]
 8006c84:	602b      	str	r3, [r5, #0]
 8006c86:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c8a:	bf18      	it	ne
 8006c8c:	b236      	sxthne	r6, r6
 8006c8e:	e7ef      	b.n	8006c70 <_printf_i+0xbc>
 8006c90:	682b      	ldr	r3, [r5, #0]
 8006c92:	6820      	ldr	r0, [r4, #0]
 8006c94:	1d19      	adds	r1, r3, #4
 8006c96:	6029      	str	r1, [r5, #0]
 8006c98:	0601      	lsls	r1, r0, #24
 8006c9a:	d501      	bpl.n	8006ca0 <_printf_i+0xec>
 8006c9c:	681e      	ldr	r6, [r3, #0]
 8006c9e:	e002      	b.n	8006ca6 <_printf_i+0xf2>
 8006ca0:	0646      	lsls	r6, r0, #25
 8006ca2:	d5fb      	bpl.n	8006c9c <_printf_i+0xe8>
 8006ca4:	881e      	ldrh	r6, [r3, #0]
 8006ca6:	4854      	ldr	r0, [pc, #336]	; (8006df8 <_printf_i+0x244>)
 8006ca8:	2f6f      	cmp	r7, #111	; 0x6f
 8006caa:	bf0c      	ite	eq
 8006cac:	2308      	moveq	r3, #8
 8006cae:	230a      	movne	r3, #10
 8006cb0:	2100      	movs	r1, #0
 8006cb2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cb6:	6865      	ldr	r5, [r4, #4]
 8006cb8:	60a5      	str	r5, [r4, #8]
 8006cba:	2d00      	cmp	r5, #0
 8006cbc:	bfa2      	ittt	ge
 8006cbe:	6821      	ldrge	r1, [r4, #0]
 8006cc0:	f021 0104 	bicge.w	r1, r1, #4
 8006cc4:	6021      	strge	r1, [r4, #0]
 8006cc6:	b90e      	cbnz	r6, 8006ccc <_printf_i+0x118>
 8006cc8:	2d00      	cmp	r5, #0
 8006cca:	d04d      	beq.n	8006d68 <_printf_i+0x1b4>
 8006ccc:	4615      	mov	r5, r2
 8006cce:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cd2:	fb03 6711 	mls	r7, r3, r1, r6
 8006cd6:	5dc7      	ldrb	r7, [r0, r7]
 8006cd8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cdc:	4637      	mov	r7, r6
 8006cde:	42bb      	cmp	r3, r7
 8006ce0:	460e      	mov	r6, r1
 8006ce2:	d9f4      	bls.n	8006cce <_printf_i+0x11a>
 8006ce4:	2b08      	cmp	r3, #8
 8006ce6:	d10b      	bne.n	8006d00 <_printf_i+0x14c>
 8006ce8:	6823      	ldr	r3, [r4, #0]
 8006cea:	07de      	lsls	r6, r3, #31
 8006cec:	d508      	bpl.n	8006d00 <_printf_i+0x14c>
 8006cee:	6923      	ldr	r3, [r4, #16]
 8006cf0:	6861      	ldr	r1, [r4, #4]
 8006cf2:	4299      	cmp	r1, r3
 8006cf4:	bfde      	ittt	le
 8006cf6:	2330      	movle	r3, #48	; 0x30
 8006cf8:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cfc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d00:	1b52      	subs	r2, r2, r5
 8006d02:	6122      	str	r2, [r4, #16]
 8006d04:	f8cd a000 	str.w	sl, [sp]
 8006d08:	464b      	mov	r3, r9
 8006d0a:	aa03      	add	r2, sp, #12
 8006d0c:	4621      	mov	r1, r4
 8006d0e:	4640      	mov	r0, r8
 8006d10:	f7ff fee2 	bl	8006ad8 <_printf_common>
 8006d14:	3001      	adds	r0, #1
 8006d16:	d14c      	bne.n	8006db2 <_printf_i+0x1fe>
 8006d18:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1c:	b004      	add	sp, #16
 8006d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d22:	4835      	ldr	r0, [pc, #212]	; (8006df8 <_printf_i+0x244>)
 8006d24:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d28:	6829      	ldr	r1, [r5, #0]
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d30:	6029      	str	r1, [r5, #0]
 8006d32:	061d      	lsls	r5, r3, #24
 8006d34:	d514      	bpl.n	8006d60 <_printf_i+0x1ac>
 8006d36:	07df      	lsls	r7, r3, #31
 8006d38:	bf44      	itt	mi
 8006d3a:	f043 0320 	orrmi.w	r3, r3, #32
 8006d3e:	6023      	strmi	r3, [r4, #0]
 8006d40:	b91e      	cbnz	r6, 8006d4a <_printf_i+0x196>
 8006d42:	6823      	ldr	r3, [r4, #0]
 8006d44:	f023 0320 	bic.w	r3, r3, #32
 8006d48:	6023      	str	r3, [r4, #0]
 8006d4a:	2310      	movs	r3, #16
 8006d4c:	e7b0      	b.n	8006cb0 <_printf_i+0xfc>
 8006d4e:	6823      	ldr	r3, [r4, #0]
 8006d50:	f043 0320 	orr.w	r3, r3, #32
 8006d54:	6023      	str	r3, [r4, #0]
 8006d56:	2378      	movs	r3, #120	; 0x78
 8006d58:	4828      	ldr	r0, [pc, #160]	; (8006dfc <_printf_i+0x248>)
 8006d5a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d5e:	e7e3      	b.n	8006d28 <_printf_i+0x174>
 8006d60:	0659      	lsls	r1, r3, #25
 8006d62:	bf48      	it	mi
 8006d64:	b2b6      	uxthmi	r6, r6
 8006d66:	e7e6      	b.n	8006d36 <_printf_i+0x182>
 8006d68:	4615      	mov	r5, r2
 8006d6a:	e7bb      	b.n	8006ce4 <_printf_i+0x130>
 8006d6c:	682b      	ldr	r3, [r5, #0]
 8006d6e:	6826      	ldr	r6, [r4, #0]
 8006d70:	6961      	ldr	r1, [r4, #20]
 8006d72:	1d18      	adds	r0, r3, #4
 8006d74:	6028      	str	r0, [r5, #0]
 8006d76:	0635      	lsls	r5, r6, #24
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	d501      	bpl.n	8006d80 <_printf_i+0x1cc>
 8006d7c:	6019      	str	r1, [r3, #0]
 8006d7e:	e002      	b.n	8006d86 <_printf_i+0x1d2>
 8006d80:	0670      	lsls	r0, r6, #25
 8006d82:	d5fb      	bpl.n	8006d7c <_printf_i+0x1c8>
 8006d84:	8019      	strh	r1, [r3, #0]
 8006d86:	2300      	movs	r3, #0
 8006d88:	6123      	str	r3, [r4, #16]
 8006d8a:	4615      	mov	r5, r2
 8006d8c:	e7ba      	b.n	8006d04 <_printf_i+0x150>
 8006d8e:	682b      	ldr	r3, [r5, #0]
 8006d90:	1d1a      	adds	r2, r3, #4
 8006d92:	602a      	str	r2, [r5, #0]
 8006d94:	681d      	ldr	r5, [r3, #0]
 8006d96:	6862      	ldr	r2, [r4, #4]
 8006d98:	2100      	movs	r1, #0
 8006d9a:	4628      	mov	r0, r5
 8006d9c:	f7f9 fa20 	bl	80001e0 <memchr>
 8006da0:	b108      	cbz	r0, 8006da6 <_printf_i+0x1f2>
 8006da2:	1b40      	subs	r0, r0, r5
 8006da4:	6060      	str	r0, [r4, #4]
 8006da6:	6863      	ldr	r3, [r4, #4]
 8006da8:	6123      	str	r3, [r4, #16]
 8006daa:	2300      	movs	r3, #0
 8006dac:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006db0:	e7a8      	b.n	8006d04 <_printf_i+0x150>
 8006db2:	6923      	ldr	r3, [r4, #16]
 8006db4:	462a      	mov	r2, r5
 8006db6:	4649      	mov	r1, r9
 8006db8:	4640      	mov	r0, r8
 8006dba:	47d0      	blx	sl
 8006dbc:	3001      	adds	r0, #1
 8006dbe:	d0ab      	beq.n	8006d18 <_printf_i+0x164>
 8006dc0:	6823      	ldr	r3, [r4, #0]
 8006dc2:	079b      	lsls	r3, r3, #30
 8006dc4:	d413      	bmi.n	8006dee <_printf_i+0x23a>
 8006dc6:	68e0      	ldr	r0, [r4, #12]
 8006dc8:	9b03      	ldr	r3, [sp, #12]
 8006dca:	4298      	cmp	r0, r3
 8006dcc:	bfb8      	it	lt
 8006dce:	4618      	movlt	r0, r3
 8006dd0:	e7a4      	b.n	8006d1c <_printf_i+0x168>
 8006dd2:	2301      	movs	r3, #1
 8006dd4:	4632      	mov	r2, r6
 8006dd6:	4649      	mov	r1, r9
 8006dd8:	4640      	mov	r0, r8
 8006dda:	47d0      	blx	sl
 8006ddc:	3001      	adds	r0, #1
 8006dde:	d09b      	beq.n	8006d18 <_printf_i+0x164>
 8006de0:	3501      	adds	r5, #1
 8006de2:	68e3      	ldr	r3, [r4, #12]
 8006de4:	9903      	ldr	r1, [sp, #12]
 8006de6:	1a5b      	subs	r3, r3, r1
 8006de8:	42ab      	cmp	r3, r5
 8006dea:	dcf2      	bgt.n	8006dd2 <_printf_i+0x21e>
 8006dec:	e7eb      	b.n	8006dc6 <_printf_i+0x212>
 8006dee:	2500      	movs	r5, #0
 8006df0:	f104 0619 	add.w	r6, r4, #25
 8006df4:	e7f5      	b.n	8006de2 <_printf_i+0x22e>
 8006df6:	bf00      	nop
 8006df8:	080075b7 	.word	0x080075b7
 8006dfc:	080075c8 	.word	0x080075c8

08006e00 <memcpy>:
 8006e00:	440a      	add	r2, r1
 8006e02:	4291      	cmp	r1, r2
 8006e04:	f100 33ff 	add.w	r3, r0, #4294967295
 8006e08:	d100      	bne.n	8006e0c <memcpy+0xc>
 8006e0a:	4770      	bx	lr
 8006e0c:	b510      	push	{r4, lr}
 8006e0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006e12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006e16:	4291      	cmp	r1, r2
 8006e18:	d1f9      	bne.n	8006e0e <memcpy+0xe>
 8006e1a:	bd10      	pop	{r4, pc}

08006e1c <memmove>:
 8006e1c:	4288      	cmp	r0, r1
 8006e1e:	b510      	push	{r4, lr}
 8006e20:	eb01 0402 	add.w	r4, r1, r2
 8006e24:	d902      	bls.n	8006e2c <memmove+0x10>
 8006e26:	4284      	cmp	r4, r0
 8006e28:	4623      	mov	r3, r4
 8006e2a:	d807      	bhi.n	8006e3c <memmove+0x20>
 8006e2c:	1e43      	subs	r3, r0, #1
 8006e2e:	42a1      	cmp	r1, r4
 8006e30:	d008      	beq.n	8006e44 <memmove+0x28>
 8006e32:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e36:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e3a:	e7f8      	b.n	8006e2e <memmove+0x12>
 8006e3c:	4402      	add	r2, r0
 8006e3e:	4601      	mov	r1, r0
 8006e40:	428a      	cmp	r2, r1
 8006e42:	d100      	bne.n	8006e46 <memmove+0x2a>
 8006e44:	bd10      	pop	{r4, pc}
 8006e46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e4e:	e7f7      	b.n	8006e40 <memmove+0x24>

08006e50 <_free_r>:
 8006e50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e52:	2900      	cmp	r1, #0
 8006e54:	d044      	beq.n	8006ee0 <_free_r+0x90>
 8006e56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e5a:	9001      	str	r0, [sp, #4]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	f1a1 0404 	sub.w	r4, r1, #4
 8006e62:	bfb8      	it	lt
 8006e64:	18e4      	addlt	r4, r4, r3
 8006e66:	f000 f913 	bl	8007090 <__malloc_lock>
 8006e6a:	4a1e      	ldr	r2, [pc, #120]	; (8006ee4 <_free_r+0x94>)
 8006e6c:	9801      	ldr	r0, [sp, #4]
 8006e6e:	6813      	ldr	r3, [r2, #0]
 8006e70:	b933      	cbnz	r3, 8006e80 <_free_r+0x30>
 8006e72:	6063      	str	r3, [r4, #4]
 8006e74:	6014      	str	r4, [r2, #0]
 8006e76:	b003      	add	sp, #12
 8006e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e7c:	f000 b90e 	b.w	800709c <__malloc_unlock>
 8006e80:	42a3      	cmp	r3, r4
 8006e82:	d908      	bls.n	8006e96 <_free_r+0x46>
 8006e84:	6825      	ldr	r5, [r4, #0]
 8006e86:	1961      	adds	r1, r4, r5
 8006e88:	428b      	cmp	r3, r1
 8006e8a:	bf01      	itttt	eq
 8006e8c:	6819      	ldreq	r1, [r3, #0]
 8006e8e:	685b      	ldreq	r3, [r3, #4]
 8006e90:	1949      	addeq	r1, r1, r5
 8006e92:	6021      	streq	r1, [r4, #0]
 8006e94:	e7ed      	b.n	8006e72 <_free_r+0x22>
 8006e96:	461a      	mov	r2, r3
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	b10b      	cbz	r3, 8006ea0 <_free_r+0x50>
 8006e9c:	42a3      	cmp	r3, r4
 8006e9e:	d9fa      	bls.n	8006e96 <_free_r+0x46>
 8006ea0:	6811      	ldr	r1, [r2, #0]
 8006ea2:	1855      	adds	r5, r2, r1
 8006ea4:	42a5      	cmp	r5, r4
 8006ea6:	d10b      	bne.n	8006ec0 <_free_r+0x70>
 8006ea8:	6824      	ldr	r4, [r4, #0]
 8006eaa:	4421      	add	r1, r4
 8006eac:	1854      	adds	r4, r2, r1
 8006eae:	42a3      	cmp	r3, r4
 8006eb0:	6011      	str	r1, [r2, #0]
 8006eb2:	d1e0      	bne.n	8006e76 <_free_r+0x26>
 8006eb4:	681c      	ldr	r4, [r3, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	6053      	str	r3, [r2, #4]
 8006eba:	4421      	add	r1, r4
 8006ebc:	6011      	str	r1, [r2, #0]
 8006ebe:	e7da      	b.n	8006e76 <_free_r+0x26>
 8006ec0:	d902      	bls.n	8006ec8 <_free_r+0x78>
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	6003      	str	r3, [r0, #0]
 8006ec6:	e7d6      	b.n	8006e76 <_free_r+0x26>
 8006ec8:	6825      	ldr	r5, [r4, #0]
 8006eca:	1961      	adds	r1, r4, r5
 8006ecc:	428b      	cmp	r3, r1
 8006ece:	bf04      	itt	eq
 8006ed0:	6819      	ldreq	r1, [r3, #0]
 8006ed2:	685b      	ldreq	r3, [r3, #4]
 8006ed4:	6063      	str	r3, [r4, #4]
 8006ed6:	bf04      	itt	eq
 8006ed8:	1949      	addeq	r1, r1, r5
 8006eda:	6021      	streq	r1, [r4, #0]
 8006edc:	6054      	str	r4, [r2, #4]
 8006ede:	e7ca      	b.n	8006e76 <_free_r+0x26>
 8006ee0:	b003      	add	sp, #12
 8006ee2:	bd30      	pop	{r4, r5, pc}
 8006ee4:	20003ee8 	.word	0x20003ee8

08006ee8 <sbrk_aligned>:
 8006ee8:	b570      	push	{r4, r5, r6, lr}
 8006eea:	4e0e      	ldr	r6, [pc, #56]	; (8006f24 <sbrk_aligned+0x3c>)
 8006eec:	460c      	mov	r4, r1
 8006eee:	6831      	ldr	r1, [r6, #0]
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	b911      	cbnz	r1, 8006efa <sbrk_aligned+0x12>
 8006ef4:	f000 f8bc 	bl	8007070 <_sbrk_r>
 8006ef8:	6030      	str	r0, [r6, #0]
 8006efa:	4621      	mov	r1, r4
 8006efc:	4628      	mov	r0, r5
 8006efe:	f000 f8b7 	bl	8007070 <_sbrk_r>
 8006f02:	1c43      	adds	r3, r0, #1
 8006f04:	d00a      	beq.n	8006f1c <sbrk_aligned+0x34>
 8006f06:	1cc4      	adds	r4, r0, #3
 8006f08:	f024 0403 	bic.w	r4, r4, #3
 8006f0c:	42a0      	cmp	r0, r4
 8006f0e:	d007      	beq.n	8006f20 <sbrk_aligned+0x38>
 8006f10:	1a21      	subs	r1, r4, r0
 8006f12:	4628      	mov	r0, r5
 8006f14:	f000 f8ac 	bl	8007070 <_sbrk_r>
 8006f18:	3001      	adds	r0, #1
 8006f1a:	d101      	bne.n	8006f20 <sbrk_aligned+0x38>
 8006f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8006f20:	4620      	mov	r0, r4
 8006f22:	bd70      	pop	{r4, r5, r6, pc}
 8006f24:	20003eec 	.word	0x20003eec

08006f28 <_malloc_r>:
 8006f28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f2c:	1ccd      	adds	r5, r1, #3
 8006f2e:	f025 0503 	bic.w	r5, r5, #3
 8006f32:	3508      	adds	r5, #8
 8006f34:	2d0c      	cmp	r5, #12
 8006f36:	bf38      	it	cc
 8006f38:	250c      	movcc	r5, #12
 8006f3a:	2d00      	cmp	r5, #0
 8006f3c:	4607      	mov	r7, r0
 8006f3e:	db01      	blt.n	8006f44 <_malloc_r+0x1c>
 8006f40:	42a9      	cmp	r1, r5
 8006f42:	d905      	bls.n	8006f50 <_malloc_r+0x28>
 8006f44:	230c      	movs	r3, #12
 8006f46:	603b      	str	r3, [r7, #0]
 8006f48:	2600      	movs	r6, #0
 8006f4a:	4630      	mov	r0, r6
 8006f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f50:	4e2e      	ldr	r6, [pc, #184]	; (800700c <_malloc_r+0xe4>)
 8006f52:	f000 f89d 	bl	8007090 <__malloc_lock>
 8006f56:	6833      	ldr	r3, [r6, #0]
 8006f58:	461c      	mov	r4, r3
 8006f5a:	bb34      	cbnz	r4, 8006faa <_malloc_r+0x82>
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	4638      	mov	r0, r7
 8006f60:	f7ff ffc2 	bl	8006ee8 <sbrk_aligned>
 8006f64:	1c43      	adds	r3, r0, #1
 8006f66:	4604      	mov	r4, r0
 8006f68:	d14d      	bne.n	8007006 <_malloc_r+0xde>
 8006f6a:	6834      	ldr	r4, [r6, #0]
 8006f6c:	4626      	mov	r6, r4
 8006f6e:	2e00      	cmp	r6, #0
 8006f70:	d140      	bne.n	8006ff4 <_malloc_r+0xcc>
 8006f72:	6823      	ldr	r3, [r4, #0]
 8006f74:	4631      	mov	r1, r6
 8006f76:	4638      	mov	r0, r7
 8006f78:	eb04 0803 	add.w	r8, r4, r3
 8006f7c:	f000 f878 	bl	8007070 <_sbrk_r>
 8006f80:	4580      	cmp	r8, r0
 8006f82:	d13a      	bne.n	8006ffa <_malloc_r+0xd2>
 8006f84:	6821      	ldr	r1, [r4, #0]
 8006f86:	3503      	adds	r5, #3
 8006f88:	1a6d      	subs	r5, r5, r1
 8006f8a:	f025 0503 	bic.w	r5, r5, #3
 8006f8e:	3508      	adds	r5, #8
 8006f90:	2d0c      	cmp	r5, #12
 8006f92:	bf38      	it	cc
 8006f94:	250c      	movcc	r5, #12
 8006f96:	4629      	mov	r1, r5
 8006f98:	4638      	mov	r0, r7
 8006f9a:	f7ff ffa5 	bl	8006ee8 <sbrk_aligned>
 8006f9e:	3001      	adds	r0, #1
 8006fa0:	d02b      	beq.n	8006ffa <_malloc_r+0xd2>
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	442b      	add	r3, r5
 8006fa6:	6023      	str	r3, [r4, #0]
 8006fa8:	e00e      	b.n	8006fc8 <_malloc_r+0xa0>
 8006faa:	6822      	ldr	r2, [r4, #0]
 8006fac:	1b52      	subs	r2, r2, r5
 8006fae:	d41e      	bmi.n	8006fee <_malloc_r+0xc6>
 8006fb0:	2a0b      	cmp	r2, #11
 8006fb2:	d916      	bls.n	8006fe2 <_malloc_r+0xba>
 8006fb4:	1961      	adds	r1, r4, r5
 8006fb6:	42a3      	cmp	r3, r4
 8006fb8:	6025      	str	r5, [r4, #0]
 8006fba:	bf18      	it	ne
 8006fbc:	6059      	strne	r1, [r3, #4]
 8006fbe:	6863      	ldr	r3, [r4, #4]
 8006fc0:	bf08      	it	eq
 8006fc2:	6031      	streq	r1, [r6, #0]
 8006fc4:	5162      	str	r2, [r4, r5]
 8006fc6:	604b      	str	r3, [r1, #4]
 8006fc8:	4638      	mov	r0, r7
 8006fca:	f104 060b 	add.w	r6, r4, #11
 8006fce:	f000 f865 	bl	800709c <__malloc_unlock>
 8006fd2:	f026 0607 	bic.w	r6, r6, #7
 8006fd6:	1d23      	adds	r3, r4, #4
 8006fd8:	1af2      	subs	r2, r6, r3
 8006fda:	d0b6      	beq.n	8006f4a <_malloc_r+0x22>
 8006fdc:	1b9b      	subs	r3, r3, r6
 8006fde:	50a3      	str	r3, [r4, r2]
 8006fe0:	e7b3      	b.n	8006f4a <_malloc_r+0x22>
 8006fe2:	6862      	ldr	r2, [r4, #4]
 8006fe4:	42a3      	cmp	r3, r4
 8006fe6:	bf0c      	ite	eq
 8006fe8:	6032      	streq	r2, [r6, #0]
 8006fea:	605a      	strne	r2, [r3, #4]
 8006fec:	e7ec      	b.n	8006fc8 <_malloc_r+0xa0>
 8006fee:	4623      	mov	r3, r4
 8006ff0:	6864      	ldr	r4, [r4, #4]
 8006ff2:	e7b2      	b.n	8006f5a <_malloc_r+0x32>
 8006ff4:	4634      	mov	r4, r6
 8006ff6:	6876      	ldr	r6, [r6, #4]
 8006ff8:	e7b9      	b.n	8006f6e <_malloc_r+0x46>
 8006ffa:	230c      	movs	r3, #12
 8006ffc:	603b      	str	r3, [r7, #0]
 8006ffe:	4638      	mov	r0, r7
 8007000:	f000 f84c 	bl	800709c <__malloc_unlock>
 8007004:	e7a1      	b.n	8006f4a <_malloc_r+0x22>
 8007006:	6025      	str	r5, [r4, #0]
 8007008:	e7de      	b.n	8006fc8 <_malloc_r+0xa0>
 800700a:	bf00      	nop
 800700c:	20003ee8 	.word	0x20003ee8

08007010 <_realloc_r>:
 8007010:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007014:	4680      	mov	r8, r0
 8007016:	4614      	mov	r4, r2
 8007018:	460e      	mov	r6, r1
 800701a:	b921      	cbnz	r1, 8007026 <_realloc_r+0x16>
 800701c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007020:	4611      	mov	r1, r2
 8007022:	f7ff bf81 	b.w	8006f28 <_malloc_r>
 8007026:	b92a      	cbnz	r2, 8007034 <_realloc_r+0x24>
 8007028:	f7ff ff12 	bl	8006e50 <_free_r>
 800702c:	4625      	mov	r5, r4
 800702e:	4628      	mov	r0, r5
 8007030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007034:	f000 f838 	bl	80070a8 <_malloc_usable_size_r>
 8007038:	4284      	cmp	r4, r0
 800703a:	4607      	mov	r7, r0
 800703c:	d802      	bhi.n	8007044 <_realloc_r+0x34>
 800703e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007042:	d812      	bhi.n	800706a <_realloc_r+0x5a>
 8007044:	4621      	mov	r1, r4
 8007046:	4640      	mov	r0, r8
 8007048:	f7ff ff6e 	bl	8006f28 <_malloc_r>
 800704c:	4605      	mov	r5, r0
 800704e:	2800      	cmp	r0, #0
 8007050:	d0ed      	beq.n	800702e <_realloc_r+0x1e>
 8007052:	42bc      	cmp	r4, r7
 8007054:	4622      	mov	r2, r4
 8007056:	4631      	mov	r1, r6
 8007058:	bf28      	it	cs
 800705a:	463a      	movcs	r2, r7
 800705c:	f7ff fed0 	bl	8006e00 <memcpy>
 8007060:	4631      	mov	r1, r6
 8007062:	4640      	mov	r0, r8
 8007064:	f7ff fef4 	bl	8006e50 <_free_r>
 8007068:	e7e1      	b.n	800702e <_realloc_r+0x1e>
 800706a:	4635      	mov	r5, r6
 800706c:	e7df      	b.n	800702e <_realloc_r+0x1e>
	...

08007070 <_sbrk_r>:
 8007070:	b538      	push	{r3, r4, r5, lr}
 8007072:	4d06      	ldr	r5, [pc, #24]	; (800708c <_sbrk_r+0x1c>)
 8007074:	2300      	movs	r3, #0
 8007076:	4604      	mov	r4, r0
 8007078:	4608      	mov	r0, r1
 800707a:	602b      	str	r3, [r5, #0]
 800707c:	f7f9 ff7a 	bl	8000f74 <_sbrk>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_sbrk_r+0x1a>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	b103      	cbz	r3, 800708a <_sbrk_r+0x1a>
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	20003ef0 	.word	0x20003ef0

08007090 <__malloc_lock>:
 8007090:	4801      	ldr	r0, [pc, #4]	; (8007098 <__malloc_lock+0x8>)
 8007092:	f000 b811 	b.w	80070b8 <__retarget_lock_acquire_recursive>
 8007096:	bf00      	nop
 8007098:	20003ef4 	.word	0x20003ef4

0800709c <__malloc_unlock>:
 800709c:	4801      	ldr	r0, [pc, #4]	; (80070a4 <__malloc_unlock+0x8>)
 800709e:	f000 b80c 	b.w	80070ba <__retarget_lock_release_recursive>
 80070a2:	bf00      	nop
 80070a4:	20003ef4 	.word	0x20003ef4

080070a8 <_malloc_usable_size_r>:
 80070a8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80070ac:	1f18      	subs	r0, r3, #4
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	bfbc      	itt	lt
 80070b2:	580b      	ldrlt	r3, [r1, r0]
 80070b4:	18c0      	addlt	r0, r0, r3
 80070b6:	4770      	bx	lr

080070b8 <__retarget_lock_acquire_recursive>:
 80070b8:	4770      	bx	lr

080070ba <__retarget_lock_release_recursive>:
 80070ba:	4770      	bx	lr

080070bc <_init>:
 80070bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070be:	bf00      	nop
 80070c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070c2:	bc08      	pop	{r3}
 80070c4:	469e      	mov	lr, r3
 80070c6:	4770      	bx	lr

080070c8 <_fini>:
 80070c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070ca:	bf00      	nop
 80070cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070ce:	bc08      	pop	{r3}
 80070d0:	469e      	mov	lr, r3
 80070d2:	4770      	bx	lr
