
DCMI_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003b48  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08003cd0  08003cd0  00013cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003cf0  08003cf0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003cf0  08003cf0  00013cf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003cf8  08003cf8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003cf8  08003cf8  00013cf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003cfc  08003cfc  00013cfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003d00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000114  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000120  20000120  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_line   0000c345  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00009c38  00000000  00000000  0002c381  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001a82  00000000  00000000  00035fb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000880  00000000  00000000  00037a40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c022b  00000000  00000000  000382c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 000007d0  00000000  00000000  000f84f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0001fce2  00000000  00000000  000f8cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001189a2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000220c  00000000  00000000  001189f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003cb8 	.word	0x08003cb8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003cb8 	.word	0x08003cb8

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000504 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004d0:	480d      	ldr	r0, [pc, #52]	; (8000508 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004d2:	490e      	ldr	r1, [pc, #56]	; (800050c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004d4:	4a0e      	ldr	r2, [pc, #56]	; (8000510 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004d8:	e002      	b.n	80004e0 <LoopCopyDataInit>

080004da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004de:	3304      	adds	r3, #4

080004e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004e4:	d3f9      	bcc.n	80004da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004e6:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004e8:	4c0b      	ldr	r4, [pc, #44]	; (8000518 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004ec:	e001      	b.n	80004f2 <LoopFillZerobss>

080004ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004f0:	3204      	adds	r2, #4

080004f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004f4:	d3fb      	bcc.n	80004ee <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80004f6:	f000 fb17 	bl	8000b28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004fa:	f003 fbb1 	bl	8003c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004fe:	f000 f80f 	bl	8000520 <main>
  bx  lr    
 8000502:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000504:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000508:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800050c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000510:	08003d00 	.word	0x08003d00
  ldr r2, =_sbss
 8000514:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000518:	20000120 	.word	0x20000120

0800051c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800051c:	e7fe      	b.n	800051c <ADC_IRQHandler>
	...

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b082      	sub	sp, #8
 8000524:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000526:	f000 fb11 	bl	8000b4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052a:	f000 f823 	bl	8000574 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052e:	f000 f8fb 	bl	8000728 <MX_GPIO_Init>
  MX_DMA_Init();
 8000532:	f000 f8d9 	bl	80006e8 <MX_DMA_Init>
  MX_DCMI_Init();
 8000536:	f000 f881 	bl	800063c <MX_DCMI_Init>
  MX_I2C1_Init();
 800053a:	f000 f8a7 	bl	800068c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint32_t frame_size = 0x9600;
 800053e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8000542:	607b      	str	r3, [r7, #4]
  	int buff_size;
  	buff_size = frame_size *3;
 8000544:	687a      	ldr	r2, [r7, #4]
 8000546:	4613      	mov	r3, r2
 8000548:	005b      	lsls	r3, r3, #1
 800054a:	4413      	add	r3, r2
 800054c:	603b      	str	r3, [r7, #0]
  	//volatile uint32_t dma_buff[buff_size];
  	__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);
 800054e:	4b08      	ldr	r3, [pc, #32]	; (8000570 <main+0x50>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	68da      	ldr	r2, [r3, #12]
 8000554:	4b06      	ldr	r3, [pc, #24]	; (8000570 <main+0x50>)
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	f042 0201 	orr.w	r2, r2, #1
 800055c:	60da      	str	r2, [r3, #12]
  	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)FRAME_BUFFER, frame_size);
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	f04f 4270 	mov.w	r2, #4026531840	; 0xf0000000
 8000564:	2102      	movs	r1, #2
 8000566:	4802      	ldr	r0, [pc, #8]	; (8000570 <main+0x50>)
 8000568:	f000 fc74 	bl	8000e54 <HAL_DCMI_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800056c:	e7fe      	b.n	800056c <main+0x4c>
 800056e:	bf00      	nop
 8000570:	20000028 	.word	0x20000028

08000574 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	b094      	sub	sp, #80	; 0x50
 8000578:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057a:	f107 0320 	add.w	r3, r7, #32
 800057e:	2230      	movs	r2, #48	; 0x30
 8000580:	2100      	movs	r1, #0
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fb90 	bl	8003ca8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000588:	f107 030c 	add.w	r3, r7, #12
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
 8000590:	605a      	str	r2, [r3, #4]
 8000592:	609a      	str	r2, [r3, #8]
 8000594:	60da      	str	r2, [r3, #12]
 8000596:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <SystemClock_Config+0xc0>)
 800059e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a0:	4a24      	ldr	r2, [pc, #144]	; (8000634 <SystemClock_Config+0xc0>)
 80005a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005a6:	6413      	str	r3, [r2, #64]	; 0x40
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <SystemClock_Config+0xc0>)
 80005aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b0:	60bb      	str	r3, [r7, #8]
 80005b2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b4:	2300      	movs	r3, #0
 80005b6:	607b      	str	r3, [r7, #4]
 80005b8:	4b1f      	ldr	r3, [pc, #124]	; (8000638 <SystemClock_Config+0xc4>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a1e      	ldr	r2, [pc, #120]	; (8000638 <SystemClock_Config+0xc4>)
 80005be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c2:	6013      	str	r3, [r2, #0]
 80005c4:	4b1c      	ldr	r3, [pc, #112]	; (8000638 <SystemClock_Config+0xc4>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005cc:	607b      	str	r3, [r7, #4]
 80005ce:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d0:	2302      	movs	r3, #2
 80005d2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d4:	2301      	movs	r3, #1
 80005d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d8:	2310      	movs	r3, #16
 80005da:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005dc:	2300      	movs	r3, #0
 80005de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005e0:	f107 0320 	add.w	r3, r7, #32
 80005e4:	4618      	mov	r0, r3
 80005e6:	f002 fe8f 	bl	8003308 <HAL_RCC_OscConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80005f0:	f000 f8f6 	bl	80007e0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005f4:	230f      	movs	r3, #15
 80005f6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000600:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000604:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000606:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800060c:	f107 030c 	add.w	r3, r7, #12
 8000610:	2100      	movs	r1, #0
 8000612:	4618      	mov	r0, r3
 8000614:	f003 f8f0 	bl	80037f8 <HAL_RCC_ClockConfig>
 8000618:	4603      	mov	r3, r0
 800061a:	2b00      	cmp	r3, #0
 800061c:	d001      	beq.n	8000622 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800061e:	f000 f8df 	bl	80007e0 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000622:	2200      	movs	r2, #0
 8000624:	2100      	movs	r1, #0
 8000626:	2000      	movs	r0, #0
 8000628:	f003 f9cc 	bl	80039c4 <HAL_RCC_MCOConfig>
}
 800062c:	bf00      	nop
 800062e:	3750      	adds	r7, #80	; 0x50
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40023800 	.word	0x40023800
 8000638:	40007000 	.word	0x40007000

0800063c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000640:	4b10      	ldr	r3, [pc, #64]	; (8000684 <MX_DCMI_Init+0x48>)
 8000642:	4a11      	ldr	r2, [pc, #68]	; (8000688 <MX_DCMI_Init+0x4c>)
 8000644:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000646:	4b0f      	ldr	r3, [pc, #60]	; (8000684 <MX_DCMI_Init+0x48>)
 8000648:	2200      	movs	r2, #0
 800064a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_FALLING;
 800064c:	4b0d      	ldr	r3, [pc, #52]	; (8000684 <MX_DCMI_Init+0x48>)
 800064e:	2200      	movs	r2, #0
 8000650:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_LOW;
 8000652:	4b0c      	ldr	r3, [pc, #48]	; (8000684 <MX_DCMI_Init+0x48>)
 8000654:	2200      	movs	r2, #0
 8000656:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_HIGH;
 8000658:	4b0a      	ldr	r3, [pc, #40]	; (8000684 <MX_DCMI_Init+0x48>)
 800065a:	2240      	movs	r2, #64	; 0x40
 800065c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800065e:	4b09      	ldr	r3, [pc, #36]	; (8000684 <MX_DCMI_Init+0x48>)
 8000660:	2200      	movs	r2, #0
 8000662:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <MX_DCMI_Init+0x48>)
 8000666:	2200      	movs	r2, #0
 8000668:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800066a:	4b06      	ldr	r3, [pc, #24]	; (8000684 <MX_DCMI_Init+0x48>)
 800066c:	2200      	movs	r2, #0
 800066e:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000670:	4804      	ldr	r0, [pc, #16]	; (8000684 <MX_DCMI_Init+0x48>)
 8000672:	f000 fde1 	bl	8001238 <HAL_DCMI_Init>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 800067c:	f000 f8b0 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	20000028 	.word	0x20000028
 8000688:	50050000 	.word	0x50050000

0800068c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000690:	4b12      	ldr	r3, [pc, #72]	; (80006dc <MX_I2C1_Init+0x50>)
 8000692:	4a13      	ldr	r2, [pc, #76]	; (80006e0 <MX_I2C1_Init+0x54>)
 8000694:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_I2C1_Init+0x50>)
 8000698:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <MX_I2C1_Init+0x58>)
 800069a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800069c:	4b0f      	ldr	r3, [pc, #60]	; (80006dc <MX_I2C1_Init+0x50>)
 800069e:	2200      	movs	r2, #0
 80006a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_I2C1_Init+0x50>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_I2C1_Init+0x50>)
 80006aa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006ae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_I2C1_Init+0x50>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006bc:	4b07      	ldr	r3, [pc, #28]	; (80006dc <MX_I2C1_Init+0x50>)
 80006be:	2200      	movs	r2, #0
 80006c0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_I2C1_Init+0x50>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_I2C1_Init+0x50>)
 80006ca:	f002 fcd9 	bl	8003080 <HAL_I2C_Init>
 80006ce:	4603      	mov	r3, r0
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d001      	beq.n	80006d8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006d4:	f000 f884 	bl	80007e0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d8:	bf00      	nop
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	200000c8 	.word	0x200000c8
 80006e0:	40005400 	.word	0x40005400
 80006e4:	000186a0 	.word	0x000186a0

080006e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <MX_DMA_Init+0x3c>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a0b      	ldr	r2, [pc, #44]	; (8000724 <MX_DMA_Init+0x3c>)
 80006f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b09      	ldr	r3, [pc, #36]	; (8000724 <MX_DMA_Init+0x3c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800070a:	2200      	movs	r2, #0
 800070c:	2100      	movs	r1, #0
 800070e:	2039      	movs	r0, #57	; 0x39
 8000710:	f000 fb69 	bl	8000de6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000714:	2039      	movs	r0, #57	; 0x39
 8000716:	f000 fb82 	bl	8000e1e <HAL_NVIC_EnableIRQ>

}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	40023800 	.word	0x40023800

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b25      	ldr	r3, [pc, #148]	; (80007d8 <MX_GPIO_Init+0xb0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a24      	ldr	r2, [pc, #144]	; (80007d8 <MX_GPIO_Init+0xb0>)
 8000748:	f043 0310 	orr.w	r3, r3, #16
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b22      	ldr	r3, [pc, #136]	; (80007d8 <MX_GPIO_Init+0xb0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0310 	and.w	r3, r3, #16
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_GPIO_Init+0xb0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a1d      	ldr	r2, [pc, #116]	; (80007d8 <MX_GPIO_Init+0xb0>)
 8000764:	f043 0301 	orr.w	r3, r3, #1
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_GPIO_Init+0xb0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0301 	and.w	r3, r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b17      	ldr	r3, [pc, #92]	; (80007d8 <MX_GPIO_Init+0xb0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a16      	ldr	r2, [pc, #88]	; (80007d8 <MX_GPIO_Init+0xb0>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b14      	ldr	r3, [pc, #80]	; (80007d8 <MX_GPIO_Init+0xb0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b10      	ldr	r3, [pc, #64]	; (80007d8 <MX_GPIO_Init+0xb0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a0f      	ldr	r2, [pc, #60]	; (80007d8 <MX_GPIO_Init+0xb0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b0d      	ldr	r3, [pc, #52]	; (80007d8 <MX_GPIO_Init+0xb0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007bc:	2300      	movs	r3, #0
 80007be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 80007c0:	2300      	movs	r3, #0
 80007c2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007c4:	f107 0314 	add.w	r3, r7, #20
 80007c8:	4619      	mov	r1, r3
 80007ca:	4804      	ldr	r0, [pc, #16]	; (80007dc <MX_GPIO_Init+0xb4>)
 80007cc:	f002 fabc 	bl	8002d48 <HAL_GPIO_Init>

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	; 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40020000 	.word	0x40020000

080007e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e4:	b672      	cpsid	i
}
 80007e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <Error_Handler+0x8>
	...

080007ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007ec:	b480      	push	{r7}
 80007ee:	b083      	sub	sp, #12
 80007f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	4b10      	ldr	r3, [pc, #64]	; (8000838 <HAL_MspInit+0x4c>)
 80007f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fa:	4a0f      	ldr	r2, [pc, #60]	; (8000838 <HAL_MspInit+0x4c>)
 80007fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000800:	6453      	str	r3, [r2, #68]	; 0x44
 8000802:	4b0d      	ldr	r3, [pc, #52]	; (8000838 <HAL_MspInit+0x4c>)
 8000804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080a:	607b      	str	r3, [r7, #4]
 800080c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	603b      	str	r3, [r7, #0]
 8000812:	4b09      	ldr	r3, [pc, #36]	; (8000838 <HAL_MspInit+0x4c>)
 8000814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000816:	4a08      	ldr	r2, [pc, #32]	; (8000838 <HAL_MspInit+0x4c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	6413      	str	r3, [r2, #64]	; 0x40
 800081e:	4b06      	ldr	r3, [pc, #24]	; (8000838 <HAL_MspInit+0x4c>)
 8000820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	603b      	str	r3, [r7, #0]
 8000828:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082a:	bf00      	nop
 800082c:	370c      	adds	r7, #12
 800082e:	46bd      	mov	sp, r7
 8000830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000834:	4770      	bx	lr
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	; 0x30
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000844:	f107 031c 	add.w	r3, r7, #28
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]
 8000852:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	4a68      	ldr	r2, [pc, #416]	; (80009fc <HAL_DCMI_MspInit+0x1c0>)
 800085a:	4293      	cmp	r3, r2
 800085c:	f040 80ca 	bne.w	80009f4 <HAL_DCMI_MspInit+0x1b8>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000860:	2300      	movs	r3, #0
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	4b66      	ldr	r3, [pc, #408]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 8000866:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000868:	4a65      	ldr	r2, [pc, #404]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 800086a:	f043 0301 	orr.w	r3, r3, #1
 800086e:	6353      	str	r3, [r2, #52]	; 0x34
 8000870:	4b63      	ldr	r3, [pc, #396]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 8000872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000874:	f003 0301 	and.w	r3, r3, #1
 8000878:	61bb      	str	r3, [r7, #24]
 800087a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	4b5f      	ldr	r3, [pc, #380]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 8000882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000884:	4a5e      	ldr	r2, [pc, #376]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 8000886:	f043 0310 	orr.w	r3, r3, #16
 800088a:	6313      	str	r3, [r2, #48]	; 0x30
 800088c:	4b5c      	ldr	r3, [pc, #368]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 800088e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000890:	f003 0310 	and.w	r3, r3, #16
 8000894:	617b      	str	r3, [r7, #20]
 8000896:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000898:	2300      	movs	r3, #0
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	4b58      	ldr	r3, [pc, #352]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 800089e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a0:	4a57      	ldr	r2, [pc, #348]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 80008a2:	f043 0301 	orr.w	r3, r3, #1
 80008a6:	6313      	str	r3, [r2, #48]	; 0x30
 80008a8:	4b55      	ldr	r3, [pc, #340]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 80008aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ac:	f003 0301 	and.w	r3, r3, #1
 80008b0:	613b      	str	r3, [r7, #16]
 80008b2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b4:	2300      	movs	r3, #0
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	4b51      	ldr	r3, [pc, #324]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 80008ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008bc:	4a50      	ldr	r2, [pc, #320]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 80008be:	f043 0304 	orr.w	r3, r3, #4
 80008c2:	6313      	str	r3, [r2, #48]	; 0x30
 80008c4:	4b4e      	ldr	r3, [pc, #312]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 80008c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c8:	f003 0304 	and.w	r3, r3, #4
 80008cc:	60fb      	str	r3, [r7, #12]
 80008ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d0:	2300      	movs	r3, #0
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	4b4a      	ldr	r3, [pc, #296]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 80008d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d8:	4a49      	ldr	r2, [pc, #292]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 80008da:	f043 0302 	orr.w	r3, r3, #2
 80008de:	6313      	str	r3, [r2, #48]	; 0x30
 80008e0:	4b47      	ldr	r3, [pc, #284]	; (8000a00 <HAL_DCMI_MspInit+0x1c4>)
 80008e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e4:	f003 0302 	and.w	r3, r3, #2
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PC9     ------> DCMI_D3
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80008ec:	2370      	movs	r3, #112	; 0x70
 80008ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 80008fc:	230d      	movs	r3, #13
 80008fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	483f      	ldr	r0, [pc, #252]	; (8000a04 <HAL_DCMI_MspInit+0x1c8>)
 8000908:	f002 fa1e 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800090c:	2350      	movs	r3, #80	; 0x50
 800090e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800091c:	230d      	movs	r3, #13
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4838      	ldr	r0, [pc, #224]	; (8000a08 <HAL_DCMI_MspInit+0x1cc>)
 8000928:	f002 fa0e 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800092c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8000930:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800093a:	2300      	movs	r3, #0
 800093c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800093e:	230d      	movs	r3, #13
 8000940:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000942:	f107 031c 	add.w	r3, r7, #28
 8000946:	4619      	mov	r1, r3
 8000948:	4830      	ldr	r0, [pc, #192]	; (8000a0c <HAL_DCMI_MspInit+0x1d0>)
 800094a:	f002 f9fd 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800094e:	23c0      	movs	r3, #192	; 0xc0
 8000950:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000952:	2302      	movs	r3, #2
 8000954:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 800095e:	230d      	movs	r3, #13
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000962:	f107 031c 	add.w	r3, r7, #28
 8000966:	4619      	mov	r1, r3
 8000968:	4829      	ldr	r0, [pc, #164]	; (8000a10 <HAL_DCMI_MspInit+0x1d4>)
 800096a:	f002 f9ed 	bl	8002d48 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 800096e:	4b29      	ldr	r3, [pc, #164]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 8000970:	4a29      	ldr	r2, [pc, #164]	; (8000a18 <HAL_DCMI_MspInit+0x1dc>)
 8000972:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 8000976:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800097a:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800097c:	4b25      	ldr	r3, [pc, #148]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000982:	4b24      	ldr	r3, [pc, #144]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 8000984:	2200      	movs	r2, #0
 8000986:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000988:	4b22      	ldr	r3, [pc, #136]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 800098a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800098e:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000990:	4b20      	ldr	r3, [pc, #128]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 8000992:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000996:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000998:	4b1e      	ldr	r3, [pc, #120]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 800099a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800099e:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 80009a0:	4b1c      	ldr	r3, [pc, #112]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_HIGH;
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 80009a8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009ac:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80009ae:	4b19      	ldr	r3, [pc, #100]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 80009b0:	2204      	movs	r2, #4
 80009b2:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_dcmi.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80009b4:	4b17      	ldr	r3, [pc, #92]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 80009b6:	2203      	movs	r2, #3
 80009b8:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_dcmi.Init.MemBurst = DMA_MBURST_INC4;
 80009ba:	4b16      	ldr	r3, [pc, #88]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 80009bc:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80009c0:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_dcmi.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80009c2:	4b14      	ldr	r3, [pc, #80]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 80009c4:	2200      	movs	r2, #0
 80009c6:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 80009c8:	4812      	ldr	r0, [pc, #72]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 80009ca:	f000 fca3 	bl	8001314 <HAL_DMA_Init>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d001      	beq.n	80009d8 <HAL_DCMI_MspInit+0x19c>
    {
      Error_Handler();
 80009d4:	f7ff ff04 	bl	80007e0 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	4a0e      	ldr	r2, [pc, #56]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 80009dc:	639a      	str	r2, [r3, #56]	; 0x38
 80009de:	4a0d      	ldr	r2, [pc, #52]	; (8000a14 <HAL_DCMI_MspInit+0x1d8>)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 80009e4:	2200      	movs	r2, #0
 80009e6:	2100      	movs	r1, #0
 80009e8:	204e      	movs	r0, #78	; 0x4e
 80009ea:	f000 f9fc 	bl	8000de6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 80009ee:	204e      	movs	r0, #78	; 0x4e
 80009f0:	f000 fa15 	bl	8000e1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 80009f4:	bf00      	nop
 80009f6:	3730      	adds	r7, #48	; 0x30
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	50050000 	.word	0x50050000
 8000a00:	40023800 	.word	0x40023800
 8000a04:	40021000 	.word	0x40021000
 8000a08:	40020000 	.word	0x40020000
 8000a0c:	40020800 	.word	0x40020800
 8000a10:	40020400 	.word	0x40020400
 8000a14:	20000068 	.word	0x20000068
 8000a18:	40026428 	.word	0x40026428

08000a1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	4a19      	ldr	r2, [pc, #100]	; (8000aa0 <HAL_I2C_MspInit+0x84>)
 8000a3a:	4293      	cmp	r3, r2
 8000a3c:	d12c      	bne.n	8000a98 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	613b      	str	r3, [r7, #16]
 8000a42:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a17      	ldr	r2, [pc, #92]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a48:	f043 0302 	orr.w	r3, r3, #2
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0302 	and.w	r3, r3, #2
 8000a56:	613b      	str	r3, [r7, #16]
 8000a58:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a5a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a60:	2312      	movs	r3, #18
 8000a62:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a68:	2303      	movs	r3, #3
 8000a6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a6c:	2304      	movs	r3, #4
 8000a6e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a70:	f107 0314 	add.w	r3, r7, #20
 8000a74:	4619      	mov	r1, r3
 8000a76:	480c      	ldr	r0, [pc, #48]	; (8000aa8 <HAL_I2C_MspInit+0x8c>)
 8000a78:	f002 f966 	bl	8002d48 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a84:	4a07      	ldr	r2, [pc, #28]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a86:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000a8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HAL_I2C_MspInit+0x88>)
 8000a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a94:	60fb      	str	r3, [r7, #12]
 8000a96:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000a98:	bf00      	nop
 8000a9a:	3728      	adds	r7, #40	; 0x28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40005400 	.word	0x40005400
 8000aa4:	40023800 	.word	0x40023800
 8000aa8:	40020400 	.word	0x40020400

08000aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ab0:	e7fe      	b.n	8000ab0 <NMI_Handler+0x4>

08000ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ab2:	b480      	push	{r7}
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ab6:	e7fe      	b.n	8000ab6 <HardFault_Handler+0x4>

08000ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000abc:	e7fe      	b.n	8000abc <MemManage_Handler+0x4>

08000abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ac2:	e7fe      	b.n	8000ac2 <BusFault_Handler+0x4>

08000ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ac8:	e7fe      	b.n	8000ac8 <UsageFault_Handler+0x4>

08000aca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aca:	b480      	push	{r7}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr

08000ad8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000aea:	bf00      	nop
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr

08000af4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000af8:	f000 f87a 	bl	8000bf0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}

08000b00 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <DMA2_Stream1_IRQHandler+0x10>)
 8000b06:	f000 fd2d 	bl	8001564 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000068 	.word	0x20000068

08000b14 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <DCMI_IRQHandler+0x10>)
 8000b1a:	f000 fa3b 	bl	8000f94 <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000028 	.word	0x20000028

08000b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b2c:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <SystemInit+0x20>)
 8000b2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b32:	4a05      	ldr	r2, [pc, #20]	; (8000b48 <SystemInit+0x20>)
 8000b34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b3c:	bf00      	nop
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000ed00 	.word	0xe000ed00

08000b4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b50:	4b0e      	ldr	r3, [pc, #56]	; (8000b8c <HAL_Init+0x40>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0d      	ldr	r2, [pc, #52]	; (8000b8c <HAL_Init+0x40>)
 8000b56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b5a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b5c:	4b0b      	ldr	r3, [pc, #44]	; (8000b8c <HAL_Init+0x40>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a0a      	ldr	r2, [pc, #40]	; (8000b8c <HAL_Init+0x40>)
 8000b62:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b66:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b08      	ldr	r3, [pc, #32]	; (8000b8c <HAL_Init+0x40>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	4a07      	ldr	r2, [pc, #28]	; (8000b8c <HAL_Init+0x40>)
 8000b6e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b72:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b74:	2003      	movs	r0, #3
 8000b76:	f000 f92b 	bl	8000dd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b7a:	200f      	movs	r0, #15
 8000b7c:	f000 f808 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b80:	f7ff fe34 	bl	80007ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b84:	2300      	movs	r3, #0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023c00 	.word	0x40023c00

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b082      	sub	sp, #8
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b12      	ldr	r3, [pc, #72]	; (8000be4 <HAL_InitTick+0x54>)
 8000b9a:	681a      	ldr	r2, [r3, #0]
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <HAL_InitTick+0x58>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ba6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000baa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f000 f943 	bl	8000e3a <HAL_SYSTICK_Config>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e00e      	b.n	8000bdc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b0f      	cmp	r3, #15
 8000bc2:	d80a      	bhi.n	8000bda <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	6879      	ldr	r1, [r7, #4]
 8000bc8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bcc:	f000 f90b 	bl	8000de6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd0:	4a06      	ldr	r2, [pc, #24]	; (8000bec <HAL_InitTick+0x5c>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	e000      	b.n	8000bdc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bda:	2301      	movs	r3, #1
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	3708      	adds	r7, #8
 8000be0:	46bd      	mov	sp, r7
 8000be2:	bd80      	pop	{r7, pc}
 8000be4:	20000000 	.word	0x20000000
 8000be8:	20000008 	.word	0x20000008
 8000bec:	20000004 	.word	0x20000004

08000bf0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf4:	4b06      	ldr	r3, [pc, #24]	; (8000c10 <HAL_IncTick+0x20>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x24>)
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	4413      	add	r3, r2
 8000c00:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <HAL_IncTick+0x24>)
 8000c02:	6013      	str	r3, [r2, #0]
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr
 8000c0e:	bf00      	nop
 8000c10:	20000008 	.word	0x20000008
 8000c14:	2000011c 	.word	0x2000011c

08000c18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c1c:	4b03      	ldr	r3, [pc, #12]	; (8000c2c <HAL_GetTick+0x14>)
 8000c1e:	681b      	ldr	r3, [r3, #0]
}
 8000c20:	4618      	mov	r0, r3
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr
 8000c2a:	bf00      	nop
 8000c2c:	2000011c 	.word	0x2000011c

08000c30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	f003 0307 	and.w	r3, r3, #7
 8000c3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c40:	4b0c      	ldr	r3, [pc, #48]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c46:	68ba      	ldr	r2, [r7, #8]
 8000c48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c54:	68bb      	ldr	r3, [r7, #8]
 8000c56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c62:	4a04      	ldr	r2, [pc, #16]	; (8000c74 <__NVIC_SetPriorityGrouping+0x44>)
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	60d3      	str	r3, [r2, #12]
}
 8000c68:	bf00      	nop
 8000c6a:	3714      	adds	r7, #20
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c7c:	4b04      	ldr	r3, [pc, #16]	; (8000c90 <__NVIC_GetPriorityGrouping+0x18>)
 8000c7e:	68db      	ldr	r3, [r3, #12]
 8000c80:	0a1b      	lsrs	r3, r3, #8
 8000c82:	f003 0307 	and.w	r3, r3, #7
}
 8000c86:	4618      	mov	r0, r3
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	e000ed00 	.word	0xe000ed00

08000c94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	db0b      	blt.n	8000cbe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ca6:	79fb      	ldrb	r3, [r7, #7]
 8000ca8:	f003 021f 	and.w	r2, r3, #31
 8000cac:	4907      	ldr	r1, [pc, #28]	; (8000ccc <__NVIC_EnableIRQ+0x38>)
 8000cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb2:	095b      	lsrs	r3, r3, #5
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	fa00 f202 	lsl.w	r2, r0, r2
 8000cba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cbe:	bf00      	nop
 8000cc0:	370c      	adds	r7, #12
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	e000e100 	.word	0xe000e100

08000cd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd0:	b480      	push	{r7}
 8000cd2:	b083      	sub	sp, #12
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	6039      	str	r1, [r7, #0]
 8000cda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db0a      	blt.n	8000cfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	b2da      	uxtb	r2, r3
 8000ce8:	490c      	ldr	r1, [pc, #48]	; (8000d1c <__NVIC_SetPriority+0x4c>)
 8000cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cee:	0112      	lsls	r2, r2, #4
 8000cf0:	b2d2      	uxtb	r2, r2
 8000cf2:	440b      	add	r3, r1
 8000cf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf8:	e00a      	b.n	8000d10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfa:	683b      	ldr	r3, [r7, #0]
 8000cfc:	b2da      	uxtb	r2, r3
 8000cfe:	4908      	ldr	r1, [pc, #32]	; (8000d20 <__NVIC_SetPriority+0x50>)
 8000d00:	79fb      	ldrb	r3, [r7, #7]
 8000d02:	f003 030f 	and.w	r3, r3, #15
 8000d06:	3b04      	subs	r3, #4
 8000d08:	0112      	lsls	r2, r2, #4
 8000d0a:	b2d2      	uxtb	r2, r2
 8000d0c:	440b      	add	r3, r1
 8000d0e:	761a      	strb	r2, [r3, #24]
}
 8000d10:	bf00      	nop
 8000d12:	370c      	adds	r7, #12
 8000d14:	46bd      	mov	sp, r7
 8000d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1a:	4770      	bx	lr
 8000d1c:	e000e100 	.word	0xe000e100
 8000d20:	e000ed00 	.word	0xe000ed00

08000d24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b089      	sub	sp, #36	; 0x24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	60f8      	str	r0, [r7, #12]
 8000d2c:	60b9      	str	r1, [r7, #8]
 8000d2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f003 0307 	and.w	r3, r3, #7
 8000d36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f1c3 0307 	rsb	r3, r3, #7
 8000d3e:	2b04      	cmp	r3, #4
 8000d40:	bf28      	it	cs
 8000d42:	2304      	movcs	r3, #4
 8000d44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3304      	adds	r3, #4
 8000d4a:	2b06      	cmp	r3, #6
 8000d4c:	d902      	bls.n	8000d54 <NVIC_EncodePriority+0x30>
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3b03      	subs	r3, #3
 8000d52:	e000      	b.n	8000d56 <NVIC_EncodePriority+0x32>
 8000d54:	2300      	movs	r3, #0
 8000d56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d58:	f04f 32ff 	mov.w	r2, #4294967295
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43da      	mvns	r2, r3
 8000d64:	68bb      	ldr	r3, [r7, #8]
 8000d66:	401a      	ands	r2, r3
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	fa01 f303 	lsl.w	r3, r1, r3
 8000d76:	43d9      	mvns	r1, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d7c:	4313      	orrs	r3, r2
         );
}
 8000d7e:	4618      	mov	r0, r3
 8000d80:	3724      	adds	r7, #36	; 0x24
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr
	...

08000d8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3b01      	subs	r3, #1
 8000d98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d9c:	d301      	bcc.n	8000da2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e00f      	b.n	8000dc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da2:	4a0a      	ldr	r2, [pc, #40]	; (8000dcc <SysTick_Config+0x40>)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	3b01      	subs	r3, #1
 8000da8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000daa:	210f      	movs	r1, #15
 8000dac:	f04f 30ff 	mov.w	r0, #4294967295
 8000db0:	f7ff ff8e 	bl	8000cd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db4:	4b05      	ldr	r3, [pc, #20]	; (8000dcc <SysTick_Config+0x40>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dba:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <SysTick_Config+0x40>)
 8000dbc:	2207      	movs	r2, #7
 8000dbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc0:	2300      	movs	r3, #0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3708      	adds	r7, #8
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	e000e010 	.word	0xe000e010

08000dd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd8:	6878      	ldr	r0, [r7, #4]
 8000dda:	f7ff ff29 	bl	8000c30 <__NVIC_SetPriorityGrouping>
}
 8000dde:	bf00      	nop
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b086      	sub	sp, #24
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	4603      	mov	r3, r0
 8000dee:	60b9      	str	r1, [r7, #8]
 8000df0:	607a      	str	r2, [r7, #4]
 8000df2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df4:	2300      	movs	r3, #0
 8000df6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000df8:	f7ff ff3e 	bl	8000c78 <__NVIC_GetPriorityGrouping>
 8000dfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfe:	687a      	ldr	r2, [r7, #4]
 8000e00:	68b9      	ldr	r1, [r7, #8]
 8000e02:	6978      	ldr	r0, [r7, #20]
 8000e04:	f7ff ff8e 	bl	8000d24 <NVIC_EncodePriority>
 8000e08:	4602      	mov	r2, r0
 8000e0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0e:	4611      	mov	r1, r2
 8000e10:	4618      	mov	r0, r3
 8000e12:	f7ff ff5d 	bl	8000cd0 <__NVIC_SetPriority>
}
 8000e16:	bf00      	nop
 8000e18:	3718      	adds	r7, #24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	bd80      	pop	{r7, pc}

08000e1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1e:	b580      	push	{r7, lr}
 8000e20:	b082      	sub	sp, #8
 8000e22:	af00      	add	r7, sp, #0
 8000e24:	4603      	mov	r3, r0
 8000e26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ff31 	bl	8000c94 <__NVIC_EnableIRQ>
}
 8000e32:	bf00      	nop
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}

08000e3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3a:	b580      	push	{r7, lr}
 8000e3c:	b082      	sub	sp, #8
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f7ff ffa2 	bl	8000d8c <SysTick_Config>
 8000e48:	4603      	mov	r3, r0
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	3708      	adds	r7, #8
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
	...

08000e54 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8000e66:	68fb      	ldr	r3, [r7, #12]
 8000e68:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d101      	bne.n	8000e74 <HAL_DCMI_Start_DMA+0x20>
 8000e70:	2302      	movs	r3, #2
 8000e72:	e086      	b.n	8000f82 <HAL_DCMI_Start_DMA+0x12e>
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2201      	movs	r2, #1
 8000e78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	2202      	movs	r2, #2
 8000e80:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000e92:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	681a      	ldr	r2, [r3, #0]
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	f022 0202 	bic.w	r2, r2, #2
 8000ea2:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	6819      	ldr	r1, [r3, #0]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	68ba      	ldr	r2, [r7, #8]
 8000eb0:	430a      	orrs	r2, r1
 8000eb2:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000eb8:	4a34      	ldr	r2, [pc, #208]	; (8000f8c <HAL_DCMI_Start_DMA+0x138>)
 8000eba:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec0:	4a33      	ldr	r2, [pc, #204]	; (8000f90 <HAL_DCMI_Start_DMA+0x13c>)
 8000ec2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ec8:	2200      	movs	r2, #0
 8000eca:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	2200      	movs	r2, #0
 8000ed0:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ede:	d20a      	bcs.n	8000ef6 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	3328      	adds	r3, #40	; 0x28
 8000eea:	4619      	mov	r1, r3
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	687a      	ldr	r2, [r7, #4]
 8000ef0:	f000 fabe 	bl	8001470 <HAL_DMA_Start_IT>
 8000ef4:	e038      	b.n	8000f68 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000efa:	4a24      	ldr	r2, [pc, #144]	; (8000f8c <HAL_DCMI_Start_DMA+0x138>)
 8000efc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	2201      	movs	r2, #1
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	683a      	ldr	r2, [r7, #0]
 8000f08:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	687a      	ldr	r2, [r7, #4]
 8000f0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 8000f10:	e009      	b.n	8000f26 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 8000f12:	68fb      	ldr	r3, [r7, #12]
 8000f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f16:	085a      	lsrs	r2, r3, #1
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f20:	005a      	lsls	r2, r3, #1
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2e:	d2f0      	bcs.n	8000f12 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f34:	1e9a      	subs	r2, r3, #2
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	687a      	ldr	r2, [r7, #4]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8000f52:	68fb      	ldr	r3, [r7, #12]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	3328      	adds	r3, #40	; 0x28
 8000f58:	4619      	mov	r1, r3
 8000f5a:	68fb      	ldr	r3, [r7, #12]
 8000f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	697b      	ldr	r3, [r7, #20]
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	f000 fd68 	bl	8001a38 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f042 0201 	orr.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8000f80:	2300      	movs	r3, #0
}
 8000f82:	4618      	mov	r0, r3
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	080010e1 	.word	0x080010e1
 8000f90:	0800120b 	.word	0x0800120b

08000f94 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	691b      	ldr	r3, [r3, #16]
 8000fa2:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d016      	beq.n	8000fdc <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000fba:	f043 0202 	orr.w	r2, r3, #2
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	2204      	movs	r2, #4
 8000fc6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fce:	4a2f      	ldr	r2, [pc, #188]	; (800108c <HAL_DCMI_IRQHandler+0xf8>)
 8000fd0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f000 faa2 	bl	8001520 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8000fdc:	68fb      	ldr	r3, [r7, #12]
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d016      	beq.n	8001014 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2202      	movs	r2, #2
 8000fec:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ff2:	f043 0201 	orr.w	r2, r3, #1
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001006:	4a21      	ldr	r2, [pc, #132]	; (800108c <HAL_DCMI_IRQHandler+0xf8>)
 8001008:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800100e:	4618      	mov	r0, r3
 8001010:	f000 fa86 	bl	8001520 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	f003 0310 	and.w	r3, r3, #16
 800101a:	2b00      	cmp	r3, #0
 800101c:	d006      	beq.n	800102c <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	2210      	movs	r2, #16
 8001024:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 8001026:	6878      	ldr	r0, [r7, #4]
 8001028:	f000 f83c 	bl	80010a4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f003 0308 	and.w	r3, r3, #8
 8001032:	2b00      	cmp	r3, #0
 8001034:	d006      	beq.n	8001044 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	2208      	movs	r2, #8
 800103c:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800103e:	6878      	ldr	r0, [r7, #4]
 8001040:	f000 f83a 	bl	80010b8 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	f003 0301 	and.w	r3, r3, #1
 800104a:	2b00      	cmp	r3, #0
 800104c:	d019      	beq.n	8001082 <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f003 0302 	and.w	r3, r3, #2
 8001058:	2b02      	cmp	r3, #2
 800105a:	d107      	bne.n	800106c <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	68da      	ldr	r2, [r3, #12]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f022 021e 	bic.w	r2, r2, #30
 800106a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	68da      	ldr	r2, [r3, #12]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	f022 0201 	bic.w	r2, r2, #1
 800107a:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 800107c:	6878      	ldr	r0, [r7, #4]
 800107e:	f000 f825 	bl	80010cc <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 8001082:	bf00      	nop
 8001084:	3710      	adds	r7, #16
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	0800120b 	.word	0x0800120b

08001090 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001090:	b480      	push	{r7}
 8001092:	b083      	sub	sp, #12
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr

080010a4 <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 80010ac:	bf00      	nop
 80010ae:	370c      	adds	r7, #12
 80010b0:	46bd      	mov	sp, r7
 80010b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b6:	4770      	bx	lr

080010b8 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b083      	sub	sp, #12
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 80010c0:	bf00      	nop
 80010c2:	370c      	adds	r7, #12
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr

080010cc <HAL_DCMI_FrameEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 80010d4:	bf00      	nop
 80010d6:	370c      	adds	r7, #12
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b084      	sub	sp, #16
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010f0:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 80010f2:	68bb      	ldr	r3, [r7, #8]
 80010f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d043      	beq.n	8001182 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001106:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800110c:	f003 0301 	and.w	r3, r3, #1
 8001110:	2b00      	cmp	r3, #0
 8001112:	d118      	bne.n	8001146 <DCMI_DMAXferCplt+0x66>
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d015      	beq.n	8001146 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 800111a:	68bb      	ldr	r3, [r7, #8]
 800111c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800112c:	00da      	lsls	r2, r3, #3
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	4413      	add	r3, r2
 8001132:	2200      	movs	r2, #0
 8001134:	4619      	mov	r1, r3
 8001136:	f001 fdc7 	bl	8002cc8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800113e:	1e5a      	subs	r2, r3, #1
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	629a      	str	r2, [r3, #40]	; 0x28
 8001144:	e044      	b.n	80011d0 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001146:	68bb      	ldr	r3, [r7, #8]
 8001148:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001152:	2b00      	cmp	r3, #0
 8001154:	d13c      	bne.n	80011d0 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 8001156:	68bb      	ldr	r3, [r7, #8]
 8001158:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001168:	00da      	lsls	r2, r3, #3
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	4413      	add	r3, r2
 800116e:	2201      	movs	r2, #1
 8001170:	4619      	mov	r1, r3
 8001172:	f001 fda9 	bl	8002cc8 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800117a:	1e5a      	subs	r2, r3, #1
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	629a      	str	r2, [r3, #40]	; 0x28
 8001180:	e026      	b.n	80011d0 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800118e:	2b00      	cmp	r3, #0
 8001190:	d006      	beq.n	80011a0 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68ba      	ldr	r2, [r7, #8]
 800119a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	e017      	b.n	80011d0 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d10f      	bne.n	80011d0 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80011b4:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 80011b6:	68bb      	ldr	r3, [r7, #8]
 80011b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011ba:	0099      	lsls	r1, r3, #2
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	440a      	add	r2, r1
 80011c6:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 80011c8:	68bb      	ldr	r3, [r7, #8]
 80011ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d8:	429a      	cmp	r2, r3
 80011da:	d112      	bne.n	8001202 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	68da      	ldr	r2, [r3, #12]
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	f042 0201 	orr.w	r2, r2, #1
 80011ea:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	2b02      	cmp	r3, #2
 80011f8:	d103      	bne.n	8001202 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 80011fa:	68bb      	ldr	r3, [r7, #8]
 80011fc:	2201      	movs	r2, #1
 80011fe:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}

0800120a <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 800120a:	b580      	push	{r7, lr}
 800120c:	b084      	sub	sp, #16
 800120e:	af00      	add	r7, sp, #0
 8001210:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001216:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800121e:	2b02      	cmp	r3, #2
 8001220:	d003      	beq.n	800122a <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	2201      	movs	r2, #1
 8001226:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 800122a:	68f8      	ldr	r0, [r7, #12]
 800122c:	f7ff ff30 	bl	8001090 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d101      	bne.n	800124a <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e05f      	b.n	800130a <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001250:	b2db      	uxtb	r3, r3
 8001252:	2b00      	cmp	r3, #0
 8001254:	d109      	bne.n	800126a <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	2200      	movs	r2, #0
 800125a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f7ff faec 	bl	800083c <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001264:	6878      	ldr	r0, [r7, #4]
 8001266:	f7ff fae9 	bl	800083c <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2202      	movs	r2, #2
 800126e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	687a      	ldr	r2, [r7, #4]
 800127a:	6812      	ldr	r2, [r2, #0]
 800127c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001280:	f023 0308 	bic.w	r3, r3, #8
 8001284:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	6819      	ldr	r1, [r3, #0]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	685a      	ldr	r2, [r3, #4]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	695b      	ldr	r3, [r3, #20]
 8001294:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800129a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 80012a6:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	699b      	ldr	r3, [r3, #24]
 80012ac:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 80012b2:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	430a      	orrs	r2, r1
 80012ba:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b10      	cmp	r3, #16
 80012c2:	d112      	bne.n	80012ea <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	7f1b      	ldrb	r3, [r3, #28]
 80012c8:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	7f5b      	ldrb	r3, [r3, #29]
 80012ce:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80012d0:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	7f9b      	ldrb	r3, [r3, #30]
 80012d6:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 80012d8:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	7fdb      	ldrb	r3, [r3, #31]
 80012e0:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 80012e6:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 80012e8:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68da      	ldr	r2, [r3, #12]
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f042 021e 	orr.w	r2, r2, #30
 80012f8:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	2200      	movs	r2, #0
 80012fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2201      	movs	r2, #1
 8001304:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3708      	adds	r7, #8
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}
	...

08001314 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b086      	sub	sp, #24
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800131c:	2300      	movs	r3, #0
 800131e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001320:	f7ff fc7a 	bl	8000c18 <HAL_GetTick>
 8001324:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e099      	b.n	8001464 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	2202      	movs	r2, #2
 8001334:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0201 	bic.w	r2, r2, #1
 800134e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001350:	e00f      	b.n	8001372 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001352:	f7ff fc61 	bl	8000c18 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b05      	cmp	r3, #5
 800135e:	d908      	bls.n	8001372 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2220      	movs	r2, #32
 8001364:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2203      	movs	r2, #3
 800136a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e078      	b.n	8001464 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0301 	and.w	r3, r3, #1
 800137c:	2b00      	cmp	r3, #0
 800137e:	d1e8      	bne.n	8001352 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001388:	697a      	ldr	r2, [r7, #20]
 800138a:	4b38      	ldr	r3, [pc, #224]	; (800146c <HAL_DMA_Init+0x158>)
 800138c:	4013      	ands	r3, r2
 800138e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	685a      	ldr	r2, [r3, #4]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800139e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	691b      	ldr	r3, [r3, #16]
 80013a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	6a1b      	ldr	r3, [r3, #32]
 80013bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013be:	697a      	ldr	r2, [r7, #20]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c8:	2b04      	cmp	r3, #4
 80013ca:	d107      	bne.n	80013dc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4313      	orrs	r3, r2
 80013d6:	697a      	ldr	r2, [r7, #20]
 80013d8:	4313      	orrs	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	697a      	ldr	r2, [r7, #20]
 80013e2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	695b      	ldr	r3, [r3, #20]
 80013ea:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	f023 0307 	bic.w	r3, r3, #7
 80013f2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f8:	697a      	ldr	r2, [r7, #20]
 80013fa:	4313      	orrs	r3, r2
 80013fc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001402:	2b04      	cmp	r3, #4
 8001404:	d117      	bne.n	8001436 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4313      	orrs	r3, r2
 800140e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001414:	2b00      	cmp	r3, #0
 8001416:	d00e      	beq.n	8001436 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 fa91 	bl	8001940 <DMA_CheckFifoParam>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d008      	beq.n	8001436 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2240      	movs	r2, #64	; 0x40
 8001428:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2201      	movs	r2, #1
 800142e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001432:	2301      	movs	r3, #1
 8001434:	e016      	b.n	8001464 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800143e:	6878      	ldr	r0, [r7, #4]
 8001440:	f000 fa48 	bl	80018d4 <DMA_CalcBaseAndBitshift>
 8001444:	4603      	mov	r3, r0
 8001446:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800144c:	223f      	movs	r2, #63	; 0x3f
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2201      	movs	r2, #1
 800145e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001462:	2300      	movs	r3, #0
}
 8001464:	4618      	mov	r0, r3
 8001466:	3718      	adds	r7, #24
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	f010803f 	.word	0xf010803f

08001470 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
 800147c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800148e:	2b01      	cmp	r3, #1
 8001490:	d101      	bne.n	8001496 <HAL_DMA_Start_IT+0x26>
 8001492:	2302      	movs	r3, #2
 8001494:	e040      	b.n	8001518 <HAL_DMA_Start_IT+0xa8>
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	2201      	movs	r2, #1
 800149a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	d12f      	bne.n	800150a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	2202      	movs	r2, #2
 80014ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	687a      	ldr	r2, [r7, #4]
 80014bc:	68b9      	ldr	r1, [r7, #8]
 80014be:	68f8      	ldr	r0, [r7, #12]
 80014c0:	f000 f9da 	bl	8001878 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c8:	223f      	movs	r2, #63	; 0x3f
 80014ca:	409a      	lsls	r2, r3
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f042 0216 	orr.w	r2, r2, #22
 80014de:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d007      	beq.n	80014f8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681a      	ldr	r2, [r3, #0]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f042 0208 	orr.w	r2, r2, #8
 80014f6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f042 0201 	orr.w	r2, r2, #1
 8001506:	601a      	str	r2, [r3, #0]
 8001508:	e005      	b.n	8001516 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	2200      	movs	r2, #0
 800150e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001512:	2302      	movs	r3, #2
 8001514:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001516:	7dfb      	ldrb	r3, [r7, #23]
}
 8001518:	4618      	mov	r0, r3
 800151a:	3718      	adds	r7, #24
 800151c:	46bd      	mov	sp, r7
 800151e:	bd80      	pop	{r7, pc}

08001520 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001520:	b480      	push	{r7}
 8001522:	b083      	sub	sp, #12
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800152e:	b2db      	uxtb	r3, r3
 8001530:	2b02      	cmp	r3, #2
 8001532:	d004      	beq.n	800153e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2280      	movs	r2, #128	; 0x80
 8001538:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800153a:	2301      	movs	r3, #1
 800153c:	e00c      	b.n	8001558 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	2205      	movs	r2, #5
 8001542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	681a      	ldr	r2, [r3, #0]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f022 0201 	bic.w	r2, r2, #1
 8001554:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001556:	2300      	movs	r3, #0
}
 8001558:	4618      	mov	r0, r3
 800155a:	370c      	adds	r7, #12
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800156c:	2300      	movs	r3, #0
 800156e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001570:	4b8e      	ldr	r3, [pc, #568]	; (80017ac <HAL_DMA_IRQHandler+0x248>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4a8e      	ldr	r2, [pc, #568]	; (80017b0 <HAL_DMA_IRQHandler+0x24c>)
 8001576:	fba2 2303 	umull	r2, r3, r2, r3
 800157a:	0a9b      	lsrs	r3, r3, #10
 800157c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001582:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800158e:	2208      	movs	r2, #8
 8001590:	409a      	lsls	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	4013      	ands	r3, r2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d01a      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d013      	beq.n	80015d0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f022 0204 	bic.w	r2, r2, #4
 80015b6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015bc:	2208      	movs	r2, #8
 80015be:	409a      	lsls	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015c8:	f043 0201 	orr.w	r2, r3, #1
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015d4:	2201      	movs	r2, #1
 80015d6:	409a      	lsls	r2, r3
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	4013      	ands	r3, r2
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d012      	beq.n	8001606 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	695b      	ldr	r3, [r3, #20]
 80015e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d00b      	beq.n	8001606 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80015f2:	2201      	movs	r2, #1
 80015f4:	409a      	lsls	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	f043 0202 	orr.w	r2, r3, #2
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160a:	2204      	movs	r2, #4
 800160c:	409a      	lsls	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d012      	beq.n	800163c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0302 	and.w	r3, r3, #2
 8001620:	2b00      	cmp	r3, #0
 8001622:	d00b      	beq.n	800163c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001628:	2204      	movs	r2, #4
 800162a:	409a      	lsls	r2, r3
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001634:	f043 0204 	orr.w	r2, r3, #4
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001640:	2210      	movs	r2, #16
 8001642:	409a      	lsls	r2, r3
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	4013      	ands	r3, r2
 8001648:	2b00      	cmp	r3, #0
 800164a:	d043      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f003 0308 	and.w	r3, r3, #8
 8001656:	2b00      	cmp	r3, #0
 8001658:	d03c      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800165e:	2210      	movs	r2, #16
 8001660:	409a      	lsls	r2, r3
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001670:	2b00      	cmp	r3, #0
 8001672:	d018      	beq.n	80016a6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800167e:	2b00      	cmp	r3, #0
 8001680:	d108      	bne.n	8001694 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001686:	2b00      	cmp	r3, #0
 8001688:	d024      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	4798      	blx	r3
 8001692:	e01f      	b.n	80016d4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001698:	2b00      	cmp	r3, #0
 800169a:	d01b      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	4798      	blx	r3
 80016a4:	e016      	b.n	80016d4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d107      	bne.n	80016c4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f022 0208 	bic.w	r2, r2, #8
 80016c2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d003      	beq.n	80016d4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016d8:	2220      	movs	r2, #32
 80016da:	409a      	lsls	r2, r3
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	f000 808f 	beq.w	8001804 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0310 	and.w	r3, r3, #16
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 8087 	beq.w	8001804 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016fa:	2220      	movs	r2, #32
 80016fc:	409a      	lsls	r2, r3
 80016fe:	693b      	ldr	r3, [r7, #16]
 8001700:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001708:	b2db      	uxtb	r3, r3
 800170a:	2b05      	cmp	r3, #5
 800170c:	d136      	bne.n	800177c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0216 	bic.w	r2, r2, #22
 800171c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	695a      	ldr	r2, [r3, #20]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800172c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001732:	2b00      	cmp	r3, #0
 8001734:	d103      	bne.n	800173e <HAL_DMA_IRQHandler+0x1da>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800173a:	2b00      	cmp	r3, #0
 800173c:	d007      	beq.n	800174e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f022 0208 	bic.w	r2, r2, #8
 800174c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001752:	223f      	movs	r2, #63	; 0x3f
 8001754:	409a      	lsls	r2, r3
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2201      	movs	r2, #1
 800175e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800176e:	2b00      	cmp	r3, #0
 8001770:	d07e      	beq.n	8001870 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	4798      	blx	r3
        }
        return;
 800177a:	e079      	b.n	8001870 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d01d      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001794:	2b00      	cmp	r3, #0
 8001796:	d10d      	bne.n	80017b4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	2b00      	cmp	r3, #0
 800179e:	d031      	beq.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	6878      	ldr	r0, [r7, #4]
 80017a6:	4798      	blx	r3
 80017a8:	e02c      	b.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
 80017aa:	bf00      	nop
 80017ac:	20000000 	.word	0x20000000
 80017b0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d023      	beq.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	4798      	blx	r3
 80017c4:	e01e      	b.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d10f      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f022 0210 	bic.w	r2, r2, #16
 80017e2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2201      	movs	r2, #1
 80017e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d003      	beq.n	8001804 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001800:	6878      	ldr	r0, [r7, #4]
 8001802:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001808:	2b00      	cmp	r3, #0
 800180a:	d032      	beq.n	8001872 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001810:	f003 0301 	and.w	r3, r3, #1
 8001814:	2b00      	cmp	r3, #0
 8001816:	d022      	beq.n	800185e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2205      	movs	r2, #5
 800181c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	3301      	adds	r3, #1
 8001834:	60bb      	str	r3, [r7, #8]
 8001836:	697a      	ldr	r2, [r7, #20]
 8001838:	429a      	cmp	r2, r3
 800183a:	d307      	bcc.n	800184c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f2      	bne.n	8001830 <HAL_DMA_IRQHandler+0x2cc>
 800184a:	e000      	b.n	800184e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800184c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2201      	movs	r2, #1
 8001852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2200      	movs	r2, #0
 800185a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001862:	2b00      	cmp	r3, #0
 8001864:	d005      	beq.n	8001872 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	4798      	blx	r3
 800186e:	e000      	b.n	8001872 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001870:	bf00      	nop
    }
  }
}
 8001872:	3718      	adds	r7, #24
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}

08001878 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001878:	b480      	push	{r7}
 800187a:	b085      	sub	sp, #20
 800187c:	af00      	add	r7, sp, #0
 800187e:	60f8      	str	r0, [r7, #12]
 8001880:	60b9      	str	r1, [r7, #8]
 8001882:	607a      	str	r2, [r7, #4]
 8001884:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	681a      	ldr	r2, [r3, #0]
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001894:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	683a      	ldr	r2, [r7, #0]
 800189c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	2b40      	cmp	r3, #64	; 0x40
 80018a4:	d108      	bne.n	80018b8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	687a      	ldr	r2, [r7, #4]
 80018ac:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80018b6:	e007      	b.n	80018c8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	68ba      	ldr	r2, [r7, #8]
 80018be:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	60da      	str	r2, [r3, #12]
}
 80018c8:	bf00      	nop
 80018ca:	3714      	adds	r7, #20
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	3b10      	subs	r3, #16
 80018e4:	4a14      	ldr	r2, [pc, #80]	; (8001938 <DMA_CalcBaseAndBitshift+0x64>)
 80018e6:	fba2 2303 	umull	r2, r3, r2, r3
 80018ea:	091b      	lsrs	r3, r3, #4
 80018ec:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80018ee:	4a13      	ldr	r2, [pc, #76]	; (800193c <DMA_CalcBaseAndBitshift+0x68>)
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	4413      	add	r3, r2
 80018f4:	781b      	ldrb	r3, [r3, #0]
 80018f6:	461a      	mov	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2b03      	cmp	r3, #3
 8001900:	d909      	bls.n	8001916 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800190a:	f023 0303 	bic.w	r3, r3, #3
 800190e:	1d1a      	adds	r2, r3, #4
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	659a      	str	r2, [r3, #88]	; 0x58
 8001914:	e007      	b.n	8001926 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800191e:	f023 0303 	bic.w	r3, r3, #3
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800192a:	4618      	mov	r0, r3
 800192c:	3714      	adds	r7, #20
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	aaaaaaab 	.word	0xaaaaaaab
 800193c:	08003ce8 	.word	0x08003ce8

08001940 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001948:	2300      	movs	r3, #0
 800194a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001950:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	699b      	ldr	r3, [r3, #24]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d11f      	bne.n	800199a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	2b03      	cmp	r3, #3
 800195e:	d856      	bhi.n	8001a0e <DMA_CheckFifoParam+0xce>
 8001960:	a201      	add	r2, pc, #4	; (adr r2, 8001968 <DMA_CheckFifoParam+0x28>)
 8001962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001966:	bf00      	nop
 8001968:	08001979 	.word	0x08001979
 800196c:	0800198b 	.word	0x0800198b
 8001970:	08001979 	.word	0x08001979
 8001974:	08001a0f 	.word	0x08001a0f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800197c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d046      	beq.n	8001a12 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001984:	2301      	movs	r3, #1
 8001986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001988:	e043      	b.n	8001a12 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800198e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001992:	d140      	bne.n	8001a16 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001998:	e03d      	b.n	8001a16 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	699b      	ldr	r3, [r3, #24]
 800199e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019a2:	d121      	bne.n	80019e8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d837      	bhi.n	8001a1a <DMA_CheckFifoParam+0xda>
 80019aa:	a201      	add	r2, pc, #4	; (adr r2, 80019b0 <DMA_CheckFifoParam+0x70>)
 80019ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b0:	080019c1 	.word	0x080019c1
 80019b4:	080019c7 	.word	0x080019c7
 80019b8:	080019c1 	.word	0x080019c1
 80019bc:	080019d9 	.word	0x080019d9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80019c0:	2301      	movs	r3, #1
 80019c2:	73fb      	strb	r3, [r7, #15]
      break;
 80019c4:	e030      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019ca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d025      	beq.n	8001a1e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80019d6:	e022      	b.n	8001a1e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019dc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80019e0:	d11f      	bne.n	8001a22 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80019e2:	2301      	movs	r3, #1
 80019e4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80019e6:	e01c      	b.n	8001a22 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80019e8:	68bb      	ldr	r3, [r7, #8]
 80019ea:	2b02      	cmp	r3, #2
 80019ec:	d903      	bls.n	80019f6 <DMA_CheckFifoParam+0xb6>
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	2b03      	cmp	r3, #3
 80019f2:	d003      	beq.n	80019fc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80019f4:	e018      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	73fb      	strb	r3, [r7, #15]
      break;
 80019fa:	e015      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a00:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d00e      	beq.n	8001a26 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a0c:	e00b      	b.n	8001a26 <DMA_CheckFifoParam+0xe6>
      break;
 8001a0e:	bf00      	nop
 8001a10:	e00a      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a12:	bf00      	nop
 8001a14:	e008      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a16:	bf00      	nop
 8001a18:	e006      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1a:	bf00      	nop
 8001a1c:	e004      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a1e:	bf00      	nop
 8001a20:	e002      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a22:	bf00      	nop
 8001a24:	e000      	b.n	8001a28 <DMA_CheckFifoParam+0xe8>
      break;
 8001a26:	bf00      	nop
    }
  } 
  
  return status; 
 8001a28:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop

08001a38 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8001a38:	b580      	push	{r7, lr}
 8001a3a:	b086      	sub	sp, #24
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	60f8      	str	r0, [r7, #12]
 8001a40:	60b9      	str	r1, [r7, #8]
 8001a42:	607a      	str	r2, [r7, #4]
 8001a44:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b80      	cmp	r3, #128	; 0x80
 8001a50:	d106      	bne.n	8001a60 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	f001 b911 	b.w	8002c82 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d007      	beq.n	8001a78 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d003      	beq.n	8001a78 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d105      	bne.n	8001a84 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	2240      	movs	r2, #64	; 0x40
 8001a7c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	f001 b8ff 	b.w	8002c82 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d102      	bne.n	8001a94 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	f001 b8f7 	b.w	8002c82 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2201      	movs	r2, #1
 8001a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b01      	cmp	r3, #1
 8001aa6:	f041 80e5 	bne.w	8002c74 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	2202      	movs	r2, #2
 8001aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001ac6:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	683a      	ldr	r2, [r7, #0]
 8001ace:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8001ad0:	6a3b      	ldr	r3, [r7, #32]
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	68b9      	ldr	r1, [r7, #8]
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	f001 f910 	bl	8002cfc <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	461a      	mov	r2, r3
 8001ae2:	4b8d      	ldr	r3, [pc, #564]	; (8001d18 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	d960      	bls.n	8001baa <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a8b      	ldr	r2, [pc, #556]	; (8001d1c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d057      	beq.n	8001ba2 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a8a      	ldr	r2, [pc, #552]	; (8001d20 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d050      	beq.n	8001b9e <HAL_DMAEx_MultiBufferStart_IT+0x166>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	4a88      	ldr	r2, [pc, #544]	; (8001d24 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d049      	beq.n	8001b9a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4a87      	ldr	r2, [pc, #540]	; (8001d28 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d042      	beq.n	8001b96 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	4a85      	ldr	r2, [pc, #532]	; (8001d2c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d03a      	beq.n	8001b90 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a84      	ldr	r2, [pc, #528]	; (8001d30 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8001b20:	4293      	cmp	r3, r2
 8001b22:	d032      	beq.n	8001b8a <HAL_DMAEx_MultiBufferStart_IT+0x152>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a82      	ldr	r2, [pc, #520]	; (8001d34 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8001b2a:	4293      	cmp	r3, r2
 8001b2c:	d02a      	beq.n	8001b84 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	4a81      	ldr	r2, [pc, #516]	; (8001d38 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d022      	beq.n	8001b7e <HAL_DMAEx_MultiBufferStart_IT+0x146>
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a7f      	ldr	r2, [pc, #508]	; (8001d3c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d01a      	beq.n	8001b78 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	4a7e      	ldr	r2, [pc, #504]	; (8001d40 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d012      	beq.n	8001b72 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	4a7c      	ldr	r2, [pc, #496]	; (8001d44 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8001b52:	4293      	cmp	r3, r2
 8001b54:	d00a      	beq.n	8001b6c <HAL_DMAEx_MultiBufferStart_IT+0x134>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	4a7b      	ldr	r2, [pc, #492]	; (8001d48 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d102      	bne.n	8001b66 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 8001b60:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b64:	e01e      	b.n	8001ba4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001b66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001b6a:	e01b      	b.n	8001ba4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001b6c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b70:	e018      	b.n	8001ba4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001b72:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b76:	e015      	b.n	8001ba4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001b78:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001b7c:	e012      	b.n	8001ba4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001b7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b82:	e00f      	b.n	8001ba4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001b84:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b88:	e00c      	b.n	8001ba4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001b8a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b8e:	e009      	b.n	8001ba4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001b90:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001b94:	e006      	b.n	8001ba4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001b96:	2320      	movs	r3, #32
 8001b98:	e004      	b.n	8001ba4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001b9a:	2320      	movs	r3, #32
 8001b9c:	e002      	b.n	8001ba4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001b9e:	2320      	movs	r3, #32
 8001ba0:	e000      	b.n	8001ba4 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8001ba2:	2320      	movs	r3, #32
 8001ba4:	4a69      	ldr	r2, [pc, #420]	; (8001d4c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8001ba6:	60d3      	str	r3, [r2, #12]
 8001ba8:	e14f      	b.n	8001e4a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	461a      	mov	r2, r3
 8001bb0:	4b67      	ldr	r3, [pc, #412]	; (8001d50 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d960      	bls.n	8001c78 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4a58      	ldr	r2, [pc, #352]	; (8001d1c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8001bbc:	4293      	cmp	r3, r2
 8001bbe:	d057      	beq.n	8001c70 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a56      	ldr	r2, [pc, #344]	; (8001d20 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d050      	beq.n	8001c6c <HAL_DMAEx_MultiBufferStart_IT+0x234>
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a55      	ldr	r2, [pc, #340]	; (8001d24 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d049      	beq.n	8001c68 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4a53      	ldr	r2, [pc, #332]	; (8001d28 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d042      	beq.n	8001c64 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a52      	ldr	r2, [pc, #328]	; (8001d2c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d03a      	beq.n	8001c5e <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a50      	ldr	r2, [pc, #320]	; (8001d30 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d032      	beq.n	8001c58 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a4f      	ldr	r2, [pc, #316]	; (8001d34 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d02a      	beq.n	8001c52 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a4d      	ldr	r2, [pc, #308]	; (8001d38 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d022      	beq.n	8001c4c <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a4c      	ldr	r2, [pc, #304]	; (8001d3c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d01a      	beq.n	8001c46 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a4a      	ldr	r2, [pc, #296]	; (8001d40 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d012      	beq.n	8001c40 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 8001c1a:	68fb      	ldr	r3, [r7, #12]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a49      	ldr	r2, [pc, #292]	; (8001d44 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d00a      	beq.n	8001c3a <HAL_DMAEx_MultiBufferStart_IT+0x202>
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a47      	ldr	r2, [pc, #284]	; (8001d48 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d102      	bne.n	8001c34 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 8001c2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c32:	e01e      	b.n	8001c72 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001c34:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c38:	e01b      	b.n	8001c72 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001c3a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c3e:	e018      	b.n	8001c72 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001c40:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c44:	e015      	b.n	8001c72 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001c46:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001c4a:	e012      	b.n	8001c72 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001c4c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c50:	e00f      	b.n	8001c72 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001c52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c56:	e00c      	b.n	8001c72 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001c58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c5c:	e009      	b.n	8001c72 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001c5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c62:	e006      	b.n	8001c72 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001c64:	2320      	movs	r3, #32
 8001c66:	e004      	b.n	8001c72 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001c68:	2320      	movs	r3, #32
 8001c6a:	e002      	b.n	8001c72 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001c6c:	2320      	movs	r3, #32
 8001c6e:	e000      	b.n	8001c72 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 8001c70:	2320      	movs	r3, #32
 8001c72:	4a36      	ldr	r2, [pc, #216]	; (8001d4c <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8001c74:	6093      	str	r3, [r2, #8]
 8001c76:	e0e8      	b.n	8001e4a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	4b35      	ldr	r3, [pc, #212]	; (8001d54 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8001c80:	429a      	cmp	r2, r3
 8001c82:	f240 8082 	bls.w	8001d8a <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a24      	ldr	r2, [pc, #144]	; (8001d1c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d078      	beq.n	8001d82 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d071      	beq.n	8001d7e <HAL_DMAEx_MultiBufferStart_IT+0x346>
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a21      	ldr	r2, [pc, #132]	; (8001d24 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d06a      	beq.n	8001d7a <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a1f      	ldr	r2, [pc, #124]	; (8001d28 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d063      	beq.n	8001d76 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a1e      	ldr	r2, [pc, #120]	; (8001d2c <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d05b      	beq.n	8001d70 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a1c      	ldr	r2, [pc, #112]	; (8001d30 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d053      	beq.n	8001d6a <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a1b      	ldr	r2, [pc, #108]	; (8001d34 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d04b      	beq.n	8001d64 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a19      	ldr	r2, [pc, #100]	; (8001d38 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d043      	beq.n	8001d5e <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a18      	ldr	r2, [pc, #96]	; (8001d3c <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d03b      	beq.n	8001d58 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a16      	ldr	r2, [pc, #88]	; (8001d40 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d012      	beq.n	8001d10 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a15      	ldr	r2, [pc, #84]	; (8001d44 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d00a      	beq.n	8001d0a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8001cf4:	68fb      	ldr	r3, [r7, #12]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a13      	ldr	r2, [pc, #76]	; (8001d48 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d102      	bne.n	8001d04 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 8001cfe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d02:	e03f      	b.n	8001d84 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001d04:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001d08:	e03c      	b.n	8001d84 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001d0a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d0e:	e039      	b.n	8001d84 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001d10:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d14:	e036      	b.n	8001d84 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001d16:	bf00      	nop
 8001d18:	40026458 	.word	0x40026458
 8001d1c:	40026010 	.word	0x40026010
 8001d20:	40026410 	.word	0x40026410
 8001d24:	40026070 	.word	0x40026070
 8001d28:	40026470 	.word	0x40026470
 8001d2c:	40026028 	.word	0x40026028
 8001d30:	40026428 	.word	0x40026428
 8001d34:	40026088 	.word	0x40026088
 8001d38:	40026488 	.word	0x40026488
 8001d3c:	40026040 	.word	0x40026040
 8001d40:	40026440 	.word	0x40026440
 8001d44:	400260a0 	.word	0x400260a0
 8001d48:	400264a0 	.word	0x400264a0
 8001d4c:	40026400 	.word	0x40026400
 8001d50:	400260b8 	.word	0x400260b8
 8001d54:	40026058 	.word	0x40026058
 8001d58:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001d5c:	e012      	b.n	8001d84 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001d5e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d62:	e00f      	b.n	8001d84 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001d64:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d68:	e00c      	b.n	8001d84 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001d6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d6e:	e009      	b.n	8001d84 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001d70:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001d74:	e006      	b.n	8001d84 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001d76:	2320      	movs	r3, #32
 8001d78:	e004      	b.n	8001d84 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001d7a:	2320      	movs	r3, #32
 8001d7c:	e002      	b.n	8001d84 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001d7e:	2320      	movs	r3, #32
 8001d80:	e000      	b.n	8001d84 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8001d82:	2320      	movs	r3, #32
 8001d84:	4a8c      	ldr	r2, [pc, #560]	; (8001fb8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8001d86:	60d3      	str	r3, [r2, #12]
 8001d88:	e05f      	b.n	8001e4a <HAL_DMAEx_MultiBufferStart_IT+0x412>
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a8b      	ldr	r2, [pc, #556]	; (8001fbc <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d057      	beq.n	8001e44 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a89      	ldr	r2, [pc, #548]	; (8001fc0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d050      	beq.n	8001e40 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a88      	ldr	r2, [pc, #544]	; (8001fc4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8001da4:	4293      	cmp	r3, r2
 8001da6:	d049      	beq.n	8001e3c <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a86      	ldr	r2, [pc, #536]	; (8001fc8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d042      	beq.n	8001e38 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a85      	ldr	r2, [pc, #532]	; (8001fcc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d03a      	beq.n	8001e32 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a83      	ldr	r2, [pc, #524]	; (8001fd0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d032      	beq.n	8001e2c <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4a82      	ldr	r2, [pc, #520]	; (8001fd4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8001dcc:	4293      	cmp	r3, r2
 8001dce:	d02a      	beq.n	8001e26 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a80      	ldr	r2, [pc, #512]	; (8001fd8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d022      	beq.n	8001e20 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	4a7f      	ldr	r2, [pc, #508]	; (8001fdc <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8001de0:	4293      	cmp	r3, r2
 8001de2:	d01a      	beq.n	8001e1a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a7d      	ldr	r2, [pc, #500]	; (8001fe0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d012      	beq.n	8001e14 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a7c      	ldr	r2, [pc, #496]	; (8001fe4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d00a      	beq.n	8001e0e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a7a      	ldr	r2, [pc, #488]	; (8001fe8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d102      	bne.n	8001e08 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8001e02:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e06:	e01e      	b.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001e08:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e0c:	e01b      	b.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001e0e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e12:	e018      	b.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001e14:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e18:	e015      	b.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001e1a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001e1e:	e012      	b.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001e20:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e24:	e00f      	b.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001e26:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e2a:	e00c      	b.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001e2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e30:	e009      	b.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001e32:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e36:	e006      	b.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001e38:	2320      	movs	r3, #32
 8001e3a:	e004      	b.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	e002      	b.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001e40:	2320      	movs	r3, #32
 8001e42:	e000      	b.n	8001e46 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8001e44:	2320      	movs	r3, #32
 8001e46:	4a5c      	ldr	r2, [pc, #368]	; (8001fb8 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8001e48:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	4b66      	ldr	r3, [pc, #408]	; (8001fec <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d960      	bls.n	8001f18 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4a58      	ldr	r2, [pc, #352]	; (8001fbc <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8001e5c:	4293      	cmp	r3, r2
 8001e5e:	d057      	beq.n	8001f10 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a56      	ldr	r2, [pc, #344]	; (8001fc0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d050      	beq.n	8001f0c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a55      	ldr	r2, [pc, #340]	; (8001fc4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d049      	beq.n	8001f08 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a53      	ldr	r2, [pc, #332]	; (8001fc8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d042      	beq.n	8001f04 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	4a52      	ldr	r2, [pc, #328]	; (8001fcc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d03a      	beq.n	8001efe <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	4a50      	ldr	r2, [pc, #320]	; (8001fd0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d032      	beq.n	8001ef8 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a4f      	ldr	r2, [pc, #316]	; (8001fd4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d02a      	beq.n	8001ef2 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a4d      	ldr	r2, [pc, #308]	; (8001fd8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d022      	beq.n	8001eec <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a4c      	ldr	r2, [pc, #304]	; (8001fdc <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d01a      	beq.n	8001ee6 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a4a      	ldr	r2, [pc, #296]	; (8001fe0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d012      	beq.n	8001ee0 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a49      	ldr	r2, [pc, #292]	; (8001fe4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d00a      	beq.n	8001eda <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a47      	ldr	r2, [pc, #284]	; (8001fe8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d102      	bne.n	8001ed4 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 8001ece:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ed2:	e01e      	b.n	8001f12 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001ed4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001ed8:	e01b      	b.n	8001f12 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001eda:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ede:	e018      	b.n	8001f12 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001ee0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ee4:	e015      	b.n	8001f12 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001ee6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001eea:	e012      	b.n	8001f12 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001eec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef0:	e00f      	b.n	8001f12 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001ef2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001ef6:	e00c      	b.n	8001f12 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001ef8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001efc:	e009      	b.n	8001f12 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001efe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f02:	e006      	b.n	8001f12 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001f04:	2310      	movs	r3, #16
 8001f06:	e004      	b.n	8001f12 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001f08:	2310      	movs	r3, #16
 8001f0a:	e002      	b.n	8001f12 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001f0c:	2310      	movs	r3, #16
 8001f0e:	e000      	b.n	8001f12 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8001f10:	2310      	movs	r3, #16
 8001f12:	4a37      	ldr	r2, [pc, #220]	; (8001ff0 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8001f14:	60d3      	str	r3, [r2, #12]
 8001f16:	e14f      	b.n	80021b8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	461a      	mov	r2, r3
 8001f1e:	4b35      	ldr	r3, [pc, #212]	; (8001ff4 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 8001f20:	429a      	cmp	r2, r3
 8001f22:	f240 8082 	bls.w	800202a <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d078      	beq.n	8002022 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	4a22      	ldr	r2, [pc, #136]	; (8001fc0 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 8001f36:	4293      	cmp	r3, r2
 8001f38:	d071      	beq.n	800201e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a21      	ldr	r2, [pc, #132]	; (8001fc4 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d06a      	beq.n	800201a <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d063      	beq.n	8002016 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a1e      	ldr	r2, [pc, #120]	; (8001fcc <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d05b      	beq.n	8002010 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d053      	beq.n	800200a <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4a1b      	ldr	r2, [pc, #108]	; (8001fd4 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8001f68:	4293      	cmp	r3, r2
 8001f6a:	d04b      	beq.n	8002004 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a19      	ldr	r2, [pc, #100]	; (8001fd8 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d043      	beq.n	8001ffe <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	4a18      	ldr	r2, [pc, #96]	; (8001fdc <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8001f7c:	4293      	cmp	r3, r2
 8001f7e:	d03b      	beq.n	8001ff8 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a16      	ldr	r2, [pc, #88]	; (8001fe0 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d012      	beq.n	8001fb0 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4a15      	ldr	r2, [pc, #84]	; (8001fe4 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d00a      	beq.n	8001faa <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4a13      	ldr	r2, [pc, #76]	; (8001fe8 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d102      	bne.n	8001fa4 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 8001f9e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fa2:	e03f      	b.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001fa4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fa8:	e03c      	b.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001faa:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fae:	e039      	b.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001fb0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001fb4:	e036      	b.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001fb6:	bf00      	nop
 8001fb8:	40026000 	.word	0x40026000
 8001fbc:	40026010 	.word	0x40026010
 8001fc0:	40026410 	.word	0x40026410
 8001fc4:	40026070 	.word	0x40026070
 8001fc8:	40026470 	.word	0x40026470
 8001fcc:	40026028 	.word	0x40026028
 8001fd0:	40026428 	.word	0x40026428
 8001fd4:	40026088 	.word	0x40026088
 8001fd8:	40026488 	.word	0x40026488
 8001fdc:	40026040 	.word	0x40026040
 8001fe0:	40026440 	.word	0x40026440
 8001fe4:	400260a0 	.word	0x400260a0
 8001fe8:	400264a0 	.word	0x400264a0
 8001fec:	40026458 	.word	0x40026458
 8001ff0:	40026400 	.word	0x40026400
 8001ff4:	400260b8 	.word	0x400260b8
 8001ff8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001ffc:	e012      	b.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8001ffe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002002:	e00f      	b.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002004:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002008:	e00c      	b.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800200a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800200e:	e009      	b.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002010:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002014:	e006      	b.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002016:	2310      	movs	r3, #16
 8002018:	e004      	b.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800201a:	2310      	movs	r3, #16
 800201c:	e002      	b.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800201e:	2310      	movs	r3, #16
 8002020:	e000      	b.n	8002024 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002022:	2310      	movs	r3, #16
 8002024:	4a8c      	ldr	r2, [pc, #560]	; (8002258 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 8002026:	6093      	str	r3, [r2, #8]
 8002028:	e0c6      	b.n	80021b8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	461a      	mov	r2, r3
 8002030:	4b8a      	ldr	r3, [pc, #552]	; (800225c <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 8002032:	429a      	cmp	r2, r3
 8002034:	d960      	bls.n	80020f8 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a89      	ldr	r2, [pc, #548]	; (8002260 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d057      	beq.n	80020f0 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a87      	ldr	r2, [pc, #540]	; (8002264 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d050      	beq.n	80020ec <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a86      	ldr	r2, [pc, #536]	; (8002268 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d049      	beq.n	80020e8 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4a84      	ldr	r2, [pc, #528]	; (800226c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d042      	beq.n	80020e4 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	4a83      	ldr	r2, [pc, #524]	; (8002270 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d03a      	beq.n	80020de <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	4a81      	ldr	r2, [pc, #516]	; (8002274 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d032      	beq.n	80020d8 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4a80      	ldr	r2, [pc, #512]	; (8002278 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d02a      	beq.n	80020d2 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a7e      	ldr	r2, [pc, #504]	; (800227c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d022      	beq.n	80020cc <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7d      	ldr	r2, [pc, #500]	; (8002280 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800208c:	4293      	cmp	r3, r2
 800208e:	d01a      	beq.n	80020c6 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a7b      	ldr	r2, [pc, #492]	; (8002284 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d012      	beq.n	80020c0 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a7a      	ldr	r2, [pc, #488]	; (8002288 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d00a      	beq.n	80020ba <HAL_DMAEx_MultiBufferStart_IT+0x682>
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	4a78      	ldr	r2, [pc, #480]	; (800228c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d102      	bne.n	80020b4 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 80020ae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020b2:	e01e      	b.n	80020f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80020b4:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80020b8:	e01b      	b.n	80020f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80020ba:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020be:	e018      	b.n	80020f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80020c0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020c4:	e015      	b.n	80020f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80020c6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80020ca:	e012      	b.n	80020f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80020cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d0:	e00f      	b.n	80020f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80020d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020d6:	e00c      	b.n	80020f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80020d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020dc:	e009      	b.n	80020f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80020de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020e2:	e006      	b.n	80020f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80020e4:	2310      	movs	r3, #16
 80020e6:	e004      	b.n	80020f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80020e8:	2310      	movs	r3, #16
 80020ea:	e002      	b.n	80020f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80020ec:	2310      	movs	r3, #16
 80020ee:	e000      	b.n	80020f2 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 80020f0:	2310      	movs	r3, #16
 80020f2:	4a67      	ldr	r2, [pc, #412]	; (8002290 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80020f4:	60d3      	str	r3, [r2, #12]
 80020f6:	e05f      	b.n	80021b8 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a58      	ldr	r2, [pc, #352]	; (8002260 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d057      	beq.n	80021b2 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4a57      	ldr	r2, [pc, #348]	; (8002264 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002108:	4293      	cmp	r3, r2
 800210a:	d050      	beq.n	80021ae <HAL_DMAEx_MultiBufferStart_IT+0x776>
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4a55      	ldr	r2, [pc, #340]	; (8002268 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d049      	beq.n	80021aa <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a54      	ldr	r2, [pc, #336]	; (800226c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d042      	beq.n	80021a6 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a52      	ldr	r2, [pc, #328]	; (8002270 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d03a      	beq.n	80021a0 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4a51      	ldr	r2, [pc, #324]	; (8002274 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 8002130:	4293      	cmp	r3, r2
 8002132:	d032      	beq.n	800219a <HAL_DMAEx_MultiBufferStart_IT+0x762>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4a4f      	ldr	r2, [pc, #316]	; (8002278 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d02a      	beq.n	8002194 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a4e      	ldr	r2, [pc, #312]	; (800227c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002144:	4293      	cmp	r3, r2
 8002146:	d022      	beq.n	800218e <HAL_DMAEx_MultiBufferStart_IT+0x756>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a4c      	ldr	r2, [pc, #304]	; (8002280 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d01a      	beq.n	8002188 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a4b      	ldr	r2, [pc, #300]	; (8002284 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d012      	beq.n	8002182 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a49      	ldr	r2, [pc, #292]	; (8002288 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d00a      	beq.n	800217c <HAL_DMAEx_MultiBufferStart_IT+0x744>
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4a48      	ldr	r2, [pc, #288]	; (800228c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800216c:	4293      	cmp	r3, r2
 800216e:	d102      	bne.n	8002176 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 8002170:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002174:	e01e      	b.n	80021b4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002176:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800217a:	e01b      	b.n	80021b4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800217c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002180:	e018      	b.n	80021b4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002182:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002186:	e015      	b.n	80021b4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002188:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800218c:	e012      	b.n	80021b4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800218e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002192:	e00f      	b.n	80021b4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002194:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002198:	e00c      	b.n	80021b4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800219a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800219e:	e009      	b.n	80021b4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80021a0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021a4:	e006      	b.n	80021b4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80021a6:	2310      	movs	r3, #16
 80021a8:	e004      	b.n	80021b4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80021aa:	2310      	movs	r3, #16
 80021ac:	e002      	b.n	80021b4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80021ae:	2310      	movs	r3, #16
 80021b0:	e000      	b.n	80021b4 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80021b2:	2310      	movs	r3, #16
 80021b4:	4a36      	ldr	r2, [pc, #216]	; (8002290 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 80021b6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	461a      	mov	r2, r3
 80021be:	4b35      	ldr	r3, [pc, #212]	; (8002294 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 80021c0:	429a      	cmp	r2, r3
 80021c2:	f240 8082 	bls.w	80022ca <HAL_DMAEx_MultiBufferStart_IT+0x892>
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	4a25      	ldr	r2, [pc, #148]	; (8002260 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80021cc:	4293      	cmp	r3, r2
 80021ce:	d078      	beq.n	80022c2 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a23      	ldr	r2, [pc, #140]	; (8002264 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d071      	beq.n	80022be <HAL_DMAEx_MultiBufferStart_IT+0x886>
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a22      	ldr	r2, [pc, #136]	; (8002268 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d06a      	beq.n	80022ba <HAL_DMAEx_MultiBufferStart_IT+0x882>
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a20      	ldr	r2, [pc, #128]	; (800226c <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d063      	beq.n	80022b6 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d05b      	beq.n	80022b0 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d053      	beq.n	80022aa <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a1c      	ldr	r2, [pc, #112]	; (8002278 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d04b      	beq.n	80022a4 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a1a      	ldr	r2, [pc, #104]	; (800227c <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d043      	beq.n	800229e <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a19      	ldr	r2, [pc, #100]	; (8002280 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800221c:	4293      	cmp	r3, r2
 800221e:	d03b      	beq.n	8002298 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a17      	ldr	r2, [pc, #92]	; (8002284 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d012      	beq.n	8002250 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4a16      	ldr	r2, [pc, #88]	; (8002288 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d00a      	beq.n	800224a <HAL_DMAEx_MultiBufferStart_IT+0x812>
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a14      	ldr	r2, [pc, #80]	; (800228c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d102      	bne.n	8002244 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 800223e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002242:	e03f      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002244:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002248:	e03c      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800224a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800224e:	e039      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002250:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002254:	e036      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002256:	bf00      	nop
 8002258:	40026400 	.word	0x40026400
 800225c:	40026058 	.word	0x40026058
 8002260:	40026010 	.word	0x40026010
 8002264:	40026410 	.word	0x40026410
 8002268:	40026070 	.word	0x40026070
 800226c:	40026470 	.word	0x40026470
 8002270:	40026028 	.word	0x40026028
 8002274:	40026428 	.word	0x40026428
 8002278:	40026088 	.word	0x40026088
 800227c:	40026488 	.word	0x40026488
 8002280:	40026040 	.word	0x40026040
 8002284:	40026440 	.word	0x40026440
 8002288:	400260a0 	.word	0x400260a0
 800228c:	400264a0 	.word	0x400264a0
 8002290:	40026000 	.word	0x40026000
 8002294:	40026458 	.word	0x40026458
 8002298:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800229c:	e012      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 800229e:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a2:	e00f      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80022a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022a8:	e00c      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80022aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ae:	e009      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80022b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022b4:	e006      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80022b6:	2308      	movs	r3, #8
 80022b8:	e004      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80022ba:	2308      	movs	r3, #8
 80022bc:	e002      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80022be:	2308      	movs	r3, #8
 80022c0:	e000      	b.n	80022c4 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80022c2:	2308      	movs	r3, #8
 80022c4:	4a8c      	ldr	r2, [pc, #560]	; (80024f8 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 80022c6:	60d3      	str	r3, [r2, #12]
 80022c8:	e14e      	b.n	8002568 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	4b8a      	ldr	r3, [pc, #552]	; (80024fc <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d960      	bls.n	8002398 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a89      	ldr	r2, [pc, #548]	; (8002500 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d057      	beq.n	8002390 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a87      	ldr	r2, [pc, #540]	; (8002504 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d050      	beq.n	800238c <HAL_DMAEx_MultiBufferStart_IT+0x954>
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a86      	ldr	r2, [pc, #536]	; (8002508 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d049      	beq.n	8002388 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a84      	ldr	r2, [pc, #528]	; (800250c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d042      	beq.n	8002384 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4a83      	ldr	r2, [pc, #524]	; (8002510 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d03a      	beq.n	800237e <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a81      	ldr	r2, [pc, #516]	; (8002514 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d032      	beq.n	8002378 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a80      	ldr	r2, [pc, #512]	; (8002518 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d02a      	beq.n	8002372 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4a7e      	ldr	r2, [pc, #504]	; (800251c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d022      	beq.n	800236c <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4a7d      	ldr	r2, [pc, #500]	; (8002520 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d01a      	beq.n	8002366 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a7b      	ldr	r2, [pc, #492]	; (8002524 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d012      	beq.n	8002360 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4a7a      	ldr	r2, [pc, #488]	; (8002528 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d00a      	beq.n	800235a <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a78      	ldr	r2, [pc, #480]	; (800252c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d102      	bne.n	8002354 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 800234e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002352:	e01e      	b.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002354:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002358:	e01b      	b.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800235a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800235e:	e018      	b.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002360:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002364:	e015      	b.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002366:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800236a:	e012      	b.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800236c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002370:	e00f      	b.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002372:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002376:	e00c      	b.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002378:	f44f 7300 	mov.w	r3, #512	; 0x200
 800237c:	e009      	b.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800237e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002382:	e006      	b.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002384:	2308      	movs	r3, #8
 8002386:	e004      	b.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002388:	2308      	movs	r3, #8
 800238a:	e002      	b.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 800238c:	2308      	movs	r3, #8
 800238e:	e000      	b.n	8002392 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002390:	2308      	movs	r3, #8
 8002392:	4a59      	ldr	r2, [pc, #356]	; (80024f8 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002394:	6093      	str	r3, [r2, #8]
 8002396:	e0e7      	b.n	8002568 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	461a      	mov	r2, r3
 800239e:	4b64      	ldr	r3, [pc, #400]	; (8002530 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d960      	bls.n	8002466 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a55      	ldr	r2, [pc, #340]	; (8002500 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d057      	beq.n	800245e <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	4a54      	ldr	r2, [pc, #336]	; (8002504 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d050      	beq.n	800245a <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a52      	ldr	r2, [pc, #328]	; (8002508 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d049      	beq.n	8002456 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4a51      	ldr	r2, [pc, #324]	; (800250c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d042      	beq.n	8002452 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a4f      	ldr	r2, [pc, #316]	; (8002510 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d03a      	beq.n	800244c <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a4e      	ldr	r2, [pc, #312]	; (8002514 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 80023dc:	4293      	cmp	r3, r2
 80023de:	d032      	beq.n	8002446 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a4c      	ldr	r2, [pc, #304]	; (8002518 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d02a      	beq.n	8002440 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a4b      	ldr	r2, [pc, #300]	; (800251c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d022      	beq.n	800243a <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a49      	ldr	r2, [pc, #292]	; (8002520 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d01a      	beq.n	8002434 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a48      	ldr	r2, [pc, #288]	; (8002524 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d012      	beq.n	800242e <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a46      	ldr	r2, [pc, #280]	; (8002528 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d00a      	beq.n	8002428 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a45      	ldr	r2, [pc, #276]	; (800252c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d102      	bne.n	8002422 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 800241c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002420:	e01e      	b.n	8002460 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002422:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002426:	e01b      	b.n	8002460 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002428:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800242c:	e018      	b.n	8002460 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800242e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002432:	e015      	b.n	8002460 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002434:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002438:	e012      	b.n	8002460 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800243a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800243e:	e00f      	b.n	8002460 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002440:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002444:	e00c      	b.n	8002460 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002446:	f44f 7300 	mov.w	r3, #512	; 0x200
 800244a:	e009      	b.n	8002460 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800244c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002450:	e006      	b.n	8002460 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002452:	2308      	movs	r3, #8
 8002454:	e004      	b.n	8002460 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002456:	2308      	movs	r3, #8
 8002458:	e002      	b.n	8002460 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800245a:	2308      	movs	r3, #8
 800245c:	e000      	b.n	8002460 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 800245e:	2308      	movs	r3, #8
 8002460:	4a34      	ldr	r2, [pc, #208]	; (8002534 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002462:	60d3      	str	r3, [r2, #12]
 8002464:	e080      	b.n	8002568 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a25      	ldr	r2, [pc, #148]	; (8002500 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 800246c:	4293      	cmp	r3, r2
 800246e:	d078      	beq.n	8002562 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a23      	ldr	r2, [pc, #140]	; (8002504 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d071      	beq.n	800255e <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a22      	ldr	r2, [pc, #136]	; (8002508 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002480:	4293      	cmp	r3, r2
 8002482:	d06a      	beq.n	800255a <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a20      	ldr	r2, [pc, #128]	; (800250c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d063      	beq.n	8002556 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a1f      	ldr	r2, [pc, #124]	; (8002510 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002494:	4293      	cmp	r3, r2
 8002496:	d05b      	beq.n	8002550 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d053      	beq.n	800254a <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a1c      	ldr	r2, [pc, #112]	; (8002518 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 80024a8:	4293      	cmp	r3, r2
 80024aa:	d04b      	beq.n	8002544 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1a      	ldr	r2, [pc, #104]	; (800251c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d043      	beq.n	800253e <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a19      	ldr	r2, [pc, #100]	; (8002520 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d03b      	beq.n	8002538 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a17      	ldr	r2, [pc, #92]	; (8002524 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d012      	beq.n	80024f0 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a16      	ldr	r2, [pc, #88]	; (8002528 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	d00a      	beq.n	80024ea <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a14      	ldr	r2, [pc, #80]	; (800252c <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d102      	bne.n	80024e4 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 80024de:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80024e2:	e03f      	b.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80024e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80024e8:	e03c      	b.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80024ea:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80024ee:	e039      	b.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80024f0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80024f4:	e036      	b.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 80024f6:	bf00      	nop
 80024f8:	40026400 	.word	0x40026400
 80024fc:	400260b8 	.word	0x400260b8
 8002500:	40026010 	.word	0x40026010
 8002504:	40026410 	.word	0x40026410
 8002508:	40026070 	.word	0x40026070
 800250c:	40026470 	.word	0x40026470
 8002510:	40026028 	.word	0x40026028
 8002514:	40026428 	.word	0x40026428
 8002518:	40026088 	.word	0x40026088
 800251c:	40026488 	.word	0x40026488
 8002520:	40026040 	.word	0x40026040
 8002524:	40026440 	.word	0x40026440
 8002528:	400260a0 	.word	0x400260a0
 800252c:	400264a0 	.word	0x400264a0
 8002530:	40026058 	.word	0x40026058
 8002534:	40026000 	.word	0x40026000
 8002538:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800253c:	e012      	b.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800253e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002542:	e00f      	b.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002548:	e00c      	b.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800254a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800254e:	e009      	b.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002550:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002554:	e006      	b.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002556:	2308      	movs	r3, #8
 8002558:	e004      	b.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800255a:	2308      	movs	r3, #8
 800255c:	e002      	b.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 800255e:	2308      	movs	r3, #8
 8002560:	e000      	b.n	8002564 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002562:	2308      	movs	r3, #8
 8002564:	4a8a      	ldr	r2, [pc, #552]	; (8002790 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8002566:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	461a      	mov	r2, r3
 800256e:	4b89      	ldr	r3, [pc, #548]	; (8002794 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8002570:	429a      	cmp	r2, r3
 8002572:	d960      	bls.n	8002636 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a87      	ldr	r2, [pc, #540]	; (8002798 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d057      	beq.n	800262e <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a86      	ldr	r2, [pc, #536]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d050      	beq.n	800262a <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a84      	ldr	r2, [pc, #528]	; (80027a0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d049      	beq.n	8002626 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a83      	ldr	r2, [pc, #524]	; (80027a4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d042      	beq.n	8002622 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4a81      	ldr	r2, [pc, #516]	; (80027a8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 80025a2:	4293      	cmp	r3, r2
 80025a4:	d03a      	beq.n	800261c <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a80      	ldr	r2, [pc, #512]	; (80027ac <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d032      	beq.n	8002616 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a7e      	ldr	r2, [pc, #504]	; (80027b0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d02a      	beq.n	8002610 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a7d      	ldr	r2, [pc, #500]	; (80027b4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d022      	beq.n	800260a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a7b      	ldr	r2, [pc, #492]	; (80027b8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d01a      	beq.n	8002604 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a7a      	ldr	r2, [pc, #488]	; (80027bc <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d012      	beq.n	80025fe <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a78      	ldr	r2, [pc, #480]	; (80027c0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d00a      	beq.n	80025f8 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	4a77      	ldr	r2, [pc, #476]	; (80027c4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d102      	bne.n	80025f2 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 80025ec:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025f0:	e01e      	b.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80025f2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025f6:	e01b      	b.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80025f8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80025fc:	e018      	b.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 80025fe:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002602:	e015      	b.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002604:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002608:	e012      	b.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800260a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800260e:	e00f      	b.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002610:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002614:	e00c      	b.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002616:	f44f 7380 	mov.w	r3, #256	; 0x100
 800261a:	e009      	b.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800261c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002620:	e006      	b.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002622:	2304      	movs	r3, #4
 8002624:	e004      	b.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002626:	2304      	movs	r3, #4
 8002628:	e002      	b.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800262a:	2304      	movs	r3, #4
 800262c:	e000      	b.n	8002630 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 800262e:	2304      	movs	r3, #4
 8002630:	4a65      	ldr	r2, [pc, #404]	; (80027c8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002632:	60d3      	str	r3, [r2, #12]
 8002634:	e150      	b.n	80028d8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	461a      	mov	r2, r3
 800263c:	4b63      	ldr	r3, [pc, #396]	; (80027cc <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 800263e:	429a      	cmp	r2, r3
 8002640:	d960      	bls.n	8002704 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	4a54      	ldr	r2, [pc, #336]	; (8002798 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002648:	4293      	cmp	r3, r2
 800264a:	d057      	beq.n	80026fc <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a52      	ldr	r2, [pc, #328]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d050      	beq.n	80026f8 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4a51      	ldr	r2, [pc, #324]	; (80027a0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d049      	beq.n	80026f4 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a4f      	ldr	r2, [pc, #316]	; (80027a4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d042      	beq.n	80026f0 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a4e      	ldr	r2, [pc, #312]	; (80027a8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002670:	4293      	cmp	r3, r2
 8002672:	d03a      	beq.n	80026ea <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a4c      	ldr	r2, [pc, #304]	; (80027ac <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800267a:	4293      	cmp	r3, r2
 800267c:	d032      	beq.n	80026e4 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4a4b      	ldr	r2, [pc, #300]	; (80027b0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002684:	4293      	cmp	r3, r2
 8002686:	d02a      	beq.n	80026de <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a49      	ldr	r2, [pc, #292]	; (80027b4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d022      	beq.n	80026d8 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a48      	ldr	r2, [pc, #288]	; (80027b8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d01a      	beq.n	80026d2 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a46      	ldr	r2, [pc, #280]	; (80027bc <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d012      	beq.n	80026cc <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a45      	ldr	r2, [pc, #276]	; (80027c0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d00a      	beq.n	80026c6 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a43      	ldr	r2, [pc, #268]	; (80027c4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d102      	bne.n	80026c0 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 80026ba:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026be:	e01e      	b.n	80026fe <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80026c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80026c4:	e01b      	b.n	80026fe <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80026c6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026ca:	e018      	b.n	80026fe <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80026cc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026d0:	e015      	b.n	80026fe <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80026d2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80026d6:	e012      	b.n	80026fe <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80026d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026dc:	e00f      	b.n	80026fe <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80026de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e2:	e00c      	b.n	80026fe <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80026e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026e8:	e009      	b.n	80026fe <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80026ea:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ee:	e006      	b.n	80026fe <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80026f0:	2304      	movs	r3, #4
 80026f2:	e004      	b.n	80026fe <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80026f4:	2304      	movs	r3, #4
 80026f6:	e002      	b.n	80026fe <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80026f8:	2304      	movs	r3, #4
 80026fa:	e000      	b.n	80026fe <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 80026fc:	2304      	movs	r3, #4
 80026fe:	4a32      	ldr	r2, [pc, #200]	; (80027c8 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002700:	6093      	str	r3, [r2, #8]
 8002702:	e0e9      	b.n	80028d8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	461a      	mov	r2, r3
 800270a:	4b31      	ldr	r3, [pc, #196]	; (80027d0 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 800270c:	429a      	cmp	r2, r3
 800270e:	f240 8083 	bls.w	8002818 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a20      	ldr	r2, [pc, #128]	; (8002798 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d079      	beq.n	8002810 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a1e      	ldr	r2, [pc, #120]	; (800279c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d072      	beq.n	800280c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a1d      	ldr	r2, [pc, #116]	; (80027a0 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d06b      	beq.n	8002808 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a1b      	ldr	r2, [pc, #108]	; (80027a4 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002736:	4293      	cmp	r3, r2
 8002738:	d064      	beq.n	8002804 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002740:	4293      	cmp	r3, r2
 8002742:	d05c      	beq.n	80027fe <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a18      	ldr	r2, [pc, #96]	; (80027ac <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 800274a:	4293      	cmp	r3, r2
 800274c:	d054      	beq.n	80027f8 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a17      	ldr	r2, [pc, #92]	; (80027b0 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d04c      	beq.n	80027f2 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a15      	ldr	r2, [pc, #84]	; (80027b4 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d044      	beq.n	80027ec <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4a14      	ldr	r2, [pc, #80]	; (80027b8 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d03c      	beq.n	80027e6 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	4a12      	ldr	r2, [pc, #72]	; (80027bc <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d034      	beq.n	80027e0 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a11      	ldr	r2, [pc, #68]	; (80027c0 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 800277c:	4293      	cmp	r3, r2
 800277e:	d02c      	beq.n	80027da <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d124      	bne.n	80027d4 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 800278a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800278e:	e040      	b.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002790:	40026000 	.word	0x40026000
 8002794:	40026458 	.word	0x40026458
 8002798:	40026010 	.word	0x40026010
 800279c:	40026410 	.word	0x40026410
 80027a0:	40026070 	.word	0x40026070
 80027a4:	40026470 	.word	0x40026470
 80027a8:	40026028 	.word	0x40026028
 80027ac:	40026428 	.word	0x40026428
 80027b0:	40026088 	.word	0x40026088
 80027b4:	40026488 	.word	0x40026488
 80027b8:	40026040 	.word	0x40026040
 80027bc:	40026440 	.word	0x40026440
 80027c0:	400260a0 	.word	0x400260a0
 80027c4:	400264a0 	.word	0x400264a0
 80027c8:	40026400 	.word	0x40026400
 80027cc:	400260b8 	.word	0x400260b8
 80027d0:	40026058 	.word	0x40026058
 80027d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027d8:	e01b      	b.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80027da:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027de:	e018      	b.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80027e0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027e4:	e015      	b.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80027e6:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80027ea:	e012      	b.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80027ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027f0:	e00f      	b.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80027f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027f6:	e00c      	b.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80027f8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80027fc:	e009      	b.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 80027fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002802:	e006      	b.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002804:	2304      	movs	r3, #4
 8002806:	e004      	b.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002808:	2304      	movs	r3, #4
 800280a:	e002      	b.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 800280c:	2304      	movs	r3, #4
 800280e:	e000      	b.n	8002812 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002810:	2304      	movs	r3, #4
 8002812:	4a8b      	ldr	r2, [pc, #556]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8002814:	60d3      	str	r3, [r2, #12]
 8002816:	e05f      	b.n	80028d8 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a89      	ldr	r2, [pc, #548]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d057      	beq.n	80028d2 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a88      	ldr	r2, [pc, #544]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d050      	beq.n	80028ce <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a86      	ldr	r2, [pc, #536]	; (8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d049      	beq.n	80028ca <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a85      	ldr	r2, [pc, #532]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d042      	beq.n	80028c6 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4a83      	ldr	r2, [pc, #524]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d03a      	beq.n	80028c0 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a82      	ldr	r2, [pc, #520]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002850:	4293      	cmp	r3, r2
 8002852:	d032      	beq.n	80028ba <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a80      	ldr	r2, [pc, #512]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800285a:	4293      	cmp	r3, r2
 800285c:	d02a      	beq.n	80028b4 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4a7f      	ldr	r2, [pc, #508]	; (8002a60 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002864:	4293      	cmp	r3, r2
 8002866:	d022      	beq.n	80028ae <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4a7d      	ldr	r2, [pc, #500]	; (8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800286e:	4293      	cmp	r3, r2
 8002870:	d01a      	beq.n	80028a8 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4a7c      	ldr	r2, [pc, #496]	; (8002a68 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002878:	4293      	cmp	r3, r2
 800287a:	d012      	beq.n	80028a2 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a7a      	ldr	r2, [pc, #488]	; (8002a6c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d00a      	beq.n	800289c <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a79      	ldr	r2, [pc, #484]	; (8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d102      	bne.n	8002896 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8002890:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002894:	e01e      	b.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8002896:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800289a:	e01b      	b.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800289c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028a0:	e018      	b.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80028a2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028a6:	e015      	b.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80028a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80028ac:	e012      	b.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80028ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b2:	e00f      	b.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80028b4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028b8:	e00c      	b.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80028ba:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028be:	e009      	b.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80028c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028c4:	e006      	b.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80028c6:	2304      	movs	r3, #4
 80028c8:	e004      	b.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80028ca:	2304      	movs	r3, #4
 80028cc:	e002      	b.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80028ce:	2304      	movs	r3, #4
 80028d0:	e000      	b.n	80028d4 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 80028d2:	2304      	movs	r3, #4
 80028d4:	4a5a      	ldr	r2, [pc, #360]	; (8002a40 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 80028d6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	461a      	mov	r2, r3
 80028de:	4b65      	ldr	r3, [pc, #404]	; (8002a74 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d95c      	bls.n	800299e <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	4a56      	ldr	r2, [pc, #344]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d053      	beq.n	8002996 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a55      	ldr	r2, [pc, #340]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d04c      	beq.n	8002992 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a53      	ldr	r2, [pc, #332]	; (8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d045      	beq.n	800298e <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	4a52      	ldr	r2, [pc, #328]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002908:	4293      	cmp	r3, r2
 800290a:	d03e      	beq.n	800298a <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a50      	ldr	r2, [pc, #320]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d037      	beq.n	8002986 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4a4f      	ldr	r2, [pc, #316]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d030      	beq.n	8002982 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a4d      	ldr	r2, [pc, #308]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d029      	beq.n	800297e <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4a4c      	ldr	r2, [pc, #304]	; (8002a60 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002930:	4293      	cmp	r3, r2
 8002932:	d022      	beq.n	800297a <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a4a      	ldr	r2, [pc, #296]	; (8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d01a      	beq.n	8002974 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a49      	ldr	r2, [pc, #292]	; (8002a68 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d012      	beq.n	800296e <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a47      	ldr	r2, [pc, #284]	; (8002a6c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d00a      	beq.n	8002968 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	4a46      	ldr	r2, [pc, #280]	; (8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d102      	bne.n	8002962 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 800295c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002960:	e01a      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002962:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002966:	e017      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002968:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800296c:	e014      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800296e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002972:	e011      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002974:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002978:	e00e      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800297a:	2340      	movs	r3, #64	; 0x40
 800297c:	e00c      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800297e:	2340      	movs	r3, #64	; 0x40
 8002980:	e00a      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002982:	2340      	movs	r3, #64	; 0x40
 8002984:	e008      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002986:	2340      	movs	r3, #64	; 0x40
 8002988:	e006      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800298a:	2301      	movs	r3, #1
 800298c:	e004      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800298e:	2301      	movs	r3, #1
 8002990:	e002      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8002996:	2301      	movs	r3, #1
 8002998:	4a37      	ldr	r2, [pc, #220]	; (8002a78 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800299a:	60d3      	str	r3, [r2, #12]
 800299c:	e141      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	4b35      	ldr	r3, [pc, #212]	; (8002a7c <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d97c      	bls.n	8002aa4 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a25      	ldr	r2, [pc, #148]	; (8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d073      	beq.n	8002a9c <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a23      	ldr	r2, [pc, #140]	; (8002a48 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d06c      	beq.n	8002a98 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a22      	ldr	r2, [pc, #136]	; (8002a4c <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d065      	beq.n	8002a94 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a20      	ldr	r2, [pc, #128]	; (8002a50 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d05e      	beq.n	8002a90 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a1f      	ldr	r2, [pc, #124]	; (8002a54 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d057      	beq.n	8002a8c <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a1d      	ldr	r2, [pc, #116]	; (8002a58 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d050      	beq.n	8002a88 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a1c      	ldr	r2, [pc, #112]	; (8002a5c <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d049      	beq.n	8002a84 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	4a1a      	ldr	r2, [pc, #104]	; (8002a60 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d042      	beq.n	8002a80 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a19      	ldr	r2, [pc, #100]	; (8002a64 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002a00:	4293      	cmp	r3, r2
 8002a02:	d01a      	beq.n	8002a3a <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a17      	ldr	r2, [pc, #92]	; (8002a68 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d012      	beq.n	8002a34 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4a16      	ldr	r2, [pc, #88]	; (8002a6c <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d00a      	beq.n	8002a2e <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a14      	ldr	r2, [pc, #80]	; (8002a70 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d102      	bne.n	8002a28 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 8002a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a26:	e03a      	b.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002a28:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002a2c:	e037      	b.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002a2e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a32:	e034      	b.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002a34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a38:	e031      	b.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002a3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002a3e:	e02e      	b.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002a40:	40026000 	.word	0x40026000
 8002a44:	40026010 	.word	0x40026010
 8002a48:	40026410 	.word	0x40026410
 8002a4c:	40026070 	.word	0x40026070
 8002a50:	40026470 	.word	0x40026470
 8002a54:	40026028 	.word	0x40026028
 8002a58:	40026428 	.word	0x40026428
 8002a5c:	40026088 	.word	0x40026088
 8002a60:	40026488 	.word	0x40026488
 8002a64:	40026040 	.word	0x40026040
 8002a68:	40026440 	.word	0x40026440
 8002a6c:	400260a0 	.word	0x400260a0
 8002a70:	400264a0 	.word	0x400264a0
 8002a74:	40026458 	.word	0x40026458
 8002a78:	40026400 	.word	0x40026400
 8002a7c:	400260b8 	.word	0x400260b8
 8002a80:	2340      	movs	r3, #64	; 0x40
 8002a82:	e00c      	b.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002a84:	2340      	movs	r3, #64	; 0x40
 8002a86:	e00a      	b.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002a88:	2340      	movs	r3, #64	; 0x40
 8002a8a:	e008      	b.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002a8c:	2340      	movs	r3, #64	; 0x40
 8002a8e:	e006      	b.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002a90:	2301      	movs	r3, #1
 8002a92:	e004      	b.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002a94:	2301      	movs	r3, #1
 8002a96:	e002      	b.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e000      	b.n	8002a9e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8002a9c:	2301      	movs	r3, #1
 8002a9e:	4a7b      	ldr	r2, [pc, #492]	; (8002c8c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8002aa0:	6093      	str	r3, [r2, #8]
 8002aa2:	e0be      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	4b79      	ldr	r3, [pc, #484]	; (8002c90 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d95c      	bls.n	8002b6a <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a77      	ldr	r2, [pc, #476]	; (8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d053      	beq.n	8002b62 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a76      	ldr	r2, [pc, #472]	; (8002c98 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d04c      	beq.n	8002b5e <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a74      	ldr	r2, [pc, #464]	; (8002c9c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d045      	beq.n	8002b5a <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4a73      	ldr	r2, [pc, #460]	; (8002ca0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d03e      	beq.n	8002b56 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a71      	ldr	r2, [pc, #452]	; (8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d037      	beq.n	8002b52 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a70      	ldr	r2, [pc, #448]	; (8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d030      	beq.n	8002b4e <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a6e      	ldr	r2, [pc, #440]	; (8002cac <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d029      	beq.n	8002b4a <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	4a6d      	ldr	r2, [pc, #436]	; (8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d022      	beq.n	8002b46 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	4a6b      	ldr	r2, [pc, #428]	; (8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d01a      	beq.n	8002b40 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	4a6a      	ldr	r2, [pc, #424]	; (8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8002b10:	4293      	cmp	r3, r2
 8002b12:	d012      	beq.n	8002b3a <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a68      	ldr	r2, [pc, #416]	; (8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d00a      	beq.n	8002b34 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a67      	ldr	r2, [pc, #412]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d102      	bne.n	8002b2e <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 8002b28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b2c:	e01a      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002b2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002b32:	e017      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002b34:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b38:	e014      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002b3a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b3e:	e011      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002b40:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b44:	e00e      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002b46:	2340      	movs	r3, #64	; 0x40
 8002b48:	e00c      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002b4a:	2340      	movs	r3, #64	; 0x40
 8002b4c:	e00a      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002b4e:	2340      	movs	r3, #64	; 0x40
 8002b50:	e008      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002b52:	2340      	movs	r3, #64	; 0x40
 8002b54:	e006      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002b56:	2301      	movs	r3, #1
 8002b58:	e004      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e002      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002b5e:	2301      	movs	r3, #1
 8002b60:	e000      	b.n	8002b64 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 8002b62:	2301      	movs	r3, #1
 8002b64:	4a57      	ldr	r2, [pc, #348]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8002b66:	60d3      	str	r3, [r2, #12]
 8002b68:	e05b      	b.n	8002c22 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a49      	ldr	r2, [pc, #292]	; (8002c94 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d053      	beq.n	8002c1c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a47      	ldr	r2, [pc, #284]	; (8002c98 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d04c      	beq.n	8002c18 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a46      	ldr	r2, [pc, #280]	; (8002c9c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d045      	beq.n	8002c14 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a44      	ldr	r2, [pc, #272]	; (8002ca0 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d03e      	beq.n	8002c10 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a43      	ldr	r2, [pc, #268]	; (8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d037      	beq.n	8002c0c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a41      	ldr	r2, [pc, #260]	; (8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d030      	beq.n	8002c08 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a40      	ldr	r2, [pc, #256]	; (8002cac <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d029      	beq.n	8002c04 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a3e      	ldr	r2, [pc, #248]	; (8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d022      	beq.n	8002c00 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a3d      	ldr	r2, [pc, #244]	; (8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d01a      	beq.n	8002bfa <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a3b      	ldr	r2, [pc, #236]	; (8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d012      	beq.n	8002bf4 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a3a      	ldr	r2, [pc, #232]	; (8002cbc <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d00a      	beq.n	8002bee <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a38      	ldr	r2, [pc, #224]	; (8002cc0 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d102      	bne.n	8002be8 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8002be2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002be6:	e01a      	b.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002be8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bec:	e017      	b.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002bee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bf2:	e014      	b.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002bf4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bf8:	e011      	b.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002bfa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bfe:	e00e      	b.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002c00:	2340      	movs	r3, #64	; 0x40
 8002c02:	e00c      	b.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002c04:	2340      	movs	r3, #64	; 0x40
 8002c06:	e00a      	b.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002c08:	2340      	movs	r3, #64	; 0x40
 8002c0a:	e008      	b.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002c0c:	2340      	movs	r3, #64	; 0x40
 8002c0e:	e006      	b.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002c10:	2301      	movs	r3, #1
 8002c12:	e004      	b.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002c14:	2301      	movs	r3, #1
 8002c16:	e002      	b.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e000      	b.n	8002c1e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	4a29      	ldr	r2, [pc, #164]	; (8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 8002c20:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f042 0216 	orr.w	r2, r2, #22
 8002c30:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c40:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d103      	bne.n	8002c52 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d007      	beq.n	8002c62 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	f042 0208 	orr.w	r2, r2, #8
 8002c60:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f042 0201 	orr.w	r2, r2, #1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e005      	b.n	8002c80 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002c7c:	2302      	movs	r3, #2
 8002c7e:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8002c80:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40026400 	.word	0x40026400
 8002c90:	40026058 	.word	0x40026058
 8002c94:	40026010 	.word	0x40026010
 8002c98:	40026410 	.word	0x40026410
 8002c9c:	40026070 	.word	0x40026070
 8002ca0:	40026470 	.word	0x40026470
 8002ca4:	40026028 	.word	0x40026028
 8002ca8:	40026428 	.word	0x40026428
 8002cac:	40026088 	.word	0x40026088
 8002cb0:	40026488 	.word	0x40026488
 8002cb4:	40026040 	.word	0x40026040
 8002cb8:	40026440 	.word	0x40026440
 8002cbc:	400260a0 	.word	0x400260a0
 8002cc0:	400264a0 	.word	0x400264a0
 8002cc4:	40026000 	.word	0x40026000

08002cc8 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b085      	sub	sp, #20
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	60f8      	str	r0, [r7, #12]
 8002cd0:	60b9      	str	r1, [r7, #8]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8002cd6:	79fb      	ldrb	r3, [r7, #7]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d104      	bne.n	8002ce6 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	68ba      	ldr	r2, [r7, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
 8002ce4:	e003      	b.n	8002cee <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	68ba      	ldr	r2, [r7, #8]
 8002cec:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002cee:	2300      	movs	r3, #0
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3714      	adds	r7, #20
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr

08002cfc <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 8002cfc:	b480      	push	{r7}
 8002cfe:	b085      	sub	sp, #20
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	60f8      	str	r0, [r7, #12]
 8002d04:	60b9      	str	r1, [r7, #8]
 8002d06:	607a      	str	r2, [r7, #4]
 8002d08:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	683a      	ldr	r2, [r7, #0]
 8002d10:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	2b40      	cmp	r3, #64	; 0x40
 8002d18:	d108      	bne.n	8002d2c <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	68ba      	ldr	r2, [r7, #8]
 8002d28:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002d2a:	e007      	b.n	8002d3c <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	68ba      	ldr	r2, [r7, #8]
 8002d32:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	687a      	ldr	r2, [r7, #4]
 8002d3a:	60da      	str	r2, [r3, #12]
}
 8002d3c:	bf00      	nop
 8002d3e:	3714      	adds	r7, #20
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e16b      	b.n	800303c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f040 815a 	bne.w	8003036 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d005      	beq.n	8002d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d130      	bne.n	8002dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 0201 	and.w	r2, r3, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d017      	beq.n	8002e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d123      	bne.n	8002e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	08da      	lsrs	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3208      	adds	r2, #8
 8002e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	08da      	lsrs	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3208      	adds	r2, #8
 8002e86:	69b9      	ldr	r1, [r7, #24]
 8002e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0203 	and.w	r2, r3, #3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80b4 	beq.w	8003036 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b60      	ldr	r3, [pc, #384]	; (8003054 <HAL_GPIO_Init+0x30c>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4a5f      	ldr	r2, [pc, #380]	; (8003054 <HAL_GPIO_Init+0x30c>)
 8002ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002edc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ede:	4b5d      	ldr	r3, [pc, #372]	; (8003054 <HAL_GPIO_Init+0x30c>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eea:	4a5b      	ldr	r2, [pc, #364]	; (8003058 <HAL_GPIO_Init+0x310>)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	220f      	movs	r2, #15
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a52      	ldr	r2, [pc, #328]	; (800305c <HAL_GPIO_Init+0x314>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d02b      	beq.n	8002f6e <HAL_GPIO_Init+0x226>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a51      	ldr	r2, [pc, #324]	; (8003060 <HAL_GPIO_Init+0x318>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d025      	beq.n	8002f6a <HAL_GPIO_Init+0x222>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a50      	ldr	r2, [pc, #320]	; (8003064 <HAL_GPIO_Init+0x31c>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d01f      	beq.n	8002f66 <HAL_GPIO_Init+0x21e>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a4f      	ldr	r2, [pc, #316]	; (8003068 <HAL_GPIO_Init+0x320>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d019      	beq.n	8002f62 <HAL_GPIO_Init+0x21a>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a4e      	ldr	r2, [pc, #312]	; (800306c <HAL_GPIO_Init+0x324>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d013      	beq.n	8002f5e <HAL_GPIO_Init+0x216>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a4d      	ldr	r2, [pc, #308]	; (8003070 <HAL_GPIO_Init+0x328>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d00d      	beq.n	8002f5a <HAL_GPIO_Init+0x212>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a4c      	ldr	r2, [pc, #304]	; (8003074 <HAL_GPIO_Init+0x32c>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d007      	beq.n	8002f56 <HAL_GPIO_Init+0x20e>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a4b      	ldr	r2, [pc, #300]	; (8003078 <HAL_GPIO_Init+0x330>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d101      	bne.n	8002f52 <HAL_GPIO_Init+0x20a>
 8002f4e:	2307      	movs	r3, #7
 8002f50:	e00e      	b.n	8002f70 <HAL_GPIO_Init+0x228>
 8002f52:	2308      	movs	r3, #8
 8002f54:	e00c      	b.n	8002f70 <HAL_GPIO_Init+0x228>
 8002f56:	2306      	movs	r3, #6
 8002f58:	e00a      	b.n	8002f70 <HAL_GPIO_Init+0x228>
 8002f5a:	2305      	movs	r3, #5
 8002f5c:	e008      	b.n	8002f70 <HAL_GPIO_Init+0x228>
 8002f5e:	2304      	movs	r3, #4
 8002f60:	e006      	b.n	8002f70 <HAL_GPIO_Init+0x228>
 8002f62:	2303      	movs	r3, #3
 8002f64:	e004      	b.n	8002f70 <HAL_GPIO_Init+0x228>
 8002f66:	2302      	movs	r3, #2
 8002f68:	e002      	b.n	8002f70 <HAL_GPIO_Init+0x228>
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	e000      	b.n	8002f70 <HAL_GPIO_Init+0x228>
 8002f6e:	2300      	movs	r3, #0
 8002f70:	69fa      	ldr	r2, [r7, #28]
 8002f72:	f002 0203 	and.w	r2, r2, #3
 8002f76:	0092      	lsls	r2, r2, #2
 8002f78:	4093      	lsls	r3, r2
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f80:	4935      	ldr	r1, [pc, #212]	; (8003058 <HAL_GPIO_Init+0x310>)
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	089b      	lsrs	r3, r3, #2
 8002f86:	3302      	adds	r3, #2
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f8e:	4b3b      	ldr	r3, [pc, #236]	; (800307c <HAL_GPIO_Init+0x334>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	43db      	mvns	r3, r3
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d003      	beq.n	8002fb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002faa:	69ba      	ldr	r2, [r7, #24]
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fb2:	4a32      	ldr	r2, [pc, #200]	; (800307c <HAL_GPIO_Init+0x334>)
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002fb8:	4b30      	ldr	r3, [pc, #192]	; (800307c <HAL_GPIO_Init+0x334>)
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	43db      	mvns	r3, r3
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	4013      	ands	r3, r2
 8002fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d003      	beq.n	8002fdc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002fd4:	69ba      	ldr	r2, [r7, #24]
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002fdc:	4a27      	ldr	r2, [pc, #156]	; (800307c <HAL_GPIO_Init+0x334>)
 8002fde:	69bb      	ldr	r3, [r7, #24]
 8002fe0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fe2:	4b26      	ldr	r3, [pc, #152]	; (800307c <HAL_GPIO_Init+0x334>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe8:	693b      	ldr	r3, [r7, #16]
 8002fea:	43db      	mvns	r3, r3
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d003      	beq.n	8003006 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ffe:	69ba      	ldr	r2, [r7, #24]
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003006:	4a1d      	ldr	r2, [pc, #116]	; (800307c <HAL_GPIO_Init+0x334>)
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800300c:	4b1b      	ldr	r3, [pc, #108]	; (800307c <HAL_GPIO_Init+0x334>)
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	43db      	mvns	r3, r3
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	4013      	ands	r3, r2
 800301a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003024:	2b00      	cmp	r3, #0
 8003026:	d003      	beq.n	8003030 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003028:	69ba      	ldr	r2, [r7, #24]
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003030:	4a12      	ldr	r2, [pc, #72]	; (800307c <HAL_GPIO_Init+0x334>)
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003036:	69fb      	ldr	r3, [r7, #28]
 8003038:	3301      	adds	r3, #1
 800303a:	61fb      	str	r3, [r7, #28]
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	f67f ae90 	bls.w	8002d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003044:	bf00      	nop
 8003046:	bf00      	nop
 8003048:	3724      	adds	r7, #36	; 0x24
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	40023800 	.word	0x40023800
 8003058:	40013800 	.word	0x40013800
 800305c:	40020000 	.word	0x40020000
 8003060:	40020400 	.word	0x40020400
 8003064:	40020800 	.word	0x40020800
 8003068:	40020c00 	.word	0x40020c00
 800306c:	40021000 	.word	0x40021000
 8003070:	40021400 	.word	0x40021400
 8003074:	40021800 	.word	0x40021800
 8003078:	40021c00 	.word	0x40021c00
 800307c:	40013c00 	.word	0x40013c00

08003080 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	b084      	sub	sp, #16
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	2b00      	cmp	r3, #0
 800308c:	d101      	bne.n	8003092 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e12b      	b.n	80032ea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003098:	b2db      	uxtb	r3, r3
 800309a:	2b00      	cmp	r3, #0
 800309c:	d106      	bne.n	80030ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80030a6:	6878      	ldr	r0, [r7, #4]
 80030a8:	f7fd fcb8 	bl	8000a1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2224      	movs	r2, #36	; 0x24
 80030b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	681a      	ldr	r2, [r3, #0]
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	681a      	ldr	r2, [r3, #0]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030e4:	f000 fda8 	bl	8003c38 <HAL_RCC_GetPCLK1Freq>
 80030e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	685b      	ldr	r3, [r3, #4]
 80030ee:	4a81      	ldr	r2, [pc, #516]	; (80032f4 <HAL_I2C_Init+0x274>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d807      	bhi.n	8003104 <HAL_I2C_Init+0x84>
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4a80      	ldr	r2, [pc, #512]	; (80032f8 <HAL_I2C_Init+0x278>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	bf94      	ite	ls
 80030fc:	2301      	movls	r3, #1
 80030fe:	2300      	movhi	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	e006      	b.n	8003112 <HAL_I2C_Init+0x92>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	4a7d      	ldr	r2, [pc, #500]	; (80032fc <HAL_I2C_Init+0x27c>)
 8003108:	4293      	cmp	r3, r2
 800310a:	bf94      	ite	ls
 800310c:	2301      	movls	r3, #1
 800310e:	2300      	movhi	r3, #0
 8003110:	b2db      	uxtb	r3, r3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d001      	beq.n	800311a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e0e7      	b.n	80032ea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4a78      	ldr	r2, [pc, #480]	; (8003300 <HAL_I2C_Init+0x280>)
 800311e:	fba2 2303 	umull	r2, r3, r2, r3
 8003122:	0c9b      	lsrs	r3, r3, #18
 8003124:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	68ba      	ldr	r2, [r7, #8]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a6a      	ldr	r2, [pc, #424]	; (80032f4 <HAL_I2C_Init+0x274>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d802      	bhi.n	8003154 <HAL_I2C_Init+0xd4>
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	3301      	adds	r3, #1
 8003152:	e009      	b.n	8003168 <HAL_I2C_Init+0xe8>
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800315a:	fb02 f303 	mul.w	r3, r2, r3
 800315e:	4a69      	ldr	r2, [pc, #420]	; (8003304 <HAL_I2C_Init+0x284>)
 8003160:	fba2 2303 	umull	r2, r3, r2, r3
 8003164:	099b      	lsrs	r3, r3, #6
 8003166:	3301      	adds	r3, #1
 8003168:	687a      	ldr	r2, [r7, #4]
 800316a:	6812      	ldr	r2, [r2, #0]
 800316c:	430b      	orrs	r3, r1
 800316e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	69db      	ldr	r3, [r3, #28]
 8003176:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800317a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	495c      	ldr	r1, [pc, #368]	; (80032f4 <HAL_I2C_Init+0x274>)
 8003184:	428b      	cmp	r3, r1
 8003186:	d819      	bhi.n	80031bc <HAL_I2C_Init+0x13c>
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	1e59      	subs	r1, r3, #1
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	005b      	lsls	r3, r3, #1
 8003192:	fbb1 f3f3 	udiv	r3, r1, r3
 8003196:	1c59      	adds	r1, r3, #1
 8003198:	f640 73fc 	movw	r3, #4092	; 0xffc
 800319c:	400b      	ands	r3, r1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d00a      	beq.n	80031b8 <HAL_I2C_Init+0x138>
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1e59      	subs	r1, r3, #1
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	685b      	ldr	r3, [r3, #4]
 80031aa:	005b      	lsls	r3, r3, #1
 80031ac:	fbb1 f3f3 	udiv	r3, r1, r3
 80031b0:	3301      	adds	r3, #1
 80031b2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031b6:	e051      	b.n	800325c <HAL_I2C_Init+0x1dc>
 80031b8:	2304      	movs	r3, #4
 80031ba:	e04f      	b.n	800325c <HAL_I2C_Init+0x1dc>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d111      	bne.n	80031e8 <HAL_I2C_Init+0x168>
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	1e58      	subs	r0, r3, #1
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6859      	ldr	r1, [r3, #4]
 80031cc:	460b      	mov	r3, r1
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	440b      	add	r3, r1
 80031d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80031d6:	3301      	adds	r3, #1
 80031d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031dc:	2b00      	cmp	r3, #0
 80031de:	bf0c      	ite	eq
 80031e0:	2301      	moveq	r3, #1
 80031e2:	2300      	movne	r3, #0
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	e012      	b.n	800320e <HAL_I2C_Init+0x18e>
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	1e58      	subs	r0, r3, #1
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6859      	ldr	r1, [r3, #4]
 80031f0:	460b      	mov	r3, r1
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	0099      	lsls	r1, r3, #2
 80031f8:	440b      	add	r3, r1
 80031fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80031fe:	3301      	adds	r3, #1
 8003200:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003204:	2b00      	cmp	r3, #0
 8003206:	bf0c      	ite	eq
 8003208:	2301      	moveq	r3, #1
 800320a:	2300      	movne	r3, #0
 800320c:	b2db      	uxtb	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d001      	beq.n	8003216 <HAL_I2C_Init+0x196>
 8003212:	2301      	movs	r3, #1
 8003214:	e022      	b.n	800325c <HAL_I2C_Init+0x1dc>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10e      	bne.n	800323c <HAL_I2C_Init+0x1bc>
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	1e58      	subs	r0, r3, #1
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6859      	ldr	r1, [r3, #4]
 8003226:	460b      	mov	r3, r1
 8003228:	005b      	lsls	r3, r3, #1
 800322a:	440b      	add	r3, r1
 800322c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003230:	3301      	adds	r3, #1
 8003232:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003236:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800323a:	e00f      	b.n	800325c <HAL_I2C_Init+0x1dc>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	1e58      	subs	r0, r3, #1
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6859      	ldr	r1, [r3, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	440b      	add	r3, r1
 800324a:	0099      	lsls	r1, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003252:	3301      	adds	r3, #1
 8003254:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003258:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	6809      	ldr	r1, [r1, #0]
 8003260:	4313      	orrs	r3, r2
 8003262:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	69da      	ldr	r2, [r3, #28]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	431a      	orrs	r2, r3
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800328a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	6911      	ldr	r1, [r2, #16]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68d2      	ldr	r2, [r2, #12]
 8003296:	4311      	orrs	r1, r2
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	6812      	ldr	r2, [r2, #0]
 800329c:	430b      	orrs	r3, r1
 800329e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68db      	ldr	r3, [r3, #12]
 80032a6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	695a      	ldr	r2, [r3, #20]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	699b      	ldr	r3, [r3, #24]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	430a      	orrs	r2, r1
 80032ba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f042 0201 	orr.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2220      	movs	r2, #32
 80032d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80032e8:	2300      	movs	r3, #0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3710      	adds	r7, #16
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd80      	pop	{r7, pc}
 80032f2:	bf00      	nop
 80032f4:	000186a0 	.word	0x000186a0
 80032f8:	001e847f 	.word	0x001e847f
 80032fc:	003d08ff 	.word	0x003d08ff
 8003300:	431bde83 	.word	0x431bde83
 8003304:	10624dd3 	.word	0x10624dd3

08003308 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e267      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0301 	and.w	r3, r3, #1
 8003322:	2b00      	cmp	r3, #0
 8003324:	d075      	beq.n	8003412 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	f003 030c 	and.w	r3, r3, #12
 800332e:	2b04      	cmp	r3, #4
 8003330:	d00c      	beq.n	800334c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003332:	4b85      	ldr	r3, [pc, #532]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800333a:	2b08      	cmp	r3, #8
 800333c:	d112      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333e:	4b82      	ldr	r3, [pc, #520]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800334a:	d10b      	bne.n	8003364 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800334c:	4b7e      	ldr	r3, [pc, #504]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d05b      	beq.n	8003410 <HAL_RCC_OscConfig+0x108>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	2b00      	cmp	r3, #0
 800335e:	d157      	bne.n	8003410 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003360:	2301      	movs	r3, #1
 8003362:	e242      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800336c:	d106      	bne.n	800337c <HAL_RCC_OscConfig+0x74>
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a75      	ldr	r2, [pc, #468]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003374:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003378:	6013      	str	r3, [r2, #0]
 800337a:	e01d      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003384:	d10c      	bne.n	80033a0 <HAL_RCC_OscConfig+0x98>
 8003386:	4b70      	ldr	r3, [pc, #448]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4a6f      	ldr	r2, [pc, #444]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800338c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003390:	6013      	str	r3, [r2, #0]
 8003392:	4b6d      	ldr	r3, [pc, #436]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a6c      	ldr	r2, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003398:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800339c:	6013      	str	r3, [r2, #0]
 800339e:	e00b      	b.n	80033b8 <HAL_RCC_OscConfig+0xb0>
 80033a0:	4b69      	ldr	r3, [pc, #420]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a68      	ldr	r2, [pc, #416]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033aa:	6013      	str	r3, [r2, #0]
 80033ac:	4b66      	ldr	r3, [pc, #408]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a65      	ldr	r2, [pc, #404]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033b6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d013      	beq.n	80033e8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c0:	f7fd fc2a 	bl	8000c18 <HAL_GetTick>
 80033c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	e008      	b.n	80033da <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033c8:	f7fd fc26 	bl	8000c18 <HAL_GetTick>
 80033cc:	4602      	mov	r2, r0
 80033ce:	693b      	ldr	r3, [r7, #16]
 80033d0:	1ad3      	subs	r3, r2, r3
 80033d2:	2b64      	cmp	r3, #100	; 0x64
 80033d4:	d901      	bls.n	80033da <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e207      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033da:	4b5b      	ldr	r3, [pc, #364]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d0f0      	beq.n	80033c8 <HAL_RCC_OscConfig+0xc0>
 80033e6:	e014      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033e8:	f7fd fc16 	bl	8000c18 <HAL_GetTick>
 80033ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	e008      	b.n	8003402 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033f0:	f7fd fc12 	bl	8000c18 <HAL_GetTick>
 80033f4:	4602      	mov	r2, r0
 80033f6:	693b      	ldr	r3, [r7, #16]
 80033f8:	1ad3      	subs	r3, r2, r3
 80033fa:	2b64      	cmp	r3, #100	; 0x64
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e1f3      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003402:	4b51      	ldr	r3, [pc, #324]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340a:	2b00      	cmp	r3, #0
 800340c:	d1f0      	bne.n	80033f0 <HAL_RCC_OscConfig+0xe8>
 800340e:	e000      	b.n	8003412 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003410:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d063      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800341e:	4b4a      	ldr	r3, [pc, #296]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b00      	cmp	r3, #0
 8003428:	d00b      	beq.n	8003442 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800342a:	4b47      	ldr	r3, [pc, #284]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003432:	2b08      	cmp	r3, #8
 8003434:	d11c      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003436:	4b44      	ldr	r3, [pc, #272]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d116      	bne.n	8003470 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003442:	4b41      	ldr	r3, [pc, #260]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d005      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	2b01      	cmp	r3, #1
 8003454:	d001      	beq.n	800345a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003456:	2301      	movs	r3, #1
 8003458:	e1c7      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800345a:	4b3b      	ldr	r3, [pc, #236]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	00db      	lsls	r3, r3, #3
 8003468:	4937      	ldr	r1, [pc, #220]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800346a:	4313      	orrs	r3, r2
 800346c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	e03a      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d020      	beq.n	80034ba <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003478:	4b34      	ldr	r3, [pc, #208]	; (800354c <HAL_RCC_OscConfig+0x244>)
 800347a:	2201      	movs	r2, #1
 800347c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800347e:	f7fd fbcb 	bl	8000c18 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	e008      	b.n	8003498 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003486:	f7fd fbc7 	bl	8000c18 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d901      	bls.n	8003498 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e1a8      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003498:	4b2b      	ldr	r3, [pc, #172]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	f003 0302 	and.w	r3, r3, #2
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d0f0      	beq.n	8003486 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a4:	4b28      	ldr	r3, [pc, #160]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	4925      	ldr	r1, [pc, #148]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	600b      	str	r3, [r1, #0]
 80034b8:	e015      	b.n	80034e6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ba:	4b24      	ldr	r3, [pc, #144]	; (800354c <HAL_RCC_OscConfig+0x244>)
 80034bc:	2200      	movs	r2, #0
 80034be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034c0:	f7fd fbaa 	bl	8000c18 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034c8:	f7fd fba6 	bl	8000c18 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e187      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034da:	4b1b      	ldr	r3, [pc, #108]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d1f0      	bne.n	80034c8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0308 	and.w	r3, r3, #8
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d036      	beq.n	8003560 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	695b      	ldr	r3, [r3, #20]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d016      	beq.n	8003528 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034fa:	4b15      	ldr	r3, [pc, #84]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 80034fc:	2201      	movs	r2, #1
 80034fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003500:	f7fd fb8a 	bl	8000c18 <HAL_GetTick>
 8003504:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	e008      	b.n	800351a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003508:	f7fd fb86 	bl	8000c18 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	693b      	ldr	r3, [r7, #16]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	2b02      	cmp	r3, #2
 8003514:	d901      	bls.n	800351a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e167      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <HAL_RCC_OscConfig+0x240>)
 800351c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800351e:	f003 0302 	and.w	r3, r3, #2
 8003522:	2b00      	cmp	r3, #0
 8003524:	d0f0      	beq.n	8003508 <HAL_RCC_OscConfig+0x200>
 8003526:	e01b      	b.n	8003560 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <HAL_RCC_OscConfig+0x248>)
 800352a:	2200      	movs	r2, #0
 800352c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800352e:	f7fd fb73 	bl	8000c18 <HAL_GetTick>
 8003532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003534:	e00e      	b.n	8003554 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003536:	f7fd fb6f 	bl	8000c18 <HAL_GetTick>
 800353a:	4602      	mov	r2, r0
 800353c:	693b      	ldr	r3, [r7, #16]
 800353e:	1ad3      	subs	r3, r2, r3
 8003540:	2b02      	cmp	r3, #2
 8003542:	d907      	bls.n	8003554 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003544:	2303      	movs	r3, #3
 8003546:	e150      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003548:	40023800 	.word	0x40023800
 800354c:	42470000 	.word	0x42470000
 8003550:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003554:	4b88      	ldr	r3, [pc, #544]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003556:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003558:	f003 0302 	and.w	r3, r3, #2
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1ea      	bne.n	8003536 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	f000 8097 	beq.w	800369c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800356e:	2300      	movs	r3, #0
 8003570:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003572:	4b81      	ldr	r3, [pc, #516]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d10f      	bne.n	800359e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800357e:	2300      	movs	r3, #0
 8003580:	60bb      	str	r3, [r7, #8]
 8003582:	4b7d      	ldr	r3, [pc, #500]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	4a7c      	ldr	r2, [pc, #496]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003588:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800358c:	6413      	str	r3, [r2, #64]	; 0x40
 800358e:	4b7a      	ldr	r3, [pc, #488]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003596:	60bb      	str	r3, [r7, #8]
 8003598:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800359a:	2301      	movs	r3, #1
 800359c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800359e:	4b77      	ldr	r3, [pc, #476]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d118      	bne.n	80035dc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035aa:	4b74      	ldr	r3, [pc, #464]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4a73      	ldr	r2, [pc, #460]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035b6:	f7fd fb2f 	bl	8000c18 <HAL_GetTick>
 80035ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035bc:	e008      	b.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035be:	f7fd fb2b 	bl	8000c18 <HAL_GetTick>
 80035c2:	4602      	mov	r2, r0
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e10c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d0:	4b6a      	ldr	r3, [pc, #424]	; (800377c <HAL_RCC_OscConfig+0x474>)
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d0f0      	beq.n	80035be <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	689b      	ldr	r3, [r3, #8]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d106      	bne.n	80035f2 <HAL_RCC_OscConfig+0x2ea>
 80035e4:	4b64      	ldr	r3, [pc, #400]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035e8:	4a63      	ldr	r2, [pc, #396]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035ea:	f043 0301 	orr.w	r3, r3, #1
 80035ee:	6713      	str	r3, [r2, #112]	; 0x70
 80035f0:	e01c      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b05      	cmp	r3, #5
 80035f8:	d10c      	bne.n	8003614 <HAL_RCC_OscConfig+0x30c>
 80035fa:	4b5f      	ldr	r3, [pc, #380]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80035fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035fe:	4a5e      	ldr	r2, [pc, #376]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003600:	f043 0304 	orr.w	r3, r3, #4
 8003604:	6713      	str	r3, [r2, #112]	; 0x70
 8003606:	4b5c      	ldr	r3, [pc, #368]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800360a:	4a5b      	ldr	r2, [pc, #364]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800360c:	f043 0301 	orr.w	r3, r3, #1
 8003610:	6713      	str	r3, [r2, #112]	; 0x70
 8003612:	e00b      	b.n	800362c <HAL_RCC_OscConfig+0x324>
 8003614:	4b58      	ldr	r3, [pc, #352]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003616:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003618:	4a57      	ldr	r2, [pc, #348]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800361a:	f023 0301 	bic.w	r3, r3, #1
 800361e:	6713      	str	r3, [r2, #112]	; 0x70
 8003620:	4b55      	ldr	r3, [pc, #340]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003622:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003624:	4a54      	ldr	r2, [pc, #336]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003626:	f023 0304 	bic.w	r3, r3, #4
 800362a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d015      	beq.n	8003660 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003634:	f7fd faf0 	bl	8000c18 <HAL_GetTick>
 8003638:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800363a:	e00a      	b.n	8003652 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800363c:	f7fd faec 	bl	8000c18 <HAL_GetTick>
 8003640:	4602      	mov	r2, r0
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	1ad3      	subs	r3, r2, r3
 8003646:	f241 3288 	movw	r2, #5000	; 0x1388
 800364a:	4293      	cmp	r3, r2
 800364c:	d901      	bls.n	8003652 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800364e:	2303      	movs	r3, #3
 8003650:	e0cb      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003652:	4b49      	ldr	r3, [pc, #292]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003654:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003656:	f003 0302 	and.w	r3, r3, #2
 800365a:	2b00      	cmp	r3, #0
 800365c:	d0ee      	beq.n	800363c <HAL_RCC_OscConfig+0x334>
 800365e:	e014      	b.n	800368a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003660:	f7fd fada 	bl	8000c18 <HAL_GetTick>
 8003664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003666:	e00a      	b.n	800367e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003668:	f7fd fad6 	bl	8000c18 <HAL_GetTick>
 800366c:	4602      	mov	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	f241 3288 	movw	r2, #5000	; 0x1388
 8003676:	4293      	cmp	r3, r2
 8003678:	d901      	bls.n	800367e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800367a:	2303      	movs	r3, #3
 800367c:	e0b5      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800367e:	4b3e      	ldr	r3, [pc, #248]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b00      	cmp	r3, #0
 8003688:	d1ee      	bne.n	8003668 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800368a:	7dfb      	ldrb	r3, [r7, #23]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d105      	bne.n	800369c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003690:	4b39      	ldr	r3, [pc, #228]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	4a38      	ldr	r2, [pc, #224]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003696:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800369a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	699b      	ldr	r3, [r3, #24]
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	f000 80a1 	beq.w	80037e8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80036a6:	4b34      	ldr	r3, [pc, #208]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	f003 030c 	and.w	r3, r3, #12
 80036ae:	2b08      	cmp	r3, #8
 80036b0:	d05c      	beq.n	800376c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	699b      	ldr	r3, [r3, #24]
 80036b6:	2b02      	cmp	r3, #2
 80036b8:	d141      	bne.n	800373e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036ba:	4b31      	ldr	r3, [pc, #196]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 80036bc:	2200      	movs	r2, #0
 80036be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036c0:	f7fd faaa 	bl	8000c18 <HAL_GetTick>
 80036c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036c6:	e008      	b.n	80036da <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c8:	f7fd faa6 	bl	8000c18 <HAL_GetTick>
 80036cc:	4602      	mov	r2, r0
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d901      	bls.n	80036da <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e087      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036da:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d1f0      	bne.n	80036c8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	69da      	ldr	r2, [r3, #28]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a1b      	ldr	r3, [r3, #32]
 80036ee:	431a      	orrs	r2, r3
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036f4:	019b      	lsls	r3, r3, #6
 80036f6:	431a      	orrs	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036fc:	085b      	lsrs	r3, r3, #1
 80036fe:	3b01      	subs	r3, #1
 8003700:	041b      	lsls	r3, r3, #16
 8003702:	431a      	orrs	r2, r3
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003708:	061b      	lsls	r3, r3, #24
 800370a:	491b      	ldr	r1, [pc, #108]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 800370c:	4313      	orrs	r3, r2
 800370e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003710:	4b1b      	ldr	r3, [pc, #108]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003716:	f7fd fa7f 	bl	8000c18 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800371e:	f7fd fa7b 	bl	8000c18 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e05c      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003730:	4b11      	ldr	r3, [pc, #68]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x416>
 800373c:	e054      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373e:	4b10      	ldr	r3, [pc, #64]	; (8003780 <HAL_RCC_OscConfig+0x478>)
 8003740:	2200      	movs	r2, #0
 8003742:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003744:	f7fd fa68 	bl	8000c18 <HAL_GetTick>
 8003748:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800374a:	e008      	b.n	800375e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800374c:	f7fd fa64 	bl	8000c18 <HAL_GetTick>
 8003750:	4602      	mov	r2, r0
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d901      	bls.n	800375e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e045      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_RCC_OscConfig+0x470>)
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d1f0      	bne.n	800374c <HAL_RCC_OscConfig+0x444>
 800376a:	e03d      	b.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d107      	bne.n	8003784 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e038      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
 8003778:	40023800 	.word	0x40023800
 800377c:	40007000 	.word	0x40007000
 8003780:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003784:	4b1b      	ldr	r3, [pc, #108]	; (80037f4 <HAL_RCC_OscConfig+0x4ec>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	699b      	ldr	r3, [r3, #24]
 800378e:	2b01      	cmp	r3, #1
 8003790:	d028      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d121      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037aa:	429a      	cmp	r2, r3
 80037ac:	d11a      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037ae:	68fa      	ldr	r2, [r7, #12]
 80037b0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80037b4:	4013      	ands	r3, r2
 80037b6:	687a      	ldr	r2, [r7, #4]
 80037b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80037ba:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80037bc:	4293      	cmp	r3, r2
 80037be:	d111      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037ca:	085b      	lsrs	r3, r3, #1
 80037cc:	3b01      	subs	r3, #1
 80037ce:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d107      	bne.n	80037e4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037de:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d001      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e000      	b.n	80037ea <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80037e8:	2300      	movs	r3, #0
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3718      	adds	r7, #24
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bd80      	pop	{r7, pc}
 80037f2:	bf00      	nop
 80037f4:	40023800 	.word	0x40023800

080037f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
 8003800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d101      	bne.n	800380c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003808:	2301      	movs	r3, #1
 800380a:	e0cc      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800380c:	4b68      	ldr	r3, [pc, #416]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d90c      	bls.n	8003834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b65      	ldr	r3, [pc, #404]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b63      	ldr	r3, [pc, #396]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0307 	and.w	r3, r3, #7
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e0b8      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0302 	and.w	r3, r3, #2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d020      	beq.n	8003882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d005      	beq.n	8003858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800384c:	4b59      	ldr	r3, [pc, #356]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	4a58      	ldr	r2, [pc, #352]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003852:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003856:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0308 	and.w	r3, r3, #8
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003864:	4b53      	ldr	r3, [pc, #332]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	4a52      	ldr	r2, [pc, #328]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800386a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800386e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003870:	4b50      	ldr	r3, [pc, #320]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	494d      	ldr	r1, [pc, #308]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800387e:	4313      	orrs	r3, r2
 8003880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0301 	and.w	r3, r3, #1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d044      	beq.n	8003918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d107      	bne.n	80038a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003896:	4b47      	ldr	r3, [pc, #284]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d119      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d003      	beq.n	80038b6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80038b2:	2b03      	cmp	r3, #3
 80038b4:	d107      	bne.n	80038c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b6:	4b3f      	ldr	r3, [pc, #252]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d109      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e06f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038c6:	4b3b      	ldr	r3, [pc, #236]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e067      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038d6:	4b37      	ldr	r3, [pc, #220]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038d8:	689b      	ldr	r3, [r3, #8]
 80038da:	f023 0203 	bic.w	r2, r3, #3
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	4934      	ldr	r1, [pc, #208]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 80038e4:	4313      	orrs	r3, r2
 80038e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038e8:	f7fd f996 	bl	8000c18 <HAL_GetTick>
 80038ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ee:	e00a      	b.n	8003906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038f0:	f7fd f992 	bl	8000c18 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038fe:	4293      	cmp	r3, r2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e04f      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003906:	4b2b      	ldr	r3, [pc, #172]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 020c 	and.w	r2, r3, #12
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	685b      	ldr	r3, [r3, #4]
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	429a      	cmp	r2, r3
 8003916:	d1eb      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003918:	4b25      	ldr	r3, [pc, #148]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 0307 	and.w	r3, r3, #7
 8003920:	683a      	ldr	r2, [r7, #0]
 8003922:	429a      	cmp	r2, r3
 8003924:	d20c      	bcs.n	8003940 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003926:	4b22      	ldr	r3, [pc, #136]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	b2d2      	uxtb	r2, r2
 800392c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800392e:	4b20      	ldr	r3, [pc, #128]	; (80039b0 <HAL_RCC_ClockConfig+0x1b8>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f003 0307 	and.w	r3, r3, #7
 8003936:	683a      	ldr	r2, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d001      	beq.n	8003940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e032      	b.n	80039a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0304 	and.w	r3, r3, #4
 8003948:	2b00      	cmp	r3, #0
 800394a:	d008      	beq.n	800395e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800394c:	4b19      	ldr	r3, [pc, #100]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	4916      	ldr	r1, [pc, #88]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800395a:	4313      	orrs	r3, r2
 800395c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f003 0308 	and.w	r3, r3, #8
 8003966:	2b00      	cmp	r3, #0
 8003968:	d009      	beq.n	800397e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800396a:	4b12      	ldr	r3, [pc, #72]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800396c:	689b      	ldr	r3, [r3, #8]
 800396e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	691b      	ldr	r3, [r3, #16]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	490e      	ldr	r1, [pc, #56]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	4313      	orrs	r3, r2
 800397c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800397e:	f000 f889 	bl	8003a94 <HAL_RCC_GetSysClockFreq>
 8003982:	4602      	mov	r2, r0
 8003984:	4b0b      	ldr	r3, [pc, #44]	; (80039b4 <HAL_RCC_ClockConfig+0x1bc>)
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	490a      	ldr	r1, [pc, #40]	; (80039b8 <HAL_RCC_ClockConfig+0x1c0>)
 8003990:	5ccb      	ldrb	r3, [r1, r3]
 8003992:	fa22 f303 	lsr.w	r3, r2, r3
 8003996:	4a09      	ldr	r2, [pc, #36]	; (80039bc <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800399a:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <HAL_RCC_ClockConfig+0x1c8>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	4618      	mov	r0, r3
 80039a0:	f7fd f8f6 	bl	8000b90 <HAL_InitTick>

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3710      	adds	r7, #16
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	40023c00 	.word	0x40023c00
 80039b4:	40023800 	.word	0x40023800
 80039b8:	08003cd0 	.word	0x08003cd0
 80039bc:	20000000 	.word	0x20000000
 80039c0:	20000004 	.word	0x20000004

080039c4 <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b08c      	sub	sp, #48	; 0x30
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d129      	bne.n	8003a2a <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	4b2b      	ldr	r3, [pc, #172]	; (8003a88 <HAL_RCC_MCOConfig+0xc4>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039de:	4a2a      	ldr	r2, [pc, #168]	; (8003a88 <HAL_RCC_MCOConfig+0xc4>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6313      	str	r3, [r2, #48]	; 0x30
 80039e6:	4b28      	ldr	r3, [pc, #160]	; (8003a88 <HAL_RCC_MCOConfig+0xc4>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 80039f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80039f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f8:	2302      	movs	r3, #2
 80039fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039fc:	2303      	movs	r3, #3
 80039fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a00:	2300      	movs	r3, #0
 8003a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003a04:	2300      	movs	r3, #0
 8003a06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8003a08:	f107 031c 	add.w	r3, r7, #28
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	481f      	ldr	r0, [pc, #124]	; (8003a8c <HAL_RCC_MCOConfig+0xc8>)
 8003a10:	f7ff f99a 	bl	8002d48 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8003a14:	4b1c      	ldr	r3, [pc, #112]	; (8003a88 <HAL_RCC_MCOConfig+0xc4>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	430b      	orrs	r3, r1
 8003a22:	4919      	ldr	r1, [pc, #100]	; (8003a88 <HAL_RCC_MCOConfig+0xc4>)
 8003a24:	4313      	orrs	r3, r2
 8003a26:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8003a28:	e029      	b.n	8003a7e <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	617b      	str	r3, [r7, #20]
 8003a2e:	4b16      	ldr	r3, [pc, #88]	; (8003a88 <HAL_RCC_MCOConfig+0xc4>)
 8003a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a32:	4a15      	ldr	r2, [pc, #84]	; (8003a88 <HAL_RCC_MCOConfig+0xc4>)
 8003a34:	f043 0304 	orr.w	r3, r3, #4
 8003a38:	6313      	str	r3, [r2, #48]	; 0x30
 8003a3a:	4b13      	ldr	r3, [pc, #76]	; (8003a88 <HAL_RCC_MCOConfig+0xc4>)
 8003a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	617b      	str	r3, [r7, #20]
 8003a44:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8003a46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a4c:	2302      	movs	r3, #2
 8003a4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a50:	2303      	movs	r3, #3
 8003a52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8003a5c:	f107 031c 	add.w	r3, r7, #28
 8003a60:	4619      	mov	r1, r3
 8003a62:	480b      	ldr	r0, [pc, #44]	; (8003a90 <HAL_RCC_MCOConfig+0xcc>)
 8003a64:	f7ff f970 	bl	8002d48 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8003a68:	4b07      	ldr	r3, [pc, #28]	; (8003a88 <HAL_RCC_MCOConfig+0xc4>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	00d9      	lsls	r1, r3, #3
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	430b      	orrs	r3, r1
 8003a78:	4903      	ldr	r1, [pc, #12]	; (8003a88 <HAL_RCC_MCOConfig+0xc4>)
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	608b      	str	r3, [r1, #8]
}
 8003a7e:	bf00      	nop
 8003a80:	3730      	adds	r7, #48	; 0x30
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}
 8003a86:	bf00      	nop
 8003a88:	40023800 	.word	0x40023800
 8003a8c:	40020000 	.word	0x40020000
 8003a90:	40020800 	.word	0x40020800

08003a94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a98:	b090      	sub	sp, #64	; 0x40
 8003a9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	637b      	str	r3, [r7, #52]	; 0x34
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aac:	4b59      	ldr	r3, [pc, #356]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	f003 030c 	and.w	r3, r3, #12
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d00d      	beq.n	8003ad4 <HAL_RCC_GetSysClockFreq+0x40>
 8003ab8:	2b08      	cmp	r3, #8
 8003aba:	f200 80a1 	bhi.w	8003c00 <HAL_RCC_GetSysClockFreq+0x16c>
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d002      	beq.n	8003ac8 <HAL_RCC_GetSysClockFreq+0x34>
 8003ac2:	2b04      	cmp	r3, #4
 8003ac4:	d003      	beq.n	8003ace <HAL_RCC_GetSysClockFreq+0x3a>
 8003ac6:	e09b      	b.n	8003c00 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac8:	4b53      	ldr	r3, [pc, #332]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8003aca:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003acc:	e09b      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ace:	4b53      	ldr	r3, [pc, #332]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003ad0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003ad2:	e098      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ad4:	4b4f      	ldr	r3, [pc, #316]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003adc:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ade:	4b4d      	ldr	r3, [pc, #308]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d028      	beq.n	8003b3c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003aea:	4b4a      	ldr	r3, [pc, #296]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	099b      	lsrs	r3, r3, #6
 8003af0:	2200      	movs	r2, #0
 8003af2:	623b      	str	r3, [r7, #32]
 8003af4:	627a      	str	r2, [r7, #36]	; 0x24
 8003af6:	6a3b      	ldr	r3, [r7, #32]
 8003af8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003afc:	2100      	movs	r1, #0
 8003afe:	4b47      	ldr	r3, [pc, #284]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b00:	fb03 f201 	mul.w	r2, r3, r1
 8003b04:	2300      	movs	r3, #0
 8003b06:	fb00 f303 	mul.w	r3, r0, r3
 8003b0a:	4413      	add	r3, r2
 8003b0c:	4a43      	ldr	r2, [pc, #268]	; (8003c1c <HAL_RCC_GetSysClockFreq+0x188>)
 8003b0e:	fba0 1202 	umull	r1, r2, r0, r2
 8003b12:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b14:	460a      	mov	r2, r1
 8003b16:	62ba      	str	r2, [r7, #40]	; 0x28
 8003b18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b1a:	4413      	add	r3, r2
 8003b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b20:	2200      	movs	r2, #0
 8003b22:	61bb      	str	r3, [r7, #24]
 8003b24:	61fa      	str	r2, [r7, #28]
 8003b26:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003b2a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003b2e:	f7fc fb4b 	bl	80001c8 <__aeabi_uldivmod>
 8003b32:	4602      	mov	r2, r0
 8003b34:	460b      	mov	r3, r1
 8003b36:	4613      	mov	r3, r2
 8003b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003b3a:	e053      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b3c:	4b35      	ldr	r3, [pc, #212]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	099b      	lsrs	r3, r3, #6
 8003b42:	2200      	movs	r2, #0
 8003b44:	613b      	str	r3, [r7, #16]
 8003b46:	617a      	str	r2, [r7, #20]
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003b4e:	f04f 0b00 	mov.w	fp, #0
 8003b52:	4652      	mov	r2, sl
 8003b54:	465b      	mov	r3, fp
 8003b56:	f04f 0000 	mov.w	r0, #0
 8003b5a:	f04f 0100 	mov.w	r1, #0
 8003b5e:	0159      	lsls	r1, r3, #5
 8003b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b64:	0150      	lsls	r0, r2, #5
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	ebb2 080a 	subs.w	r8, r2, sl
 8003b6e:	eb63 090b 	sbc.w	r9, r3, fp
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003b7e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003b82:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003b86:	ebb2 0408 	subs.w	r4, r2, r8
 8003b8a:	eb63 0509 	sbc.w	r5, r3, r9
 8003b8e:	f04f 0200 	mov.w	r2, #0
 8003b92:	f04f 0300 	mov.w	r3, #0
 8003b96:	00eb      	lsls	r3, r5, #3
 8003b98:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003b9c:	00e2      	lsls	r2, r4, #3
 8003b9e:	4614      	mov	r4, r2
 8003ba0:	461d      	mov	r5, r3
 8003ba2:	eb14 030a 	adds.w	r3, r4, sl
 8003ba6:	603b      	str	r3, [r7, #0]
 8003ba8:	eb45 030b 	adc.w	r3, r5, fp
 8003bac:	607b      	str	r3, [r7, #4]
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003bba:	4629      	mov	r1, r5
 8003bbc:	028b      	lsls	r3, r1, #10
 8003bbe:	4621      	mov	r1, r4
 8003bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bc4:	4621      	mov	r1, r4
 8003bc6:	028a      	lsls	r2, r1, #10
 8003bc8:	4610      	mov	r0, r2
 8003bca:	4619      	mov	r1, r3
 8003bcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003bce:	2200      	movs	r2, #0
 8003bd0:	60bb      	str	r3, [r7, #8]
 8003bd2:	60fa      	str	r2, [r7, #12]
 8003bd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003bd8:	f7fc faf6 	bl	80001c8 <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4613      	mov	r3, r2
 8003be2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003be4:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x180>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	0c1b      	lsrs	r3, r3, #16
 8003bea:	f003 0303 	and.w	r3, r3, #3
 8003bee:	3301      	adds	r3, #1
 8003bf0:	005b      	lsls	r3, r3, #1
 8003bf2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003bf4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003bf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bfc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bfe:	e002      	b.n	8003c06 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c00:	4b05      	ldr	r3, [pc, #20]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c02:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003c08:	4618      	mov	r0, r3
 8003c0a:	3740      	adds	r7, #64	; 0x40
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c12:	bf00      	nop
 8003c14:	40023800 	.word	0x40023800
 8003c18:	00f42400 	.word	0x00f42400
 8003c1c:	017d7840 	.word	0x017d7840

08003c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c20:	b480      	push	{r7}
 8003c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c24:	4b03      	ldr	r3, [pc, #12]	; (8003c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c26:	681b      	ldr	r3, [r3, #0]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	20000000 	.word	0x20000000

08003c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003c3c:	f7ff fff0 	bl	8003c20 <HAL_RCC_GetHCLKFreq>
 8003c40:	4602      	mov	r2, r0
 8003c42:	4b05      	ldr	r3, [pc, #20]	; (8003c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	0a9b      	lsrs	r3, r3, #10
 8003c48:	f003 0307 	and.w	r3, r3, #7
 8003c4c:	4903      	ldr	r1, [pc, #12]	; (8003c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c4e:	5ccb      	ldrb	r3, [r1, r3]
 8003c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	bd80      	pop	{r7, pc}
 8003c58:	40023800 	.word	0x40023800
 8003c5c:	08003ce0 	.word	0x08003ce0

08003c60 <__libc_init_array>:
 8003c60:	b570      	push	{r4, r5, r6, lr}
 8003c62:	4d0d      	ldr	r5, [pc, #52]	; (8003c98 <__libc_init_array+0x38>)
 8003c64:	4c0d      	ldr	r4, [pc, #52]	; (8003c9c <__libc_init_array+0x3c>)
 8003c66:	1b64      	subs	r4, r4, r5
 8003c68:	10a4      	asrs	r4, r4, #2
 8003c6a:	2600      	movs	r6, #0
 8003c6c:	42a6      	cmp	r6, r4
 8003c6e:	d109      	bne.n	8003c84 <__libc_init_array+0x24>
 8003c70:	4d0b      	ldr	r5, [pc, #44]	; (8003ca0 <__libc_init_array+0x40>)
 8003c72:	4c0c      	ldr	r4, [pc, #48]	; (8003ca4 <__libc_init_array+0x44>)
 8003c74:	f000 f820 	bl	8003cb8 <_init>
 8003c78:	1b64      	subs	r4, r4, r5
 8003c7a:	10a4      	asrs	r4, r4, #2
 8003c7c:	2600      	movs	r6, #0
 8003c7e:	42a6      	cmp	r6, r4
 8003c80:	d105      	bne.n	8003c8e <__libc_init_array+0x2e>
 8003c82:	bd70      	pop	{r4, r5, r6, pc}
 8003c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c88:	4798      	blx	r3
 8003c8a:	3601      	adds	r6, #1
 8003c8c:	e7ee      	b.n	8003c6c <__libc_init_array+0xc>
 8003c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c92:	4798      	blx	r3
 8003c94:	3601      	adds	r6, #1
 8003c96:	e7f2      	b.n	8003c7e <__libc_init_array+0x1e>
 8003c98:	08003cf8 	.word	0x08003cf8
 8003c9c:	08003cf8 	.word	0x08003cf8
 8003ca0:	08003cf8 	.word	0x08003cf8
 8003ca4:	08003cfc 	.word	0x08003cfc

08003ca8 <memset>:
 8003ca8:	4402      	add	r2, r0
 8003caa:	4603      	mov	r3, r0
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d100      	bne.n	8003cb2 <memset+0xa>
 8003cb0:	4770      	bx	lr
 8003cb2:	f803 1b01 	strb.w	r1, [r3], #1
 8003cb6:	e7f9      	b.n	8003cac <memset+0x4>

08003cb8 <_init>:
 8003cb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cba:	bf00      	nop
 8003cbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cbe:	bc08      	pop	{r3}
 8003cc0:	469e      	mov	lr, r3
 8003cc2:	4770      	bx	lr

08003cc4 <_fini>:
 8003cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003cc6:	bf00      	nop
 8003cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003cca:	bc08      	pop	{r3}
 8003ccc:	469e      	mov	lr, r3
 8003cce:	4770      	bx	lr
