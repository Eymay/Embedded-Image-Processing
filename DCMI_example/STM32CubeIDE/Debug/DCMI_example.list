
DCMI_example.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007b48  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004b0  08007cd8  08007cd8  00017cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008188  08008188  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08008188  08008188  00018188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008190  08008190  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008190  08008190  00018190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008194  08008194  00018194  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08008198  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00003c70  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003ce0  20003ce0  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_line   0001193e  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   0000fb0f  00000000  00000000  000319de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000024cb  00000000  00000000  000414ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000c50  00000000  00000000  000439b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000c956b  00000000  00000000  00044608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000b88  00000000  00000000  0010db78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00022916  00000000  00000000  0010e700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00131016  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003af4  00000000  00000000  00131068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007cc0 	.word	0x08007cc0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08007cc0 	.word	0x08007cc0

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000584:	f8df d034 	ldr.w	sp, [pc, #52]	; 80005bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000588:	480d      	ldr	r0, [pc, #52]	; (80005c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800058a:	490e      	ldr	r1, [pc, #56]	; (80005c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800058c:	4a0e      	ldr	r2, [pc, #56]	; (80005c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800058e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000590:	e002      	b.n	8000598 <LoopCopyDataInit>

08000592 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000592:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000594:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000596:	3304      	adds	r3, #4

08000598 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000598:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800059a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800059c:	d3f9      	bcc.n	8000592 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800059e:	4a0b      	ldr	r2, [pc, #44]	; (80005cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80005a0:	4c0b      	ldr	r4, [pc, #44]	; (80005d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80005a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005a4:	e001      	b.n	80005aa <LoopFillZerobss>

080005a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005a8:	3204      	adds	r2, #4

080005aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005ac:	d3fb      	bcc.n	80005a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80005ae:	f000 fd87 	bl	80010c0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80005b2:	f006 f9ef 	bl	8006994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80005b6:	f000 f84b 	bl	8000650 <main>
  bx  lr    
 80005ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80005bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80005c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80005c4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80005c8:	08008198 	.word	0x08008198
  ldr r2, =_sbss
 80005cc:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80005d0:	20003ce0 	.word	0x20003ce0

080005d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80005d4:	e7fe      	b.n	80005d4 <ADC_IRQHandler>

080005d6 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80005d6:	b480      	push	{r7}
 80005d8:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80005da:	bf00      	nop
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <vprint>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void vprint(const char *fmt, va_list argp) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b0b4      	sub	sp, #208	; 0xd0
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	char string[200];
	if (0 < vsprintf(string, fmt, argp)) // build string
 80005ee:	f107 0308 	add.w	r3, r7, #8
 80005f2:	683a      	ldr	r2, [r7, #0]
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	4618      	mov	r0, r3
 80005f8:	f006 fb28 	bl	8006c4c <vsiprintf>
 80005fc:	4603      	mov	r3, r0
 80005fe:	2b00      	cmp	r3, #0
 8000600:	dd0d      	ble.n	800061e <vprint+0x3a>
			{
		HAL_UART_Transmit(&huart2, (uint8_t*) string, strlen(string), 0xffffff); // send message via UART
 8000602:	f107 0308 	add.w	r3, r7, #8
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fde2 	bl	80001d0 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	f107 0108 	add.w	r1, r7, #8
 8000614:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8000618:	4803      	ldr	r0, [pc, #12]	; (8000628 <vprint+0x44>)
 800061a:	f004 fea8 	bl	800536e <HAL_UART_Transmit>
	}
}
 800061e:	bf00      	nop
 8000620:	37d0      	adds	r7, #208	; 0xd0
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}
 8000626:	bf00      	nop
 8000628:	20000180 	.word	0x20000180

0800062c <my_printf>:

void my_printf(const char *fmt, ...) // custom printf() function
{
 800062c:	b40f      	push	{r0, r1, r2, r3}
 800062e:	b580      	push	{r7, lr}
 8000630:	b082      	sub	sp, #8
 8000632:	af00      	add	r7, sp, #0
	va_list argp;
	va_start(argp, fmt);
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	607b      	str	r3, [r7, #4]
	vprint(fmt, argp);
 800063a:	6879      	ldr	r1, [r7, #4]
 800063c:	6938      	ldr	r0, [r7, #16]
 800063e:	f7ff ffd1 	bl	80005e4 <vprint>
	va_end(argp);
}
 8000642:	bf00      	nop
 8000644:	3708      	adds	r7, #8
 8000646:	46bd      	mov	sp, r7
 8000648:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800064c:	b004      	add	sp, #16
 800064e:	4770      	bx	lr

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000654:	f000 fd46 	bl	80010e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000658:	f000 f860 	bl	800071c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 800065c:	f000 f8da 	bl	8000814 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000660:	f000 f9aa 	bl	80009b8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000664:	f000 f972 	bl	800094c <MX_DMA_Init>
  MX_DCMI_Init();
 8000668:	f000 f8f0 	bl	800084c <MX_DCMI_Init>
  MX_I2C1_Init();
 800066c:	f000 f916 	bl	800089c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8000670:	f000 f942 	bl	80008f8 <MX_USART2_UART_Init>
  MX_LIBJPEG_Init();
 8000674:	f7ff ffaf 	bl	80005d6 <MX_LIBJPEG_Init>
  /* USER CODE BEGIN 2 */
  OV7670_Init(&hi2c1, &hdcmi);
 8000678:	491f      	ldr	r1, [pc, #124]	; (80006f8 <main+0xa8>)
 800067a:	4820      	ldr	r0, [pc, #128]	; (80006fc <main+0xac>)
 800067c:	f005 ff94 	bl	80065a8 <OV7670_Init>
  	HAL_Delay(100);
 8000680:	2064      	movs	r0, #100	; 0x64
 8000682:	f000 fda1 	bl	80011c8 <HAL_Delay>
  	OV7670_ResolutionOptions(15534);
 8000686:	f643 40ae 	movw	r0, #15534	; 0x3cae
 800068a:	f005 ffc9 	bl	8006620 <OV7670_ResolutionOptions>
  	HAL_Delay(100);
 800068e:	2064      	movs	r0, #100	; 0x64
 8000690:	f000 fd9a 	bl	80011c8 <HAL_Delay>
  	//volatile uint32_t dma_buff[buff_size];
  	__HAL_DCMI_ENABLE_IT(&hdcmi, DCMI_IT_FRAME);
  	HAL_DCMI_Start_DMA(&hdcmi, DCMI_MODE_SNAPSHOT, (uint32_t)FRAME_BUFFER, frame_size);
	*/
#ifdef DEBUG
	my_printf("Finishing configuration \r\n");
 8000694:	481a      	ldr	r0, [pc, #104]	; (8000700 <main+0xb0>)
 8000696:	f7ff ffc9 	bl	800062c <my_printf>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)) {
 800069a:	2101      	movs	r1, #1
 800069c:	4819      	ldr	r0, [pc, #100]	; (8000704 <main+0xb4>)
 800069e:	f003 f8af 	bl	8003800 <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d022      	beq.n	80006ee <main+0x9e>
	  			if (mutex == 1) {
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <main+0xb8>)
 80006aa:	881b      	ldrh	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d1f4      	bne.n	800069a <main+0x4a>
	  				memset(frameBuffer, 0, sizeof frameBuffer);
 80006b0:	f643 2298 	movw	r2, #15000	; 0x3a98
 80006b4:	2100      	movs	r1, #0
 80006b6:	4815      	ldr	r0, [pc, #84]	; (800070c <main+0xbc>)
 80006b8:	f006 f9a1 	bl	80069fe <memset>
	  				OV7670_CaptureSnapshot((uint32_t) frameBuffer, 12672); // QCIF 176*144 /2 //OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2
 80006bc:	4b13      	ldr	r3, [pc, #76]	; (800070c <main+0xbc>)
 80006be:	f44f 5146 	mov.w	r1, #12672	; 0x3180
 80006c2:	4618      	mov	r0, r3
 80006c4:	f006 f8c4 	bl	8006850 <OV7670_CaptureSnapshot>
	  						break;
	  					}
	  					bufferPointer++;
	  				}*/
	  					#ifdef DEBUG
	  						my_printf("Image size: %d bytes \r\n",bufferPointer);
 80006c8:	4b11      	ldr	r3, [pc, #68]	; (8000710 <main+0xc0>)
 80006ca:	881b      	ldrh	r3, [r3, #0]
 80006cc:	4619      	mov	r1, r3
 80006ce:	4811      	ldr	r0, [pc, #68]	; (8000714 <main+0xc4>)
 80006d0:	f7ff ffac 	bl	800062c <my_printf>
	  					#endif

	  				HAL_UART_Transmit_DMA(&huart2, frameBuffer, 15000); //Use of DMA may be necessary for larger data streams.
 80006d4:	f643 2298 	movw	r2, #15000	; 0x3a98
 80006d8:	490c      	ldr	r1, [pc, #48]	; (800070c <main+0xbc>)
 80006da:	480f      	ldr	r0, [pc, #60]	; (8000718 <main+0xc8>)
 80006dc:	f004 feda 	bl	8005494 <HAL_UART_Transmit_DMA>
	  				bufferPointer = 0;
 80006e0:	4b0b      	ldr	r3, [pc, #44]	; (8000710 <main+0xc0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	801a      	strh	r2, [r3, #0]
	  				mutex = 0;
 80006e6:	4b08      	ldr	r3, [pc, #32]	; (8000708 <main+0xb8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	801a      	strh	r2, [r3, #0]
 80006ec:	e7d5      	b.n	800069a <main+0x4a>
	  			}
	  		} else {
	  			mutex = 1;
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <main+0xb8>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	801a      	strh	r2, [r3, #0]
	  if (HAL_GPIO_ReadPin(BTN_GPIO_Port, BTN_Pin)) {
 80006f4:	e7d1      	b.n	800069a <main+0x4a>
 80006f6:	bf00      	nop
 80006f8:	2000008c 	.word	0x2000008c
 80006fc:	2000012c 	.word	0x2000012c
 8000700:	08007cd8 	.word	0x08007cd8
 8000704:	40020000 	.word	0x40020000
 8000708:	20003cbc 	.word	0x20003cbc
 800070c:	20000224 	.word	0x20000224
 8000710:	20003cbe 	.word	0x20003cbe
 8000714:	08007cf4 	.word	0x08007cf4
 8000718:	20000180 	.word	0x20000180

0800071c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b094      	sub	sp, #80	; 0x50
 8000720:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000722:	f107 0320 	add.w	r3, r7, #32
 8000726:	2230      	movs	r2, #48	; 0x30
 8000728:	2100      	movs	r1, #0
 800072a:	4618      	mov	r0, r3
 800072c:	f006 f967 	bl	80069fe <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
 800073a:	609a      	str	r2, [r3, #8]
 800073c:	60da      	str	r2, [r3, #12]
 800073e:	611a      	str	r2, [r3, #16]

  /** Macro to configure the PLL multiplication factor
  */
  __HAL_RCC_PLL_PLLM_CONFIG(8);
 8000740:	4b32      	ldr	r3, [pc, #200]	; (800080c <SystemClock_Config+0xf0>)
 8000742:	685b      	ldr	r3, [r3, #4]
 8000744:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8000748:	4a30      	ldr	r2, [pc, #192]	; (800080c <SystemClock_Config+0xf0>)
 800074a:	f043 0308 	orr.w	r3, r3, #8
 800074e:	6053      	str	r3, [r2, #4]
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSI);
 8000750:	4b2e      	ldr	r3, [pc, #184]	; (800080c <SystemClock_Config+0xf0>)
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	4a2d      	ldr	r2, [pc, #180]	; (800080c <SystemClock_Config+0xf0>)
 8000756:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800075a:	6053      	str	r3, [r2, #4]
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800075c:	2300      	movs	r3, #0
 800075e:	60bb      	str	r3, [r7, #8]
 8000760:	4b2a      	ldr	r3, [pc, #168]	; (800080c <SystemClock_Config+0xf0>)
 8000762:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000764:	4a29      	ldr	r2, [pc, #164]	; (800080c <SystemClock_Config+0xf0>)
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	6413      	str	r3, [r2, #64]	; 0x40
 800076c:	4b27      	ldr	r3, [pc, #156]	; (800080c <SystemClock_Config+0xf0>)
 800076e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000770:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <SystemClock_Config+0xf4>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4a23      	ldr	r2, [pc, #140]	; (8000810 <SystemClock_Config+0xf4>)
 8000782:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000786:	6013      	str	r3, [r2, #0]
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <SystemClock_Config+0xf4>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000794:	2302      	movs	r3, #2
 8000796:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000798:	2301      	movs	r3, #1
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800079c:	2310      	movs	r3, #16
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007a4:	2300      	movs	r3, #0
 80007a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 ffef 	bl	8004790 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80007b8:	f000 f9a4 	bl	8000b04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007c0:	2300      	movs	r3, #0
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80007c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2100      	movs	r1, #0
 80007da:	4618      	mov	r0, r3
 80007dc:	f004 fa50 	bl	8004c80 <HAL_RCC_ClockConfig>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d001      	beq.n	80007ea <SystemClock_Config+0xce>
  {
    Error_Handler();
 80007e6:	f000 f98d 	bl	8000b04 <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 80007ea:	2200      	movs	r2, #0
 80007ec:	2100      	movs	r1, #0
 80007ee:	2000      	movs	r0, #0
 80007f0:	f004 fb2c 	bl	8004e4c <HAL_RCC_MCOConfig>
  HAL_RCC_MCOConfig(RCC_MCO2, RCC_MCO2SOURCE_PLLI2SCLK, RCC_MCODIV_5);
 80007f4:	f04f 62e0 	mov.w	r2, #117440512	; 0x7000000
 80007f8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80007fc:	2001      	movs	r0, #1
 80007fe:	f004 fb25 	bl	8004e4c <HAL_RCC_MCOConfig>
}
 8000802:	bf00      	nop
 8000804:	3750      	adds	r7, #80	; 0x50
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b084      	sub	sp, #16
 8000818:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800081a:	463b      	mov	r3, r7
 800081c:	2200      	movs	r2, #0
 800081e:	601a      	str	r2, [r3, #0]
 8000820:	605a      	str	r2, [r3, #4]
 8000822:	609a      	str	r2, [r3, #8]
 8000824:	60da      	str	r2, [r3, #12]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_PLLI2S;
 8000826:	2304      	movs	r3, #4
 8000828:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800082a:	23c0      	movs	r3, #192	; 0xc0
 800082c:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000832:	463b      	mov	r3, r7
 8000834:	4618      	mov	r0, r3
 8000836:	f004 fc6b 	bl	8005110 <HAL_RCCEx_PeriphCLKConfig>
 800083a:	4603      	mov	r3, r0
 800083c:	2b00      	cmp	r3, #0
 800083e:	d001      	beq.n	8000844 <PeriphCommonClock_Config+0x30>
  {
    Error_Handler();
 8000840:	f000 f960 	bl	8000b04 <Error_Handler>
  }
}
 8000844:	bf00      	nop
 8000846:	3710      	adds	r7, #16
 8000848:	46bd      	mov	sp, r7
 800084a:	bd80      	pop	{r7, pc}

0800084c <MX_DCMI_Init>:
  * @brief DCMI Initialization Function
  * @param None
  * @retval None
  */
static void MX_DCMI_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
  /* USER CODE END DCMI_Init 0 */

  /* USER CODE BEGIN DCMI_Init 1 */

  /* USER CODE END DCMI_Init 1 */
  hdcmi.Instance = DCMI;
 8000850:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_DCMI_Init+0x48>)
 8000852:	4a11      	ldr	r2, [pc, #68]	; (8000898 <MX_DCMI_Init+0x4c>)
 8000854:	601a      	str	r2, [r3, #0]
  hdcmi.Init.SynchroMode = DCMI_SYNCHRO_HARDWARE;
 8000856:	4b0f      	ldr	r3, [pc, #60]	; (8000894 <MX_DCMI_Init+0x48>)
 8000858:	2200      	movs	r2, #0
 800085a:	605a      	str	r2, [r3, #4]
  hdcmi.Init.PCKPolarity = DCMI_PCKPOLARITY_RISING;
 800085c:	4b0d      	ldr	r3, [pc, #52]	; (8000894 <MX_DCMI_Init+0x48>)
 800085e:	2220      	movs	r2, #32
 8000860:	609a      	str	r2, [r3, #8]
  hdcmi.Init.VSPolarity = DCMI_VSPOLARITY_HIGH;
 8000862:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_DCMI_Init+0x48>)
 8000864:	2280      	movs	r2, #128	; 0x80
 8000866:	60da      	str	r2, [r3, #12]
  hdcmi.Init.HSPolarity = DCMI_HSPOLARITY_LOW;
 8000868:	4b0a      	ldr	r3, [pc, #40]	; (8000894 <MX_DCMI_Init+0x48>)
 800086a:	2200      	movs	r2, #0
 800086c:	611a      	str	r2, [r3, #16]
  hdcmi.Init.CaptureRate = DCMI_CR_ALL_FRAME;
 800086e:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_DCMI_Init+0x48>)
 8000870:	2200      	movs	r2, #0
 8000872:	615a      	str	r2, [r3, #20]
  hdcmi.Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 8000874:	4b07      	ldr	r3, [pc, #28]	; (8000894 <MX_DCMI_Init+0x48>)
 8000876:	2200      	movs	r2, #0
 8000878:	619a      	str	r2, [r3, #24]
  hdcmi.Init.JPEGMode = DCMI_JPEG_DISABLE;
 800087a:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_DCMI_Init+0x48>)
 800087c:	2200      	movs	r2, #0
 800087e:	621a      	str	r2, [r3, #32]
  if (HAL_DCMI_Init(&hdcmi) != HAL_OK)
 8000880:	4804      	ldr	r0, [pc, #16]	; (8000894 <MX_DCMI_Init+0x48>)
 8000882:	f001 f829 	bl	80018d8 <HAL_DCMI_Init>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_DCMI_Init+0x44>
  {
    Error_Handler();
 800088c:	f000 f93a 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN DCMI_Init 2 */

  /* USER CODE END DCMI_Init 2 */

}
 8000890:	bf00      	nop
 8000892:	bd80      	pop	{r7, pc}
 8000894:	2000008c 	.word	0x2000008c
 8000898:	50050000 	.word	0x50050000

0800089c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <MX_I2C1_Init+0x50>)
 80008a2:	4a13      	ldr	r2, [pc, #76]	; (80008f0 <MX_I2C1_Init+0x54>)
 80008a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80008a6:	4b11      	ldr	r3, [pc, #68]	; (80008ec <MX_I2C1_Init+0x50>)
 80008a8:	4a12      	ldr	r2, [pc, #72]	; (80008f4 <MX_I2C1_Init+0x58>)
 80008aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80008ac:	4b0f      	ldr	r3, [pc, #60]	; (80008ec <MX_I2C1_Init+0x50>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80008b2:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <MX_I2C1_Init+0x50>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008b8:	4b0c      	ldr	r3, [pc, #48]	; (80008ec <MX_I2C1_Init+0x50>)
 80008ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80008be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008c0:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <MX_I2C1_Init+0x50>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80008c6:	4b09      	ldr	r3, [pc, #36]	; (80008ec <MX_I2C1_Init+0x50>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008cc:	4b07      	ldr	r3, [pc, #28]	; (80008ec <MX_I2C1_Init+0x50>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008d2:	4b06      	ldr	r3, [pc, #24]	; (80008ec <MX_I2C1_Init+0x50>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008d8:	4804      	ldr	r0, [pc, #16]	; (80008ec <MX_I2C1_Init+0x50>)
 80008da:	f002 ffc3 	bl	8003864 <HAL_I2C_Init>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d001      	beq.n	80008e8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80008e4:	f000 f90e 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008e8:	bf00      	nop
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	2000012c 	.word	0x2000012c
 80008f0:	40005400 	.word	0x40005400
 80008f4:	000186a0 	.word	0x000186a0

080008f8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008fc:	4b11      	ldr	r3, [pc, #68]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 80008fe:	4a12      	ldr	r2, [pc, #72]	; (8000948 <MX_USART2_UART_Init+0x50>)
 8000900:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000902:	4b10      	ldr	r3, [pc, #64]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000904:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000908:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800090a:	4b0e      	ldr	r3, [pc, #56]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000912:	2200      	movs	r2, #0
 8000914:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000916:	4b0b      	ldr	r3, [pc, #44]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800091c:	4b09      	ldr	r3, [pc, #36]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 800091e:	220c      	movs	r2, #12
 8000920:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000922:	4b08      	ldr	r3, [pc, #32]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000924:	2200      	movs	r2, #0
 8000926:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 800092a:	2200      	movs	r2, #0
 800092c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800092e:	4805      	ldr	r0, [pc, #20]	; (8000944 <MX_USART2_UART_Init+0x4c>)
 8000930:	f004 fcd0 	bl	80052d4 <HAL_UART_Init>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800093a:	f000 f8e3 	bl	8000b04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800093e:	bf00      	nop
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	20000180 	.word	0x20000180
 8000948:	40004400 	.word	0x40004400

0800094c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	607b      	str	r3, [r7, #4]
 8000956:	4b17      	ldr	r3, [pc, #92]	; (80009b4 <MX_DMA_Init+0x68>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a16      	ldr	r2, [pc, #88]	; (80009b4 <MX_DMA_Init+0x68>)
 800095c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b14      	ldr	r3, [pc, #80]	; (80009b4 <MX_DMA_Init+0x68>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800096a:	607b      	str	r3, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	4b10      	ldr	r3, [pc, #64]	; (80009b4 <MX_DMA_Init+0x68>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000976:	4a0f      	ldr	r2, [pc, #60]	; (80009b4 <MX_DMA_Init+0x68>)
 8000978:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800097c:	6313      	str	r3, [r2, #48]	; 0x30
 800097e:	4b0d      	ldr	r3, [pc, #52]	; (80009b4 <MX_DMA_Init+0x68>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	2011      	movs	r0, #17
 8000990:	f000 fd19 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000994:	2011      	movs	r0, #17
 8000996:	f000 fd32 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 800099a:	2200      	movs	r2, #0
 800099c:	2100      	movs	r1, #0
 800099e:	2039      	movs	r0, #57	; 0x39
 80009a0:	f000 fd11 	bl	80013c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80009a4:	2039      	movs	r0, #57	; 0x39
 80009a6:	f000 fd2a 	bl	80013fe <HAL_NVIC_EnableIRQ>

}
 80009aa:	bf00      	nop
 80009ac:	3708      	adds	r7, #8
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800

080009b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b08a      	sub	sp, #40	; 0x28
 80009bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	2200      	movs	r2, #0
 80009c4:	601a      	str	r2, [r3, #0]
 80009c6:	605a      	str	r2, [r3, #4]
 80009c8:	609a      	str	r2, [r3, #8]
 80009ca:	60da      	str	r2, [r3, #12]
 80009cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	613b      	str	r3, [r7, #16]
 80009d2:	4b48      	ldr	r3, [pc, #288]	; (8000af4 <MX_GPIO_Init+0x13c>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a47      	ldr	r2, [pc, #284]	; (8000af4 <MX_GPIO_Init+0x13c>)
 80009d8:	f043 0310 	orr.w	r3, r3, #16
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b45      	ldr	r3, [pc, #276]	; (8000af4 <MX_GPIO_Init+0x13c>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0310 	and.w	r3, r3, #16
 80009e6:	613b      	str	r3, [r7, #16]
 80009e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	60fb      	str	r3, [r7, #12]
 80009ee:	4b41      	ldr	r3, [pc, #260]	; (8000af4 <MX_GPIO_Init+0x13c>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a40      	ldr	r2, [pc, #256]	; (8000af4 <MX_GPIO_Init+0x13c>)
 80009f4:	f043 0301 	orr.w	r3, r3, #1
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b3e      	ldr	r3, [pc, #248]	; (8000af4 <MX_GPIO_Init+0x13c>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0301 	and.w	r3, r3, #1
 8000a02:	60fb      	str	r3, [r7, #12]
 8000a04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	4b3a      	ldr	r3, [pc, #232]	; (8000af4 <MX_GPIO_Init+0x13c>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a39      	ldr	r2, [pc, #228]	; (8000af4 <MX_GPIO_Init+0x13c>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b37      	ldr	r3, [pc, #220]	; (8000af4 <MX_GPIO_Init+0x13c>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	60bb      	str	r3, [r7, #8]
 8000a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	4b33      	ldr	r3, [pc, #204]	; (8000af4 <MX_GPIO_Init+0x13c>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a32      	ldr	r2, [pc, #200]	; (8000af4 <MX_GPIO_Init+0x13c>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b30      	ldr	r3, [pc, #192]	; (8000af4 <MX_GPIO_Init+0x13c>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	607b      	str	r3, [r7, #4]
 8000a3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2180      	movs	r1, #128	; 0x80
 8000a42:	482d      	ldr	r0, [pc, #180]	; (8000af8 <MX_GPIO_Init+0x140>)
 8000a44:	f002 fef4 	bl	8003830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CAMERA_PWDN_GPIO_Port, CAMERA_PWDN_Pin, GPIO_PIN_RESET);
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a4e:	482a      	ldr	r0, [pc, #168]	; (8000af8 <MX_GPIO_Init+0x140>)
 8000a50:	f002 feee 	bl	8003830 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BTN_Pin */
  GPIO_InitStruct.Pin = BTN_Pin;
 8000a54:	2301      	movs	r3, #1
 8000a56:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a58:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a5c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN_GPIO_Port, &GPIO_InitStruct);
 8000a62:	f107 0314 	add.w	r3, r7, #20
 8000a66:	4619      	mov	r1, r3
 8000a68:	4824      	ldr	r0, [pc, #144]	; (8000afc <MX_GPIO_Init+0x144>)
 8000a6a:	f002 fd2d 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_RESET_Pin */
  GPIO_InitStruct.Pin = CAMERA_RESET_Pin;
 8000a6e:	2380      	movs	r3, #128	; 0x80
 8000a70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a72:	2301      	movs	r3, #1
 8000a74:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAMERA_RESET_GPIO_Port, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	481c      	ldr	r0, [pc, #112]	; (8000af8 <MX_GPIO_Init+0x140>)
 8000a86:	f002 fd1f 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : CAMERA_PWDN_Pin */
  GPIO_InitStruct.Pin = CAMERA_PWDN_Pin;
 8000a8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a90:	2301      	movs	r3, #1
 8000a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a98:	2300      	movs	r3, #0
 8000a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(CAMERA_PWDN_GPIO_Port, &GPIO_InitStruct);
 8000a9c:	f107 0314 	add.w	r3, r7, #20
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4815      	ldr	r0, [pc, #84]	; (8000af8 <MX_GPIO_Init+0x140>)
 8000aa4:	f002 fd10 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DCMI_XCLK_Pin */
  GPIO_InitStruct.Pin = DCMI_XCLK_Pin;
 8000aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aae:	2302      	movs	r3, #2
 8000ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab6:	2303      	movs	r3, #3
 8000ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000aba:	2300      	movs	r3, #0
 8000abc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DCMI_XCLK_GPIO_Port, &GPIO_InitStruct);
 8000abe:	f107 0314 	add.w	r3, r7, #20
 8000ac2:	4619      	mov	r1, r3
 8000ac4:	480e      	ldr	r0, [pc, #56]	; (8000b00 <MX_GPIO_Init+0x148>)
 8000ac6:	f002 fcff 	bl	80034c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000aca:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad0:	2302      	movs	r3, #2
 8000ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ad8:	2303      	movs	r3, #3
 8000ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_GPIO_Init+0x144>)
 8000ae8:	f002 fcee 	bl	80034c8 <HAL_GPIO_Init>

}
 8000aec:	bf00      	nop
 8000aee:	3728      	adds	r7, #40	; 0x28
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40021000 	.word	0x40021000
 8000afc:	40020000 	.word	0x40020000
 8000b00:	40020800 	.word	0x40020800

08000b04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b08:	b672      	cpsid	i
}
 8000b0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b0c:	e7fe      	b.n	8000b0c <Error_Handler+0x8>
	...

08000b10 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	607b      	str	r3, [r7, #4]
 8000b1a:	4b10      	ldr	r3, [pc, #64]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b1e:	4a0f      	ldr	r2, [pc, #60]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b24:	6453      	str	r3, [r2, #68]	; 0x44
 8000b26:	4b0d      	ldr	r3, [pc, #52]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b32:	2300      	movs	r3, #0
 8000b34:	603b      	str	r3, [r7, #0]
 8000b36:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3a:	4a08      	ldr	r2, [pc, #32]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b40:	6413      	str	r3, [r2, #64]	; 0x40
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_MspInit+0x4c>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4a:	603b      	str	r3, [r7, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b4e:	bf00      	nop
 8000b50:	370c      	adds	r7, #12
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	40023800 	.word	0x40023800

08000b60 <HAL_DCMI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdcmi: DCMI handle pointer
* @retval None
*/
void HAL_DCMI_MspInit(DCMI_HandleTypeDef* hdcmi)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 031c 	add.w	r3, r7, #28
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(hdcmi->Instance==DCMI)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a63      	ldr	r2, [pc, #396]	; (8000d0c <HAL_DCMI_MspInit+0x1ac>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	f040 80c0 	bne.w	8000d04 <HAL_DCMI_MspInit+0x1a4>
  {
  /* USER CODE BEGIN DCMI_MspInit 0 */

  /* USER CODE END DCMI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DCMI_CLK_ENABLE();
 8000b84:	2300      	movs	r3, #0
 8000b86:	61bb      	str	r3, [r7, #24]
 8000b88:	4b61      	ldr	r3, [pc, #388]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8c:	4a60      	ldr	r2, [pc, #384]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000b8e:	f043 0301 	orr.w	r3, r3, #1
 8000b92:	6353      	str	r3, [r2, #52]	; 0x34
 8000b94:	4b5e      	ldr	r3, [pc, #376]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b98:	f003 0301 	and.w	r3, r3, #1
 8000b9c:	61bb      	str	r3, [r7, #24]
 8000b9e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8000ba0:	2300      	movs	r3, #0
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	4b5a      	ldr	r3, [pc, #360]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	4a59      	ldr	r2, [pc, #356]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000baa:	f043 0310 	orr.w	r3, r3, #16
 8000bae:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb0:	4b57      	ldr	r3, [pc, #348]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb4:	f003 0310 	and.w	r3, r3, #16
 8000bb8:	617b      	str	r3, [r7, #20]
 8000bba:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	613b      	str	r3, [r7, #16]
 8000bc0:	4b53      	ldr	r3, [pc, #332]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc4:	4a52      	ldr	r2, [pc, #328]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000bc6:	f043 0301 	orr.w	r3, r3, #1
 8000bca:	6313      	str	r3, [r2, #48]	; 0x30
 8000bcc:	4b50      	ldr	r3, [pc, #320]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	f003 0301 	and.w	r3, r3, #1
 8000bd4:	613b      	str	r3, [r7, #16]
 8000bd6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4b4c      	ldr	r3, [pc, #304]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	4a4b      	ldr	r2, [pc, #300]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000be2:	f043 0304 	orr.w	r3, r3, #4
 8000be6:	6313      	str	r3, [r2, #48]	; 0x30
 8000be8:	4b49      	ldr	r3, [pc, #292]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000bea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	60bb      	str	r3, [r7, #8]
 8000bf8:	4b45      	ldr	r3, [pc, #276]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfc:	4a44      	ldr	r2, [pc, #272]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000bfe:	f043 0302 	orr.w	r3, r3, #2
 8000c02:	6313      	str	r3, [r2, #48]	; 0x30
 8000c04:	4b42      	ldr	r3, [pc, #264]	; (8000d10 <HAL_DCMI_MspInit+0x1b0>)
 8000c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c08:	f003 0302 	and.w	r3, r3, #2
 8000c0c:	60bb      	str	r3, [r7, #8]
 8000c0e:	68bb      	ldr	r3, [r7, #8]
    PC8     ------> DCMI_D2
    PB6     ------> DCMI_D5
    PB7     ------> DCMI_VSYNC
    PE1     ------> DCMI_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_1;
 8000c10:	2372      	movs	r3, #114	; 0x72
 8000c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c14:	2302      	movs	r3, #2
 8000c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c1c:	2303      	movs	r3, #3
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c20:	230d      	movs	r3, #13
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c24:	f107 031c 	add.w	r3, r7, #28
 8000c28:	4619      	mov	r1, r3
 8000c2a:	483a      	ldr	r0, [pc, #232]	; (8000d14 <HAL_DCMI_MspInit+0x1b4>)
 8000c2c:	f002 fc4c 	bl	80034c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000c30:	2350      	movs	r3, #80	; 0x50
 8000c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c34:	2302      	movs	r3, #2
 8000c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c38:	2302      	movs	r3, #2
 8000c3a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c3c:	2303      	movs	r3, #3
 8000c3e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c40:	230d      	movs	r3, #13
 8000c42:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c44:	f107 031c 	add.w	r3, r7, #28
 8000c48:	4619      	mov	r1, r3
 8000c4a:	4833      	ldr	r0, [pc, #204]	; (8000d18 <HAL_DCMI_MspInit+0x1b8>)
 8000c4c:	f002 fc3c 	bl	80034c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
 8000c50:	f44f 73e0 	mov.w	r3, #448	; 0x1c0
 8000c54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c56:	2302      	movs	r3, #2
 8000c58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c5e:	2303      	movs	r3, #3
 8000c60:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c62:	230d      	movs	r3, #13
 8000c64:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	482b      	ldr	r0, [pc, #172]	; (8000d1c <HAL_DCMI_MspInit+0x1bc>)
 8000c6e:	f002 fc2b 	bl	80034c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c72:	23c0      	movs	r3, #192	; 0xc0
 8000c74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c76:	2302      	movs	r3, #2
 8000c78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c7a:	2302      	movs	r3, #2
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c7e:	2303      	movs	r3, #3
 8000c80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF13_DCMI;
 8000c82:	230d      	movs	r3, #13
 8000c84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c86:	f107 031c 	add.w	r3, r7, #28
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4824      	ldr	r0, [pc, #144]	; (8000d20 <HAL_DCMI_MspInit+0x1c0>)
 8000c8e:	f002 fc1b 	bl	80034c8 <HAL_GPIO_Init>

    /* DCMI DMA Init */
    /* DCMI Init */
    hdma_dcmi.Instance = DMA2_Stream1;
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <HAL_DCMI_MspInit+0x1c4>)
 8000c94:	4a24      	ldr	r2, [pc, #144]	; (8000d28 <HAL_DCMI_MspInit+0x1c8>)
 8000c96:	601a      	str	r2, [r3, #0]
    hdma_dcmi.Init.Channel = DMA_CHANNEL_1;
 8000c98:	4b22      	ldr	r3, [pc, #136]	; (8000d24 <HAL_DCMI_MspInit+0x1c4>)
 8000c9a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000c9e:	605a      	str	r2, [r3, #4]
    hdma_dcmi.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000ca0:	4b20      	ldr	r3, [pc, #128]	; (8000d24 <HAL_DCMI_MspInit+0x1c4>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	609a      	str	r2, [r3, #8]
    hdma_dcmi.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ca6:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <HAL_DCMI_MspInit+0x1c4>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	60da      	str	r2, [r3, #12]
    hdma_dcmi.Init.MemInc = DMA_MINC_ENABLE;
 8000cac:	4b1d      	ldr	r3, [pc, #116]	; (8000d24 <HAL_DCMI_MspInit+0x1c4>)
 8000cae:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cb2:	611a      	str	r2, [r3, #16]
    hdma_dcmi.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000cb4:	4b1b      	ldr	r3, [pc, #108]	; (8000d24 <HAL_DCMI_MspInit+0x1c4>)
 8000cb6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000cba:	615a      	str	r2, [r3, #20]
    hdma_dcmi.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000cbc:	4b19      	ldr	r3, [pc, #100]	; (8000d24 <HAL_DCMI_MspInit+0x1c4>)
 8000cbe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cc2:	619a      	str	r2, [r3, #24]
    hdma_dcmi.Init.Mode = DMA_NORMAL;
 8000cc4:	4b17      	ldr	r3, [pc, #92]	; (8000d24 <HAL_DCMI_MspInit+0x1c4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
    hdma_dcmi.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000cca:	4b16      	ldr	r3, [pc, #88]	; (8000d24 <HAL_DCMI_MspInit+0x1c4>)
 8000ccc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000cd0:	621a      	str	r2, [r3, #32]
    hdma_dcmi.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000cd2:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <HAL_DCMI_MspInit+0x1c4>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dcmi) != HAL_OK)
 8000cd8:	4812      	ldr	r0, [pc, #72]	; (8000d24 <HAL_DCMI_MspInit+0x1c4>)
 8000cda:	f000 fe6b 	bl	80019b4 <HAL_DMA_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <HAL_DCMI_MspInit+0x188>
    {
      Error_Handler();
 8000ce4:	f7ff ff0e 	bl	8000b04 <Error_Handler>
    }

    __HAL_LINKDMA(hdcmi,DMA_Handle,hdma_dcmi);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_DCMI_MspInit+0x1c4>)
 8000cec:	639a      	str	r2, [r3, #56]	; 0x38
 8000cee:	4a0d      	ldr	r2, [pc, #52]	; (8000d24 <HAL_DCMI_MspInit+0x1c4>)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	6393      	str	r3, [r2, #56]	; 0x38

    /* DCMI interrupt Init */
    HAL_NVIC_SetPriority(DCMI_IRQn, 0, 0);
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	2100      	movs	r1, #0
 8000cf8:	204e      	movs	r0, #78	; 0x4e
 8000cfa:	f000 fb64 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DCMI_IRQn);
 8000cfe:	204e      	movs	r0, #78	; 0x4e
 8000d00:	f000 fb7d 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DCMI_MspInit 1 */

  /* USER CODE END DCMI_MspInit 1 */
  }

}
 8000d04:	bf00      	nop
 8000d06:	3730      	adds	r7, #48	; 0x30
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	50050000 	.word	0x50050000
 8000d10:	40023800 	.word	0x40023800
 8000d14:	40021000 	.word	0x40021000
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40020800 	.word	0x40020800
 8000d20:	40020400 	.word	0x40020400
 8000d24:	200000cc 	.word	0x200000cc
 8000d28:	40026428 	.word	0x40026428

08000d2c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d34:	f107 0314 	add.w	r3, r7, #20
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
 8000d3e:	609a      	str	r2, [r3, #8]
 8000d40:	60da      	str	r2, [r3, #12]
 8000d42:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a19      	ldr	r2, [pc, #100]	; (8000db0 <HAL_I2C_MspInit+0x84>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d12c      	bne.n	8000da8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b18      	ldr	r3, [pc, #96]	; (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d56:	4a17      	ldr	r2, [pc, #92]	; (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d58:	f043 0302 	orr.w	r3, r3, #2
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d5e:	4b15      	ldr	r3, [pc, #84]	; (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000d6a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d6e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d70:	2312      	movs	r3, #18
 8000d72:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d74:	2301      	movs	r3, #1
 8000d76:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d78:	2303      	movs	r3, #3
 8000d7a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d7c:	2304      	movs	r3, #4
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d80:	f107 0314 	add.w	r3, r7, #20
 8000d84:	4619      	mov	r1, r3
 8000d86:	480c      	ldr	r0, [pc, #48]	; (8000db8 <HAL_I2C_MspInit+0x8c>)
 8000d88:	f002 fb9e 	bl	80034c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	60fb      	str	r3, [r7, #12]
 8000d90:	4b08      	ldr	r3, [pc, #32]	; (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d94:	4a07      	ldr	r2, [pc, #28]	; (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d96:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000d9c:	4b05      	ldr	r3, [pc, #20]	; (8000db4 <HAL_I2C_MspInit+0x88>)
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	; 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40005400 	.word	0x40005400
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020400 	.word	0x40020400

08000dbc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a39      	ldr	r2, [pc, #228]	; (8000ec0 <HAL_UART_MspInit+0x104>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d16b      	bne.n	8000eb6 <HAL_UART_MspInit+0xfa>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	4b38      	ldr	r3, [pc, #224]	; (8000ec4 <HAL_UART_MspInit+0x108>)
 8000de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de6:	4a37      	ldr	r2, [pc, #220]	; (8000ec4 <HAL_UART_MspInit+0x108>)
 8000de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dec:	6413      	str	r3, [r2, #64]	; 0x40
 8000dee:	4b35      	ldr	r3, [pc, #212]	; (8000ec4 <HAL_UART_MspInit+0x108>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000df6:	613b      	str	r3, [r7, #16]
 8000df8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <HAL_UART_MspInit+0x108>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	4a30      	ldr	r2, [pc, #192]	; (8000ec4 <HAL_UART_MspInit+0x108>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	; 0x30
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <HAL_UART_MspInit+0x108>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	60fb      	str	r3, [r7, #12]
 8000e14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e16:	230c      	movs	r3, #12
 8000e18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e22:	2303      	movs	r3, #3
 8000e24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e26:	2307      	movs	r3, #7
 8000e28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e2a:	f107 0314 	add.w	r3, r7, #20
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4825      	ldr	r0, [pc, #148]	; (8000ec8 <HAL_UART_MspInit+0x10c>)
 8000e32:	f002 fb49 	bl	80034c8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000e36:	4b25      	ldr	r3, [pc, #148]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e38:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <HAL_UART_MspInit+0x114>)
 8000e3a:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000e3c:	4b23      	ldr	r3, [pc, #140]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e3e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e42:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000e44:	4b21      	ldr	r3, [pc, #132]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e46:	2240      	movs	r2, #64	; 0x40
 8000e48:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e4a:	4b20      	ldr	r3, [pc, #128]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e56:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e58:	4b1c      	ldr	r3, [pc, #112]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e5e:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000e64:	4b19      	ldr	r3, [pc, #100]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8000e6a:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e6c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e70:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000e72:	4b16      	ldr	r3, [pc, #88]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e74:	2204      	movs	r2, #4
 8000e76:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_usart2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000e78:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_usart2_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_usart2_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8000e84:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000e8a:	4810      	ldr	r0, [pc, #64]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e8c:	f000 fd92 	bl	80019b4 <HAL_DMA_Init>
 8000e90:	4603      	mov	r3, r0
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d001      	beq.n	8000e9a <HAL_UART_MspInit+0xde>
    {
      Error_Handler();
 8000e96:	f7ff fe35 	bl	8000b04 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	4a0b      	ldr	r2, [pc, #44]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000e9e:	635a      	str	r2, [r3, #52]	; 0x34
 8000ea0:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <HAL_UART_MspInit+0x110>)
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	2100      	movs	r1, #0
 8000eaa:	2026      	movs	r0, #38	; 0x26
 8000eac:	f000 fa8b 	bl	80013c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000eb0:	2026      	movs	r0, #38	; 0x26
 8000eb2:	f000 faa4 	bl	80013fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40004400 	.word	0x40004400
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	200001c4 	.word	0x200001c4
 8000ed0:	400260a0 	.word	0x400260a0

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f000 f932 	bl	8001188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <DMA1_Stream6_IRQHandler+0x10>)
 8000f2e:	f000 fed9 	bl	8001ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200001c4 	.word	0x200001c4

08000f3c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <USART2_IRQHandler+0x10>)
 8000f42:	f004 fb25 	bl	8005590 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000180 	.word	0x20000180

08000f50 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dcmi);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <DMA2_Stream1_IRQHandler+0x10>)
 8000f56:	f000 fec5 	bl	8001ce4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	200000cc 	.word	0x200000cc

08000f64 <DCMI_IRQHandler>:

/**
  * @brief This function handles DCMI global interrupt.
  */
void DCMI_IRQHandler(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DCMI_IRQn 0 */

  /* USER CODE END DCMI_IRQn 0 */
  HAL_DCMI_IRQHandler(&hdcmi);
 8000f68:	4802      	ldr	r0, [pc, #8]	; (8000f74 <DCMI_IRQHandler+0x10>)
 8000f6a:	f000 fb5f 	bl	800162c <HAL_DCMI_IRQHandler>
  /* USER CODE BEGIN DCMI_IRQn 1 */

  /* USER CODE END DCMI_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	2000008c 	.word	0x2000008c

08000f78 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	b086      	sub	sp, #24
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f84:	2300      	movs	r3, #0
 8000f86:	617b      	str	r3, [r7, #20]
 8000f88:	e00a      	b.n	8000fa0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f8a:	f3af 8000 	nop.w
 8000f8e:	4601      	mov	r1, r0
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	1c5a      	adds	r2, r3, #1
 8000f94:	60ba      	str	r2, [r7, #8]
 8000f96:	b2ca      	uxtb	r2, r1
 8000f98:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9a:	697b      	ldr	r3, [r7, #20]
 8000f9c:	3301      	adds	r3, #1
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	697a      	ldr	r2, [r7, #20]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	429a      	cmp	r2, r3
 8000fa6:	dbf0      	blt.n	8000f8a <_read+0x12>
	}

return len;
 8000fa8:	687b      	ldr	r3, [r7, #4]
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b086      	sub	sp, #24
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	60f8      	str	r0, [r7, #12]
 8000fba:	60b9      	str	r1, [r7, #8]
 8000fbc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
 8000fc2:	e009      	b.n	8000fd8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	781b      	ldrb	r3, [r3, #0]
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	3301      	adds	r3, #1
 8000fd6:	617b      	str	r3, [r7, #20]
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	429a      	cmp	r2, r3
 8000fde:	dbf1      	blt.n	8000fc4 <_write+0x12>
	}
	return len;
 8000fe0:	687b      	ldr	r3, [r7, #4]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3718      	adds	r7, #24
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}

08000fea <_close>:

int _close(int file)
{
 8000fea:	b480      	push	{r7}
 8000fec:	b083      	sub	sp, #12
 8000fee:	af00      	add	r7, sp, #0
 8000ff0:	6078      	str	r0, [r7, #4]
	return -1;
 8000ff2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001002:	b480      	push	{r7}
 8001004:	b083      	sub	sp, #12
 8001006:	af00      	add	r7, sp, #0
 8001008:	6078      	str	r0, [r7, #4]
 800100a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001012:	605a      	str	r2, [r3, #4]
	return 0;
 8001014:	2300      	movs	r3, #0
}
 8001016:	4618      	mov	r0, r3
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <_isatty>:

int _isatty(int file)
{
 8001022:	b480      	push	{r7}
 8001024:	b083      	sub	sp, #12
 8001026:	af00      	add	r7, sp, #0
 8001028:	6078      	str	r0, [r7, #4]
	return 1;
 800102a:	2301      	movs	r3, #1
}
 800102c:	4618      	mov	r0, r3
 800102e:	370c      	adds	r7, #12
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
	return 0;
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3714      	adds	r7, #20
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
	...

08001054 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800105c:	4a14      	ldr	r2, [pc, #80]	; (80010b0 <_sbrk+0x5c>)
 800105e:	4b15      	ldr	r3, [pc, #84]	; (80010b4 <_sbrk+0x60>)
 8001060:	1ad3      	subs	r3, r2, r3
 8001062:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <_sbrk+0x64>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d102      	bne.n	8001076 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001070:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <_sbrk+0x64>)
 8001072:	4a12      	ldr	r2, [pc, #72]	; (80010bc <_sbrk+0x68>)
 8001074:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001076:	4b10      	ldr	r3, [pc, #64]	; (80010b8 <_sbrk+0x64>)
 8001078:	681a      	ldr	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4413      	add	r3, r2
 800107e:	693a      	ldr	r2, [r7, #16]
 8001080:	429a      	cmp	r2, r3
 8001082:	d207      	bcs.n	8001094 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001084:	f005 fc80 	bl	8006988 <__errno>
 8001088:	4603      	mov	r3, r0
 800108a:	220c      	movs	r2, #12
 800108c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	e009      	b.n	80010a8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001094:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <_sbrk+0x64>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800109a:	4b07      	ldr	r3, [pc, #28]	; (80010b8 <_sbrk+0x64>)
 800109c:	681a      	ldr	r2, [r3, #0]
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	4a05      	ldr	r2, [pc, #20]	; (80010b8 <_sbrk+0x64>)
 80010a4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a6:	68fb      	ldr	r3, [r7, #12]
}
 80010a8:	4618      	mov	r0, r3
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bd80      	pop	{r7, pc}
 80010b0:	20020000 	.word	0x20020000
 80010b4:	00000400 	.word	0x00000400
 80010b8:	20003cc0 	.word	0x20003cc0
 80010bc:	20003ce0 	.word	0x20003ce0

080010c0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <SystemInit+0x20>)
 80010c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <SystemInit+0x20>)
 80010cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010d0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010d4:	bf00      	nop
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80010e8:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <HAL_Init+0x40>)
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	4a0d      	ldr	r2, [pc, #52]	; (8001124 <HAL_Init+0x40>)
 80010ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80010f4:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_Init+0x40>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_Init+0x40>)
 80010fa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80010fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a07      	ldr	r2, [pc, #28]	; (8001124 <HAL_Init+0x40>)
 8001106:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800110a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800110c:	2003      	movs	r0, #3
 800110e:	f000 f94f 	bl	80013b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001112:	200f      	movs	r0, #15
 8001114:	f000 f808 	bl	8001128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001118:	f7ff fcfa 	bl	8000b10 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023c00 	.word	0x40023c00

08001128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001130:	4b12      	ldr	r3, [pc, #72]	; (800117c <HAL_InitTick+0x54>)
 8001132:	681a      	ldr	r2, [r3, #0]
 8001134:	4b12      	ldr	r3, [pc, #72]	; (8001180 <HAL_InitTick+0x58>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	4619      	mov	r1, r3
 800113a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800113e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001142:	fbb2 f3f3 	udiv	r3, r2, r3
 8001146:	4618      	mov	r0, r3
 8001148:	f000 f967 	bl	800141a <HAL_SYSTICK_Config>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	e00e      	b.n	8001174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2b0f      	cmp	r3, #15
 800115a:	d80a      	bhi.n	8001172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800115c:	2200      	movs	r2, #0
 800115e:	6879      	ldr	r1, [r7, #4]
 8001160:	f04f 30ff 	mov.w	r0, #4294967295
 8001164:	f000 f92f 	bl	80013c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001168:	4a06      	ldr	r2, [pc, #24]	; (8001184 <HAL_InitTick+0x5c>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
 8001170:	e000      	b.n	8001174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001172:	2301      	movs	r3, #1
}
 8001174:	4618      	mov	r0, r3
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}
 800117c:	20000000 	.word	0x20000000
 8001180:	20000008 	.word	0x20000008
 8001184:	20000004 	.word	0x20000004

08001188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800118c:	4b06      	ldr	r3, [pc, #24]	; (80011a8 <HAL_IncTick+0x20>)
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b06      	ldr	r3, [pc, #24]	; (80011ac <HAL_IncTick+0x24>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4413      	add	r3, r2
 8001198:	4a04      	ldr	r2, [pc, #16]	; (80011ac <HAL_IncTick+0x24>)
 800119a:	6013      	str	r3, [r2, #0]
}
 800119c:	bf00      	nop
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
 80011a6:	bf00      	nop
 80011a8:	20000008 	.word	0x20000008
 80011ac:	20003cc4 	.word	0x20003cc4

080011b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  return uwTick;
 80011b4:	4b03      	ldr	r3, [pc, #12]	; (80011c4 <HAL_GetTick+0x14>)
 80011b6:	681b      	ldr	r3, [r3, #0]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	46bd      	mov	sp, r7
 80011bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop
 80011c4:	20003cc4 	.word	0x20003cc4

080011c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80011d0:	f7ff ffee 	bl	80011b0 <HAL_GetTick>
 80011d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80011e0:	d005      	beq.n	80011ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80011e2:	4b0a      	ldr	r3, [pc, #40]	; (800120c <HAL_Delay+0x44>)
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	461a      	mov	r2, r3
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	4413      	add	r3, r2
 80011ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011ee:	bf00      	nop
 80011f0:	f7ff ffde 	bl	80011b0 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	68fa      	ldr	r2, [r7, #12]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d8f7      	bhi.n	80011f0 <HAL_Delay+0x28>
  {
  }
}
 8001200:	bf00      	nop
 8001202:	bf00      	nop
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	20000008 	.word	0x20000008

08001210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001210:	b480      	push	{r7}
 8001212:	b085      	sub	sp, #20
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001220:	4b0c      	ldr	r3, [pc, #48]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001222:	68db      	ldr	r3, [r3, #12]
 8001224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001226:	68ba      	ldr	r2, [r7, #8]
 8001228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800122c:	4013      	ands	r3, r2
 800122e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800123c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001242:	4a04      	ldr	r2, [pc, #16]	; (8001254 <__NVIC_SetPriorityGrouping+0x44>)
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60d3      	str	r3, [r2, #12]
}
 8001248:	bf00      	nop
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800125c:	4b04      	ldr	r3, [pc, #16]	; (8001270 <__NVIC_GetPriorityGrouping+0x18>)
 800125e:	68db      	ldr	r3, [r3, #12]
 8001260:	0a1b      	lsrs	r3, r3, #8
 8001262:	f003 0307 	and.w	r3, r3, #7
}
 8001266:	4618      	mov	r0, r3
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	e000ed00 	.word	0xe000ed00

08001274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001274:	b480      	push	{r7}
 8001276:	b083      	sub	sp, #12
 8001278:	af00      	add	r7, sp, #0
 800127a:	4603      	mov	r3, r0
 800127c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800127e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	db0b      	blt.n	800129e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	f003 021f 	and.w	r2, r3, #31
 800128c:	4907      	ldr	r1, [pc, #28]	; (80012ac <__NVIC_EnableIRQ+0x38>)
 800128e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001292:	095b      	lsrs	r3, r3, #5
 8001294:	2001      	movs	r0, #1
 8001296:	fa00 f202 	lsl.w	r2, r0, r2
 800129a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800129e:	bf00      	nop
 80012a0:	370c      	adds	r7, #12
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000e100 	.word	0xe000e100

080012b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	4603      	mov	r3, r0
 80012b8:	6039      	str	r1, [r7, #0]
 80012ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	db0a      	blt.n	80012da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	b2da      	uxtb	r2, r3
 80012c8:	490c      	ldr	r1, [pc, #48]	; (80012fc <__NVIC_SetPriority+0x4c>)
 80012ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ce:	0112      	lsls	r2, r2, #4
 80012d0:	b2d2      	uxtb	r2, r2
 80012d2:	440b      	add	r3, r1
 80012d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012d8:	e00a      	b.n	80012f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	b2da      	uxtb	r2, r3
 80012de:	4908      	ldr	r1, [pc, #32]	; (8001300 <__NVIC_SetPriority+0x50>)
 80012e0:	79fb      	ldrb	r3, [r7, #7]
 80012e2:	f003 030f 	and.w	r3, r3, #15
 80012e6:	3b04      	subs	r3, #4
 80012e8:	0112      	lsls	r2, r2, #4
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	440b      	add	r3, r1
 80012ee:	761a      	strb	r2, [r3, #24]
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	e000e100 	.word	0xe000e100
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001304:	b480      	push	{r7}
 8001306:	b089      	sub	sp, #36	; 0x24
 8001308:	af00      	add	r7, sp, #0
 800130a:	60f8      	str	r0, [r7, #12]
 800130c:	60b9      	str	r1, [r7, #8]
 800130e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f003 0307 	and.w	r3, r3, #7
 8001316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	f1c3 0307 	rsb	r3, r3, #7
 800131e:	2b04      	cmp	r3, #4
 8001320:	bf28      	it	cs
 8001322:	2304      	movcs	r3, #4
 8001324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001326:	69fb      	ldr	r3, [r7, #28]
 8001328:	3304      	adds	r3, #4
 800132a:	2b06      	cmp	r3, #6
 800132c:	d902      	bls.n	8001334 <NVIC_EncodePriority+0x30>
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	3b03      	subs	r3, #3
 8001332:	e000      	b.n	8001336 <NVIC_EncodePriority+0x32>
 8001334:	2300      	movs	r3, #0
 8001336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001338:	f04f 32ff 	mov.w	r2, #4294967295
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	fa02 f303 	lsl.w	r3, r2, r3
 8001342:	43da      	mvns	r2, r3
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	401a      	ands	r2, r3
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800134c:	f04f 31ff 	mov.w	r1, #4294967295
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	fa01 f303 	lsl.w	r3, r1, r3
 8001356:	43d9      	mvns	r1, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800135c:	4313      	orrs	r3, r2
         );
}
 800135e:	4618      	mov	r0, r3
 8001360:	3724      	adds	r7, #36	; 0x24
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
	...

0800136c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b082      	sub	sp, #8
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	3b01      	subs	r3, #1
 8001378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800137c:	d301      	bcc.n	8001382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800137e:	2301      	movs	r3, #1
 8001380:	e00f      	b.n	80013a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <SysTick_Config+0x40>)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	3b01      	subs	r3, #1
 8001388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800138a:	210f      	movs	r1, #15
 800138c:	f04f 30ff 	mov.w	r0, #4294967295
 8001390:	f7ff ff8e 	bl	80012b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001394:	4b05      	ldr	r3, [pc, #20]	; (80013ac <SysTick_Config+0x40>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800139a:	4b04      	ldr	r3, [pc, #16]	; (80013ac <SysTick_Config+0x40>)
 800139c:	2207      	movs	r2, #7
 800139e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013a0:	2300      	movs	r3, #0
}
 80013a2:	4618      	mov	r0, r3
 80013a4:	3708      	adds	r7, #8
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	e000e010 	.word	0xe000e010

080013b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b082      	sub	sp, #8
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013b8:	6878      	ldr	r0, [r7, #4]
 80013ba:	f7ff ff29 	bl	8001210 <__NVIC_SetPriorityGrouping>
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013c6:	b580      	push	{r7, lr}
 80013c8:	b086      	sub	sp, #24
 80013ca:	af00      	add	r7, sp, #0
 80013cc:	4603      	mov	r3, r0
 80013ce:	60b9      	str	r1, [r7, #8]
 80013d0:	607a      	str	r2, [r7, #4]
 80013d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013d4:	2300      	movs	r3, #0
 80013d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013d8:	f7ff ff3e 	bl	8001258 <__NVIC_GetPriorityGrouping>
 80013dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013de:	687a      	ldr	r2, [r7, #4]
 80013e0:	68b9      	ldr	r1, [r7, #8]
 80013e2:	6978      	ldr	r0, [r7, #20]
 80013e4:	f7ff ff8e 	bl	8001304 <NVIC_EncodePriority>
 80013e8:	4602      	mov	r2, r0
 80013ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013ee:	4611      	mov	r1, r2
 80013f0:	4618      	mov	r0, r3
 80013f2:	f7ff ff5d 	bl	80012b0 <__NVIC_SetPriority>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140c:	4618      	mov	r0, r3
 800140e:	f7ff ff31 	bl	8001274 <__NVIC_EnableIRQ>
}
 8001412:	bf00      	nop
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f7ff ffa2 	bl	800136c <SysTick_Config>
 8001428:	4603      	mov	r3, r0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
	...

08001434 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef* hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af02      	add	r7, sp, #8
 800143a:	60f8      	str	r0, [r7, #12]
 800143c:	60b9      	str	r1, [r7, #8]
 800143e:	607a      	str	r2, [r7, #4]
 8001440:	603b      	str	r3, [r7, #0]
  /* Initialize the second memory address */
  uint32_t SecondMemAddress = 0U;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800144c:	2b01      	cmp	r3, #1
 800144e:	d101      	bne.n	8001454 <HAL_DCMI_Start_DMA+0x20>
 8001450:	2302      	movs	r3, #2
 8001452:	e086      	b.n	8001562 <HAL_DCMI_Start_DMA+0x12e>
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	2201      	movs	r2, #1
 8001458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	2202      	movs	r2, #2
 8001460:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  
  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001472:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0202 	bic.w	r2, r2, #2
 8001482:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |=  (uint32_t)(DCMI_Mode);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	6819      	ldr	r1, [r3, #0]
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	68ba      	ldr	r2, [r7, #8]
 8001490:	430a      	orrs	r2, r1
 8001492:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001498:	4a34      	ldr	r2, [pc, #208]	; (800156c <HAL_DCMI_Start_DMA+0x138>)
 800149a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a0:	4a33      	ldr	r2, [pc, #204]	; (8001570 <HAL_DCMI_Start_DMA+0x13c>)
 80014a2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014a8:	2200      	movs	r2, #0
 80014aa:	651a      	str	r2, [r3, #80]	; 0x50
  
  /* Reset transfer counters value */ 
  hdcmi->XferCount = 0U;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	2200      	movs	r2, #0
 80014b0:	629a      	str	r2, [r3, #40]	; 0x28
  hdcmi->XferTransferNumber = 0U;
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	2200      	movs	r2, #0
 80014b6:	631a      	str	r2, [r3, #48]	; 0x30

  if(Length <= 0xFFFFU)
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014be:	d20a      	bcs.n	80014d6 <HAL_DCMI_Start_DMA+0xa2>
  {
    /* Enable the DMA Stream */
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length);
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	3328      	adds	r3, #40	; 0x28
 80014ca:	4619      	mov	r1, r3
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	687a      	ldr	r2, [r7, #4]
 80014d0:	f000 fb1e 	bl	8001b10 <HAL_DMA_Start_IT>
 80014d4:	e038      	b.n	8001548 <HAL_DCMI_Start_DMA+0x114>
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014da:	4a24      	ldr	r2, [pc, #144]	; (800156c <HAL_DCMI_Start_DMA+0x138>)
 80014dc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1U;
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	2201      	movs	r2, #1
 80014e2:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferSize = Length;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	683a      	ldr	r2, [r7, #0]
 80014e8:	62da      	str	r2, [r3, #44]	; 0x2c
    hdcmi->pBuffPtr = pData;
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	635a      	str	r2, [r3, #52]	; 0x34

    /* Get the number of buffer */
    while(hdcmi->XferSize > 0xFFFFU)
 80014f0:	e009      	b.n	8001506 <HAL_DCMI_Start_DMA+0xd2>
    {
      hdcmi->XferSize = (hdcmi->XferSize/2U);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014f6:	085a      	lsrs	r2, r3, #1
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	62da      	str	r2, [r3, #44]	; 0x2c
      hdcmi->XferCount = hdcmi->XferCount*2U;
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001500:	005a      	lsls	r2, r3, #1
 8001502:	68fb      	ldr	r3, [r7, #12]
 8001504:	629a      	str	r2, [r3, #40]	; 0x28
    while(hdcmi->XferSize > 0xFFFFU)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800150a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800150e:	d2f0      	bcs.n	80014f2 <HAL_DCMI_Start_DMA+0xbe>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001514:	1e9a      	subs	r2, r3, #2
 8001516:	68fb      	ldr	r3, [r7, #12]
 8001518:	629a      	str	r2, [r3, #40]	; 0x28
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	631a      	str	r2, [r3, #48]	; 0x30

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U*hdcmi->XferSize));
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001526:	009b      	lsls	r3, r3, #2
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	4413      	add	r3, r2
 800152c:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3328      	adds	r3, #40	; 0x28
 8001538:	4619      	mov	r1, r3
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800153e:	9300      	str	r3, [sp, #0]
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	687a      	ldr	r2, [r7, #4]
 8001544:	f000 fe38 	bl	80021b8 <HAL_DMAEx_MultiBufferStart_IT>
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f042 0201 	orr.w	r2, r2, #1
 8001556:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return HAL_OK;
 8001560:	2300      	movs	r3, #0
}
 8001562:	4618      	mov	r0, r3
 8001564:	3718      	adds	r7, #24
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	08001781 	.word	0x08001781
 8001570:	080018ab 	.word	0x080018ab

08001574 <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef* hdcmi)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = SystemCoreClock / HAL_TIMEOUT_DCMI_STOP;
 800157c:	4b29      	ldr	r3, [pc, #164]	; (8001624 <HAL_DCMI_Stop+0xb0>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	085b      	lsrs	r3, r3, #1
 8001582:	4a29      	ldr	r2, [pc, #164]	; (8001628 <HAL_DCMI_Stop+0xb4>)
 8001584:	fba2 2303 	umull	r2, r3, r2, r3
 8001588:	089b      	lsrs	r3, r3, #2
 800158a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800158c:	2300      	movs	r3, #0
 800158e:	73fb      	strb	r3, [r7, #15]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001596:	2b01      	cmp	r3, #1
 8001598:	d101      	bne.n	800159e <HAL_DCMI_Stop+0x2a>
 800159a:	2302      	movs	r3, #2
 800159c:	e03e      	b.n	800161c <HAL_DCMI_Stop+0xa8>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2201      	movs	r2, #1
 80015a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	2202      	movs	r2, #2
 80015aa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	681a      	ldr	r2, [r3, #0]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0201 	bic.w	r2, r2, #1
 80015bc:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    if (count-- == 0U)
 80015be:	68bb      	ldr	r3, [r7, #8]
 80015c0:	1e5a      	subs	r2, r3, #1
 80015c2:	60ba      	str	r2, [r7, #8]
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d108      	bne.n	80015da <HAL_DCMI_Stop+0x66>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015cc:	f043 0220 	orr.w	r2, r3, #32
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	63da      	str	r2, [r3, #60]	; 0x3c

      status = HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	73fb      	strb	r3, [r7, #15]
      break;
 80015d8:	e006      	b.n	80015e8 <HAL_DCMI_Stop+0x74>
    }
  }
  while((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d1ea      	bne.n	80015be <HAL_DCMI_Stop+0x4a>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80015f6:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  HAL_DMA_Abort(hdcmi->DMA_Handle);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015fc:	4618      	mov	r0, r3
 80015fe:	f000 fadf 	bl	8001bc0 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2201      	movs	r2, #1
 800160e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2200      	movs	r2, #0
 8001616:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  /* Return function status */
  return status;
 800161a:	7bfb      	ldrb	r3, [r7, #15]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3710      	adds	r7, #16
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	20000000 	.word	0x20000000
 8001628:	92492493 	.word	0x92492493

0800162c <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	691b      	ldr	r3, [r3, #16]
 800163a:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	f003 0304 	and.w	r3, r3, #4
 8001642:	2b00      	cmp	r3, #0
 8001644:	d016      	beq.n	8001674 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	2204      	movs	r2, #4
 800164c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001652:	f043 0202 	orr.w	r2, r3, #2
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	2204      	movs	r2, #4
 800165e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001666:	4a2f      	ldr	r2, [pc, #188]	; (8001724 <HAL_DCMI_IRQHandler+0xf8>)
 8001668:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800166e:	4618      	mov	r0, r3
 8001670:	f000 fb16 	bl	8001ca0 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d016      	beq.n	80016ac <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2202      	movs	r2, #2
 8001684:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800168a:	f043 0201 	orr.w	r2, r3, #1
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	2204      	movs	r2, #4
 8001696:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    
    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800169e:	4a21      	ldr	r2, [pc, #132]	; (8001724 <HAL_DCMI_IRQHandler+0xf8>)
 80016a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Abort the DMA Transfer */
    HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fafa 	bl	8001ca0 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	f003 0310 	and.w	r3, r3, #16
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	2210      	movs	r2, #16
 80016bc:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else  
    HAL_DCMI_LineEventCallback(hdcmi);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f83c 	bl	800173c <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */     
  }
  /* VSYNC interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d006      	beq.n	80016dc <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2208      	movs	r2, #8
 80016d4:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else  
    HAL_DCMI_VsyncEventCallback(hdcmi);
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f000 f83a 	bl	8001750 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */ 
  }
  /* FRAME interrupt management ***********************************************/
  if((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d019      	beq.n	800171a <HAL_DCMI_IRQHandler+0xee>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b02      	cmp	r3, #2
 80016f2:	d107      	bne.n	8001704 <HAL_DCMI_IRQHandler+0xd8>
    { 
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	68da      	ldr	r2, [r3, #12]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 021e 	bic.w	r2, r2, #30
 8001702:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	68da      	ldr	r2, [r3, #12]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f022 0201 	bic.w	r2, r2, #1
 8001712:	60da      	str	r2, [r3, #12]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else  
    HAL_DCMI_FrameEventCallback(hdcmi);
 8001714:	6878      	ldr	r0, [r7, #4]
 8001716:	f005 f925 	bl	8006964 <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */      
  }
}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	080018ab 	.word	0x080018ab

08001728 <HAL_DCMI_ErrorCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr

0800173c <HAL_DCMI_LineEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_DCMI_VsyncEventCallback>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_VsyncEventCallback could be implemented in the user file
   */
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001762:	4770      	bx	lr

08001764 <HAL_DCMI_GetState>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL state
  */
HAL_DCMI_StateTypeDef HAL_DCMI_GetState(DCMI_HandleTypeDef *hdcmi)
{
 8001764:	b480      	push	{r7}
 8001766:	b083      	sub	sp, #12
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  return hdcmi->State;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001772:	b2db      	uxtb	r3, r3
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr

08001780 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001790:	60bb      	str	r3, [r7, #8]
  
  if(hdcmi->XferCount != 0U)
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001796:	2b00      	cmp	r3, #0
 8001798:	d043      	beq.n	8001822 <DCMI_DMAXferCplt+0xa2>
  {
    /* Update memory 0 address location */
    tmp = ((hdcmi->DMA_Handle->Instance->CR) & DMA_SxCR_CT);
 800179a:	68bb      	ldr	r3, [r7, #8]
 800179c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017a6:	60fb      	str	r3, [r7, #12]
    if(((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 80017a8:	68bb      	ldr	r3, [r7, #8]
 80017aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d118      	bne.n	80017e6 <DCMI_DMAXferCplt+0x66>
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d015      	beq.n	80017e6 <DCMI_DMAXferCplt+0x66>
    {
      tmp = hdcmi->DMA_Handle->Instance->M0AR;
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	68db      	ldr	r3, [r3, #12]
 80017c2:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY0);
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017cc:	00da      	lsls	r2, r3, #3
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	4413      	add	r3, r2
 80017d2:	2200      	movs	r2, #0
 80017d4:	4619      	mov	r1, r3
 80017d6:	f001 fe37 	bl	8003448 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017de:	1e5a      	subs	r2, r3, #1
 80017e0:	68bb      	ldr	r3, [r7, #8]
 80017e2:	629a      	str	r2, [r3, #40]	; 0x28
 80017e4:	e044      	b.n	8001870 <DCMI_DMAXferCplt+0xf0>
    }
    /* Update memory 1 address location */
    else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d13c      	bne.n	8001870 <DCMI_DMAXferCplt+0xf0>
    {
      tmp = hdcmi->DMA_Handle->Instance->M1AR;
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	60fb      	str	r3, [r7, #12]
      HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U*hdcmi->XferSize)), MEMORY1);
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001808:	00da      	lsls	r2, r3, #3
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	4413      	add	r3, r2
 800180e:	2201      	movs	r2, #1
 8001810:	4619      	mov	r1, r3
 8001812:	f001 fe19 	bl	8003448 <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8001816:	68bb      	ldr	r3, [r7, #8]
 8001818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800181a:	1e5a      	subs	r2, r3, #1
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	629a      	str	r2, [r3, #40]	; 0x28
 8001820:	e026      	b.n	8001870 <DCMI_DMAXferCplt+0xf0>
    }
  }
  /* Update memory 0 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) != 0U)
 8001822:	68bb      	ldr	r3, [r7, #8]
 8001824:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800182e:	2b00      	cmp	r3, #0
 8001830:	d006      	beq.n	8001840 <DCMI_DMAXferCplt+0xc0>
  {
    hdcmi->DMA_Handle->Instance->M0AR = hdcmi->pBuffPtr;
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	68ba      	ldr	r2, [r7, #8]
 800183a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	e017      	b.n	8001870 <DCMI_DMAXferCplt+0xf0>
  }
  /* Update memory 1 address location */
  else if((hdcmi->DMA_Handle->Instance->CR & DMA_SxCR_CT) == 0U)
 8001840:	68bb      	ldr	r3, [r7, #8]
 8001842:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800184c:	2b00      	cmp	r3, #0
 800184e:	d10f      	bne.n	8001870 <DCMI_DMAXferCplt+0xf0>
  {
    tmp = hdcmi->pBuffPtr;
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001854:	60fb      	str	r3, [r7, #12]
    hdcmi->DMA_Handle->Instance->M1AR = (tmp + (4U*hdcmi->XferSize));
 8001856:	68bb      	ldr	r3, [r7, #8]
 8001858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800185a:	0099      	lsls	r1, r3, #2
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	440a      	add	r2, r1
 8001866:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	629a      	str	r2, [r3, #40]	; 0x28
  }
  
  /* Check if the frame is transferred */
  if(hdcmi->XferCount == hdcmi->XferTransferNumber)
 8001870:	68bb      	ldr	r3, [r7, #8]
 8001872:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	429a      	cmp	r2, r3
 800187a:	d112      	bne.n	80018a2 <DCMI_DMAXferCplt+0x122>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	68da      	ldr	r2, [r3, #12]
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f042 0201 	orr.w	r2, r2, #1
 800188a:	60da      	str	r2, [r3, #12]
    
    /* When snapshot mode, set dcmi state to ready */
    if((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800188c:	68bb      	ldr	r3, [r7, #8]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	2b02      	cmp	r3, #2
 8001898:	d103      	bne.n	80018a2 <DCMI_DMAXferCplt+0x122>
    {  
      hdcmi->State= HAL_DCMI_STATE_READY;
 800189a:	68bb      	ldr	r3, [r7, #8]
 800189c:	2201      	movs	r2, #1
 800189e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
  }
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef* hdcmi = ( DCMI_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b6:	60fb      	str	r3, [r7, #12]
  
  if(hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d003      	beq.n	80018ca <DCMI_DMAError+0x20>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	2201      	movs	r2, #1
 80018c6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI error callback*/
    hdcmi->ErrorCallback(hdcmi);
#else  
  HAL_DCMI_ErrorCallback(hdcmi);
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f7ff ff2c 	bl	8001728 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */   

}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if(hdcmi == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <HAL_DCMI_Init+0x12>
  {
     return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e05f      	b.n	80019aa <HAL_DCMI_Init+0xd2>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
  if(hdcmi->State == HAL_DCMI_STATE_RESET)
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80018f0:	b2db      	uxtb	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d109      	bne.n	800190a <HAL_DCMI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hdcmi->Lock = HAL_UNLOCKED;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2200      	movs	r2, #0
 80018fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80018fe:	6878      	ldr	r0, [r7, #4]
 8001900:	f7ff f92e 	bl	8000b60 <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
    HAL_DCMI_MspInit(hdcmi);
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff f92b 	bl	8000b60 <HAL_DCMI_MspInit>
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	2202      	movs	r2, #2
 800190e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
                          /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 |\
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	687a      	ldr	r2, [r7, #4]
 800191a:	6812      	ldr	r2, [r2, #0]
 800191c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8001920:	f023 0308 	bic.w	r3, r3, #8
 8001924:	6013      	str	r3, [r2, #0]
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
                           | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS |\
                           DCMI_CR_LSM | DCMI_CR_OELS
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                           );
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6819      	ldr	r1, [r3, #0]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	685a      	ldr	r2, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	695b      	ldr	r3, [r3, #20]
 8001934:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 800193a:	431a      	orrs	r2, r3
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	689b      	ldr	r3, [r3, #8]
                                     hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  |\
 8001946:	431a      	orrs	r2, r3
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	431a      	orrs	r2, r3
                                     hdcmi->Init.JPEGMode
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a1b      	ldr	r3, [r3, #32]
                                     hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode |\
 8001952:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |=  (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate |\
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	430a      	orrs	r2, r1
 800195a:	601a      	str	r2, [r3, #0]
                                     | hdcmi->Init.ByteSelectMode |\
                                     hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode |\
                                     hdcmi->Init.LineSelectStart
#endif /* STM32F446xx || STM32F469xx || STM32F479xx */
                                     );
  if(hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	2b10      	cmp	r3, #16
 8001962:	d112      	bne.n	800198a <HAL_DCMI_Init+0xb2>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	7f1b      	ldrb	r3, [r3, #28]
 8001968:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	7f5b      	ldrb	r3, [r3, #29]
 800196e:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001970:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	7f9b      	ldrb	r3, [r3, #30]
 8001976:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_POSITION_ESCR_LSC)|
 8001978:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_POSITION_ESCR_FEC));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	7fdb      	ldrb	r3, [r3, #31]
 8001980:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_POSITION_ESCR_LEC) |
 8001986:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    |
 8001988:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f042 021e 	orr.w	r2, r2, #30
 8001998:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2200      	movs	r2, #0
 800199e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	2201      	movs	r2, #1
 80019a4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  return HAL_OK;
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
	...

080019b4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80019c0:	f7ff fbf6 	bl	80011b0 <HAL_GetTick>
 80019c4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d101      	bne.n	80019d0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e099      	b.n	8001b04 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	2200      	movs	r2, #0
 80019dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	681a      	ldr	r2, [r3, #0]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f022 0201 	bic.w	r2, r2, #1
 80019ee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80019f0:	e00f      	b.n	8001a12 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80019f2:	f7ff fbdd 	bl	80011b0 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	2b05      	cmp	r3, #5
 80019fe:	d908      	bls.n	8001a12 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2220      	movs	r2, #32
 8001a04:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	2203      	movs	r2, #3
 8001a0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e078      	b.n	8001b04 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d1e8      	bne.n	80019f2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001a28:	697a      	ldr	r2, [r7, #20]
 8001a2a:	4b38      	ldr	r3, [pc, #224]	; (8001b0c <HAL_DMA_Init+0x158>)
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	685a      	ldr	r2, [r3, #4]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	691b      	ldr	r3, [r3, #16]
 8001a44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001a4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001a56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	6a1b      	ldr	r3, [r3, #32]
 8001a5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001a5e:	697a      	ldr	r2, [r7, #20]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a68:	2b04      	cmp	r3, #4
 8001a6a:	d107      	bne.n	8001a7c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a74:	4313      	orrs	r3, r2
 8001a76:	697a      	ldr	r2, [r7, #20]
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	695b      	ldr	r3, [r3, #20]
 8001a8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	f023 0307 	bic.w	r3, r3, #7
 8001a92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa2:	2b04      	cmp	r3, #4
 8001aa4:	d117      	bne.n	8001ad6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001aaa:	697a      	ldr	r2, [r7, #20]
 8001aac:	4313      	orrs	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00e      	beq.n	8001ad6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	f000 fb01 	bl	80020c0 <DMA_CheckFifoParam>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d008      	beq.n	8001ad6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2240      	movs	r2, #64	; 0x40
 8001ac8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001ad2:	2301      	movs	r3, #1
 8001ad4:	e016      	b.n	8001b04 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f000 fab8 	bl	8002054 <DMA_CalcBaseAndBitshift>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aec:	223f      	movs	r2, #63	; 0x3f
 8001aee:	409a      	lsls	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	2200      	movs	r2, #0
 8001af8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	2201      	movs	r2, #1
 8001afe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001b02:	2300      	movs	r3, #0
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3718      	adds	r7, #24
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	f010803f 	.word	0xf010803f

08001b10 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
 8001b1c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b26:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_DMA_Start_IT+0x26>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e040      	b.n	8001bb8 <HAL_DMA_Start_IT+0xa8>
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d12f      	bne.n	8001baa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2202      	movs	r2, #2
 8001b4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	687a      	ldr	r2, [r7, #4]
 8001b5c:	68b9      	ldr	r1, [r7, #8]
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f000 fa4a 	bl	8001ff8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b68:	223f      	movs	r2, #63	; 0x3f
 8001b6a:	409a      	lsls	r2, r3
 8001b6c:	693b      	ldr	r3, [r7, #16]
 8001b6e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	681a      	ldr	r2, [r3, #0]
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0216 	orr.w	r2, r2, #22
 8001b7e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d007      	beq.n	8001b98 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0208 	orr.w	r2, r2, #8
 8001b96:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	681a      	ldr	r2, [r3, #0]
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0201 	orr.w	r2, r2, #1
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	e005      	b.n	8001bb6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	2200      	movs	r2, #0
 8001bae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001bb2:	2302      	movs	r3, #2
 8001bb4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bcc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001bce:	f7ff faef 	bl	80011b0 <HAL_GetTick>
 8001bd2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b02      	cmp	r3, #2
 8001bde:	d008      	beq.n	8001bf2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001bee:	2301      	movs	r3, #1
 8001bf0:	e052      	b.n	8001c98 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f022 0216 	bic.w	r2, r2, #22
 8001c00:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	695a      	ldr	r2, [r3, #20]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001c10:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d103      	bne.n	8001c22 <HAL_DMA_Abort+0x62>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d007      	beq.n	8001c32 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f022 0208 	bic.w	r2, r2, #8
 8001c30:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0201 	bic.w	r2, r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c42:	e013      	b.n	8001c6c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c44:	f7ff fab4 	bl	80011b0 <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68bb      	ldr	r3, [r7, #8]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b05      	cmp	r3, #5
 8001c50:	d90c      	bls.n	8001c6c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2220      	movs	r2, #32
 8001c56:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2203      	movs	r2, #3
 8001c5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	2200      	movs	r2, #0
 8001c64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e015      	b.n	8001c98 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0301 	and.w	r3, r3, #1
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d1e4      	bne.n	8001c44 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c7e:	223f      	movs	r2, #63	; 0x3f
 8001c80:	409a      	lsls	r2, r3
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2200      	movs	r2, #0
 8001c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001c96:	2300      	movs	r3, #0
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b02      	cmp	r3, #2
 8001cb2:	d004      	beq.n	8001cbe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2280      	movs	r2, #128	; 0x80
 8001cb8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e00c      	b.n	8001cd8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2205      	movs	r2, #5
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f022 0201 	bic.w	r2, r2, #1
 8001cd4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001cd6:	2300      	movs	r3, #0
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	370c      	adds	r7, #12
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b086      	sub	sp, #24
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001cf0:	4b8e      	ldr	r3, [pc, #568]	; (8001f2c <HAL_DMA_IRQHandler+0x248>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	4a8e      	ldr	r2, [pc, #568]	; (8001f30 <HAL_DMA_IRQHandler+0x24c>)
 8001cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfa:	0a9b      	lsrs	r3, r3, #10
 8001cfc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d02:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d0e:	2208      	movs	r2, #8
 8001d10:	409a      	lsls	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	4013      	ands	r3, r2
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d01a      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d013      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f022 0204 	bic.w	r2, r2, #4
 8001d36:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d3c:	2208      	movs	r2, #8
 8001d3e:	409a      	lsls	r2, r3
 8001d40:	693b      	ldr	r3, [r7, #16]
 8001d42:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d48:	f043 0201 	orr.w	r2, r3, #1
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	2201      	movs	r2, #1
 8001d56:	409a      	lsls	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d012      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d00b      	beq.n	8001d86 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d72:	2201      	movs	r2, #1
 8001d74:	409a      	lsls	r2, r3
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d7e:	f043 0202 	orr.w	r2, r3, #2
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2204      	movs	r2, #4
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	4013      	ands	r3, r2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d012      	beq.n	8001dbc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d00b      	beq.n	8001dbc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da8:	2204      	movs	r2, #4
 8001daa:	409a      	lsls	r2, r3
 8001dac:	693b      	ldr	r3, [r7, #16]
 8001dae:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001db4:	f043 0204 	orr.w	r2, r3, #4
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	2210      	movs	r2, #16
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d043      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d03c      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	2210      	movs	r2, #16
 8001de0:	409a      	lsls	r2, r3
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d018      	beq.n	8001e26 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d108      	bne.n	8001e14 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d024      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	4798      	blx	r3
 8001e12:	e01f      	b.n	8001e54 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d01b      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	4798      	blx	r3
 8001e24:	e016      	b.n	8001e54 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d107      	bne.n	8001e44 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	681a      	ldr	r2, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f022 0208 	bic.w	r2, r2, #8
 8001e42:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e58:	2220      	movs	r2, #32
 8001e5a:	409a      	lsls	r2, r3
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	4013      	ands	r3, r2
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	f000 808f 	beq.w	8001f84 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0310 	and.w	r3, r3, #16
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	f000 8087 	beq.w	8001f84 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7a:	2220      	movs	r2, #32
 8001e7c:	409a      	lsls	r2, r3
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b05      	cmp	r3, #5
 8001e8c:	d136      	bne.n	8001efc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	681a      	ldr	r2, [r3, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f022 0216 	bic.w	r2, r2, #22
 8001e9c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	695a      	ldr	r2, [r3, #20]
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001eac:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d103      	bne.n	8001ebe <HAL_DMA_IRQHandler+0x1da>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d007      	beq.n	8001ece <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681a      	ldr	r2, [r3, #0]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 0208 	bic.w	r2, r2, #8
 8001ecc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed2:	223f      	movs	r2, #63	; 0x3f
 8001ed4:	409a      	lsls	r2, r3
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	2201      	movs	r2, #1
 8001ede:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d07e      	beq.n	8001ff0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	4798      	blx	r3
        }
        return;
 8001efa:	e079      	b.n	8001ff0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d01d      	beq.n	8001f46 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10d      	bne.n	8001f34 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d031      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	4798      	blx	r3
 8001f28:	e02c      	b.n	8001f84 <HAL_DMA_IRQHandler+0x2a0>
 8001f2a:	bf00      	nop
 8001f2c:	20000000 	.word	0x20000000
 8001f30:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d023      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	4798      	blx	r3
 8001f44:	e01e      	b.n	8001f84 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d10f      	bne.n	8001f74 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f022 0210 	bic.w	r2, r2, #16
 8001f62:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2201      	movs	r2, #1
 8001f68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d032      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f90:	f003 0301 	and.w	r3, r3, #1
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d022      	beq.n	8001fde <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2205      	movs	r2, #5
 8001f9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0201 	bic.w	r2, r2, #1
 8001fae:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	697a      	ldr	r2, [r7, #20]
 8001fb8:	429a      	cmp	r2, r3
 8001fba:	d307      	bcc.n	8001fcc <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0301 	and.w	r3, r3, #1
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d1f2      	bne.n	8001fb0 <HAL_DMA_IRQHandler+0x2cc>
 8001fca:	e000      	b.n	8001fce <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fcc:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2201      	movs	r2, #1
 8001fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	4798      	blx	r3
 8001fee:	e000      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001ff0:	bf00      	nop
    }
  }
}
 8001ff2:	3718      	adds	r7, #24
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	bd80      	pop	{r7, pc}

08001ff8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
 8002004:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002014:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	2b40      	cmp	r3, #64	; 0x40
 8002024:	d108      	bne.n	8002038 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	687a      	ldr	r2, [r7, #4]
 800202c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68ba      	ldr	r2, [r7, #8]
 8002034:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002036:	e007      	b.n	8002048 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68ba      	ldr	r2, [r7, #8]
 800203e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	687a      	ldr	r2, [r7, #4]
 8002046:	60da      	str	r2, [r3, #12]
}
 8002048:	bf00      	nop
 800204a:	3714      	adds	r7, #20
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	b2db      	uxtb	r3, r3
 8002062:	3b10      	subs	r3, #16
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <DMA_CalcBaseAndBitshift+0x64>)
 8002066:	fba2 2303 	umull	r2, r3, r2, r3
 800206a:	091b      	lsrs	r3, r3, #4
 800206c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800206e:	4a13      	ldr	r2, [pc, #76]	; (80020bc <DMA_CalcBaseAndBitshift+0x68>)
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	4413      	add	r3, r2
 8002074:	781b      	ldrb	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d909      	bls.n	8002096 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800208a:	f023 0303 	bic.w	r3, r3, #3
 800208e:	1d1a      	adds	r2, r3, #4
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	659a      	str	r2, [r3, #88]	; 0x58
 8002094:	e007      	b.n	80020a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800209e:	f023 0303 	bic.w	r3, r3, #3
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3714      	adds	r7, #20
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	aaaaaaab 	.word	0xaaaaaaab
 80020bc:	08007de0 	.word	0x08007de0

080020c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020c8:	2300      	movs	r3, #0
 80020ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	699b      	ldr	r3, [r3, #24]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d11f      	bne.n	800211a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	2b03      	cmp	r3, #3
 80020de:	d856      	bhi.n	800218e <DMA_CheckFifoParam+0xce>
 80020e0:	a201      	add	r2, pc, #4	; (adr r2, 80020e8 <DMA_CheckFifoParam+0x28>)
 80020e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020e6:	bf00      	nop
 80020e8:	080020f9 	.word	0x080020f9
 80020ec:	0800210b 	.word	0x0800210b
 80020f0:	080020f9 	.word	0x080020f9
 80020f4:	0800218f 	.word	0x0800218f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d046      	beq.n	8002192 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002104:	2301      	movs	r3, #1
 8002106:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002108:	e043      	b.n	8002192 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800210e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002112:	d140      	bne.n	8002196 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002118:	e03d      	b.n	8002196 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699b      	ldr	r3, [r3, #24]
 800211e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002122:	d121      	bne.n	8002168 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	2b03      	cmp	r3, #3
 8002128:	d837      	bhi.n	800219a <DMA_CheckFifoParam+0xda>
 800212a:	a201      	add	r2, pc, #4	; (adr r2, 8002130 <DMA_CheckFifoParam+0x70>)
 800212c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002130:	08002141 	.word	0x08002141
 8002134:	08002147 	.word	0x08002147
 8002138:	08002141 	.word	0x08002141
 800213c:	08002159 	.word	0x08002159
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	73fb      	strb	r3, [r7, #15]
      break;
 8002144:	e030      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800214a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d025      	beq.n	800219e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002156:	e022      	b.n	800219e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800215c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002160:	d11f      	bne.n	80021a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002166:	e01c      	b.n	80021a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002168:	68bb      	ldr	r3, [r7, #8]
 800216a:	2b02      	cmp	r3, #2
 800216c:	d903      	bls.n	8002176 <DMA_CheckFifoParam+0xb6>
 800216e:	68bb      	ldr	r3, [r7, #8]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d003      	beq.n	800217c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002174:	e018      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
      break;
 800217a:	e015      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002184:	2b00      	cmp	r3, #0
 8002186:	d00e      	beq.n	80021a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	73fb      	strb	r3, [r7, #15]
      break;
 800218c:	e00b      	b.n	80021a6 <DMA_CheckFifoParam+0xe6>
      break;
 800218e:	bf00      	nop
 8002190:	e00a      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002192:	bf00      	nop
 8002194:	e008      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 8002196:	bf00      	nop
 8002198:	e006      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 800219a:	bf00      	nop
 800219c:	e004      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 800219e:	bf00      	nop
 80021a0:	e002      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80021a2:	bf00      	nop
 80021a4:	e000      	b.n	80021a8 <DMA_CheckFifoParam+0xe8>
      break;
 80021a6:	bf00      	nop
    }
  } 
  
  return status; 
 80021a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop

080021b8 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress The second memory Buffer address in case of multi buffer Transfer  
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	60b9      	str	r1, [r7, #8]
 80021c2:	607a      	str	r2, [r7, #4]
 80021c4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	75fb      	strb	r3, [r7, #23]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  
  /* Memory-to-memory transfer not supported in double buffering mode */
  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	689b      	ldr	r3, [r3, #8]
 80021ce:	2b80      	cmp	r3, #128	; 0x80
 80021d0:	d106      	bne.n	80021e0 <HAL_DMAEx_MultiBufferStart_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021d8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021da:	2301      	movs	r3, #1
 80021dc:	f001 b911 	b.w	8003402 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Check callback functions */
  if ((NULL == hdma->XferCpltCallback) || (NULL == hdma->XferM1CpltCallback) || (NULL == hdma->XferErrorCallback))
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d007      	beq.n	80021f8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d003      	beq.n	80021f8 <HAL_DMAEx_MultiBufferStart_IT+0x40>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d105      	bne.n	8002204 <HAL_DMAEx_MultiBufferStart_IT+0x4c>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2240      	movs	r2, #64	; 0x40
 80021fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	f001 b8ff 	b.w	8003402 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
  }
  
  /* Process locked */
  __HAL_LOCK(hdma);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800220a:	2b01      	cmp	r3, #1
 800220c:	d102      	bne.n	8002214 <HAL_DMAEx_MultiBufferStart_IT+0x5c>
 800220e:	2302      	movs	r3, #2
 8002210:	f001 b8f7 	b.w	8003402 <HAL_DMAEx_MultiBufferStart_IT+0x124a>
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	2201      	movs	r2, #1
 8002218:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002222:	b2db      	uxtb	r3, r3
 8002224:	2b01      	cmp	r3, #1
 8002226:	f041 80e5 	bne.w	80033f4 <HAL_DMAEx_MultiBufferStart_IT+0x123c>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2202      	movs	r2, #2
 800222e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Enable the Double buffer mode */
    hdma->Instance->CR |= (uint32_t)DMA_SxCR_DBM;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8002246:	601a      	str	r2, [r3, #0]
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M1AR = SecondMemAddress;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	611a      	str	r2, [r3, #16]
    
    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength); 
 8002250:	6a3b      	ldr	r3, [r7, #32]
 8002252:	687a      	ldr	r2, [r7, #4]
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f001 f910 	bl	800347c <DMA_MultiBufferSetConfig>
    
    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	461a      	mov	r2, r3
 8002262:	4b8d      	ldr	r3, [pc, #564]	; (8002498 <HAL_DMAEx_MultiBufferStart_IT+0x2e0>)
 8002264:	429a      	cmp	r2, r3
 8002266:	d960      	bls.n	800232a <HAL_DMAEx_MultiBufferStart_IT+0x172>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4a8b      	ldr	r2, [pc, #556]	; (800249c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d057      	beq.n	8002322 <HAL_DMAEx_MultiBufferStart_IT+0x16a>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a8a      	ldr	r2, [pc, #552]	; (80024a0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d050      	beq.n	800231e <HAL_DMAEx_MultiBufferStart_IT+0x166>
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a88      	ldr	r2, [pc, #544]	; (80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d049      	beq.n	800231a <HAL_DMAEx_MultiBufferStart_IT+0x162>
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4a87      	ldr	r2, [pc, #540]	; (80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800228c:	4293      	cmp	r3, r2
 800228e:	d042      	beq.n	8002316 <HAL_DMAEx_MultiBufferStart_IT+0x15e>
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a85      	ldr	r2, [pc, #532]	; (80024ac <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d03a      	beq.n	8002310 <HAL_DMAEx_MultiBufferStart_IT+0x158>
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	4a84      	ldr	r2, [pc, #528]	; (80024b0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d032      	beq.n	800230a <HAL_DMAEx_MultiBufferStart_IT+0x152>
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a82      	ldr	r2, [pc, #520]	; (80024b4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d02a      	beq.n	8002304 <HAL_DMAEx_MultiBufferStart_IT+0x14c>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4a81      	ldr	r2, [pc, #516]	; (80024b8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 80022b4:	4293      	cmp	r3, r2
 80022b6:	d022      	beq.n	80022fe <HAL_DMAEx_MultiBufferStart_IT+0x146>
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	4a7f      	ldr	r2, [pc, #508]	; (80024bc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01a      	beq.n	80022f8 <HAL_DMAEx_MultiBufferStart_IT+0x140>
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a7e      	ldr	r2, [pc, #504]	; (80024c0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 80022c8:	4293      	cmp	r3, r2
 80022ca:	d012      	beq.n	80022f2 <HAL_DMAEx_MultiBufferStart_IT+0x13a>
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	4a7c      	ldr	r2, [pc, #496]	; (80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d00a      	beq.n	80022ec <HAL_DMAEx_MultiBufferStart_IT+0x134>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a7b      	ldr	r2, [pc, #492]	; (80024c8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d102      	bne.n	80022e6 <HAL_DMAEx_MultiBufferStart_IT+0x12e>
 80022e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022e4:	e01e      	b.n	8002324 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022e6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022ea:	e01b      	b.n	8002324 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022ec:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022f0:	e018      	b.n	8002324 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022f2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022f6:	e015      	b.n	8002324 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022f8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80022fc:	e012      	b.n	8002324 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 80022fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002302:	e00f      	b.n	8002324 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002304:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002308:	e00c      	b.n	8002324 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800230a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800230e:	e009      	b.n	8002324 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002310:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002314:	e006      	b.n	8002324 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002316:	2320      	movs	r3, #32
 8002318:	e004      	b.n	8002324 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800231a:	2320      	movs	r3, #32
 800231c:	e002      	b.n	8002324 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 800231e:	2320      	movs	r3, #32
 8002320:	e000      	b.n	8002324 <HAL_DMAEx_MultiBufferStart_IT+0x16c>
 8002322:	2320      	movs	r3, #32
 8002324:	4a69      	ldr	r2, [pc, #420]	; (80024cc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 8002326:	60d3      	str	r3, [r2, #12]
 8002328:	e14f      	b.n	80025ca <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	461a      	mov	r2, r3
 8002330:	4b67      	ldr	r3, [pc, #412]	; (80024d0 <HAL_DMAEx_MultiBufferStart_IT+0x318>)
 8002332:	429a      	cmp	r2, r3
 8002334:	d960      	bls.n	80023f8 <HAL_DMAEx_MultiBufferStart_IT+0x240>
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a58      	ldr	r2, [pc, #352]	; (800249c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d057      	beq.n	80023f0 <HAL_DMAEx_MultiBufferStart_IT+0x238>
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	4a56      	ldr	r2, [pc, #344]	; (80024a0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d050      	beq.n	80023ec <HAL_DMAEx_MultiBufferStart_IT+0x234>
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4a55      	ldr	r2, [pc, #340]	; (80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d049      	beq.n	80023e8 <HAL_DMAEx_MultiBufferStart_IT+0x230>
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a53      	ldr	r2, [pc, #332]	; (80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d042      	beq.n	80023e4 <HAL_DMAEx_MultiBufferStart_IT+0x22c>
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	4a52      	ldr	r2, [pc, #328]	; (80024ac <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002364:	4293      	cmp	r3, r2
 8002366:	d03a      	beq.n	80023de <HAL_DMAEx_MultiBufferStart_IT+0x226>
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a50      	ldr	r2, [pc, #320]	; (80024b0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d032      	beq.n	80023d8 <HAL_DMAEx_MultiBufferStart_IT+0x220>
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a4f      	ldr	r2, [pc, #316]	; (80024b4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002378:	4293      	cmp	r3, r2
 800237a:	d02a      	beq.n	80023d2 <HAL_DMAEx_MultiBufferStart_IT+0x21a>
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a4d      	ldr	r2, [pc, #308]	; (80024b8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d022      	beq.n	80023cc <HAL_DMAEx_MultiBufferStart_IT+0x214>
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a4c      	ldr	r2, [pc, #304]	; (80024bc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800238c:	4293      	cmp	r3, r2
 800238e:	d01a      	beq.n	80023c6 <HAL_DMAEx_MultiBufferStart_IT+0x20e>
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a4a      	ldr	r2, [pc, #296]	; (80024c0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d012      	beq.n	80023c0 <HAL_DMAEx_MultiBufferStart_IT+0x208>
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4a49      	ldr	r2, [pc, #292]	; (80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d00a      	beq.n	80023ba <HAL_DMAEx_MultiBufferStart_IT+0x202>
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a47      	ldr	r2, [pc, #284]	; (80024c8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d102      	bne.n	80023b4 <HAL_DMAEx_MultiBufferStart_IT+0x1fc>
 80023ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023b2:	e01e      	b.n	80023f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80023b8:	e01b      	b.n	80023f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023ba:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023be:	e018      	b.n	80023f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023c0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023c4:	e015      	b.n	80023f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023c6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80023ca:	e012      	b.n	80023f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023d0:	e00f      	b.n	80023f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023d6:	e00c      	b.n	80023f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023d8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023dc:	e009      	b.n	80023f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80023e2:	e006      	b.n	80023f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023e4:	2320      	movs	r3, #32
 80023e6:	e004      	b.n	80023f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023e8:	2320      	movs	r3, #32
 80023ea:	e002      	b.n	80023f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023ec:	2320      	movs	r3, #32
 80023ee:	e000      	b.n	80023f2 <HAL_DMAEx_MultiBufferStart_IT+0x23a>
 80023f0:	2320      	movs	r3, #32
 80023f2:	4a36      	ldr	r2, [pc, #216]	; (80024cc <HAL_DMAEx_MultiBufferStart_IT+0x314>)
 80023f4:	6093      	str	r3, [r2, #8]
 80023f6:	e0e8      	b.n	80025ca <HAL_DMAEx_MultiBufferStart_IT+0x412>
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	4b35      	ldr	r3, [pc, #212]	; (80024d4 <HAL_DMAEx_MultiBufferStart_IT+0x31c>)
 8002400:	429a      	cmp	r2, r3
 8002402:	f240 8082 	bls.w	800250a <HAL_DMAEx_MultiBufferStart_IT+0x352>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a24      	ldr	r2, [pc, #144]	; (800249c <HAL_DMAEx_MultiBufferStart_IT+0x2e4>)
 800240c:	4293      	cmp	r3, r2
 800240e:	d078      	beq.n	8002502 <HAL_DMAEx_MultiBufferStart_IT+0x34a>
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	4a22      	ldr	r2, [pc, #136]	; (80024a0 <HAL_DMAEx_MultiBufferStart_IT+0x2e8>)
 8002416:	4293      	cmp	r3, r2
 8002418:	d071      	beq.n	80024fe <HAL_DMAEx_MultiBufferStart_IT+0x346>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a21      	ldr	r2, [pc, #132]	; (80024a4 <HAL_DMAEx_MultiBufferStart_IT+0x2ec>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d06a      	beq.n	80024fa <HAL_DMAEx_MultiBufferStart_IT+0x342>
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a1f      	ldr	r2, [pc, #124]	; (80024a8 <HAL_DMAEx_MultiBufferStart_IT+0x2f0>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d063      	beq.n	80024f6 <HAL_DMAEx_MultiBufferStart_IT+0x33e>
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a1e      	ldr	r2, [pc, #120]	; (80024ac <HAL_DMAEx_MultiBufferStart_IT+0x2f4>)
 8002434:	4293      	cmp	r3, r2
 8002436:	d05b      	beq.n	80024f0 <HAL_DMAEx_MultiBufferStart_IT+0x338>
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <HAL_DMAEx_MultiBufferStart_IT+0x2f8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d053      	beq.n	80024ea <HAL_DMAEx_MultiBufferStart_IT+0x332>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_DMAEx_MultiBufferStart_IT+0x2fc>)
 8002448:	4293      	cmp	r3, r2
 800244a:	d04b      	beq.n	80024e4 <HAL_DMAEx_MultiBufferStart_IT+0x32c>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4a19      	ldr	r2, [pc, #100]	; (80024b8 <HAL_DMAEx_MultiBufferStart_IT+0x300>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d043      	beq.n	80024de <HAL_DMAEx_MultiBufferStart_IT+0x326>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4a18      	ldr	r2, [pc, #96]	; (80024bc <HAL_DMAEx_MultiBufferStart_IT+0x304>)
 800245c:	4293      	cmp	r3, r2
 800245e:	d03b      	beq.n	80024d8 <HAL_DMAEx_MultiBufferStart_IT+0x320>
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a16      	ldr	r2, [pc, #88]	; (80024c0 <HAL_DMAEx_MultiBufferStart_IT+0x308>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d012      	beq.n	8002490 <HAL_DMAEx_MultiBufferStart_IT+0x2d8>
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a15      	ldr	r2, [pc, #84]	; (80024c4 <HAL_DMAEx_MultiBufferStart_IT+0x30c>)
 8002470:	4293      	cmp	r3, r2
 8002472:	d00a      	beq.n	800248a <HAL_DMAEx_MultiBufferStart_IT+0x2d2>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a13      	ldr	r2, [pc, #76]	; (80024c8 <HAL_DMAEx_MultiBufferStart_IT+0x310>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d102      	bne.n	8002484 <HAL_DMAEx_MultiBufferStart_IT+0x2cc>
 800247e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002482:	e03f      	b.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002484:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8002488:	e03c      	b.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 800248a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800248e:	e039      	b.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002490:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002494:	e036      	b.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002496:	bf00      	nop
 8002498:	40026458 	.word	0x40026458
 800249c:	40026010 	.word	0x40026010
 80024a0:	40026410 	.word	0x40026410
 80024a4:	40026070 	.word	0x40026070
 80024a8:	40026470 	.word	0x40026470
 80024ac:	40026028 	.word	0x40026028
 80024b0:	40026428 	.word	0x40026428
 80024b4:	40026088 	.word	0x40026088
 80024b8:	40026488 	.word	0x40026488
 80024bc:	40026040 	.word	0x40026040
 80024c0:	40026440 	.word	0x40026440
 80024c4:	400260a0 	.word	0x400260a0
 80024c8:	400264a0 	.word	0x400264a0
 80024cc:	40026400 	.word	0x40026400
 80024d0:	400260b8 	.word	0x400260b8
 80024d4:	40026058 	.word	0x40026058
 80024d8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80024dc:	e012      	b.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024de:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024e2:	e00f      	b.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024e8:	e00c      	b.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024ee:	e009      	b.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80024f4:	e006      	b.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024f6:	2320      	movs	r3, #32
 80024f8:	e004      	b.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024fa:	2320      	movs	r3, #32
 80024fc:	e002      	b.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 80024fe:	2320      	movs	r3, #32
 8002500:	e000      	b.n	8002504 <HAL_DMAEx_MultiBufferStart_IT+0x34c>
 8002502:	2320      	movs	r3, #32
 8002504:	4a8c      	ldr	r2, [pc, #560]	; (8002738 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 8002506:	60d3      	str	r3, [r2, #12]
 8002508:	e05f      	b.n	80025ca <HAL_DMAEx_MultiBufferStart_IT+0x412>
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a8b      	ldr	r2, [pc, #556]	; (800273c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 8002510:	4293      	cmp	r3, r2
 8002512:	d057      	beq.n	80025c4 <HAL_DMAEx_MultiBufferStart_IT+0x40c>
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a89      	ldr	r2, [pc, #548]	; (8002740 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d050      	beq.n	80025c0 <HAL_DMAEx_MultiBufferStart_IT+0x408>
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a88      	ldr	r2, [pc, #544]	; (8002744 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d049      	beq.n	80025bc <HAL_DMAEx_MultiBufferStart_IT+0x404>
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	4a86      	ldr	r2, [pc, #536]	; (8002748 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d042      	beq.n	80025b8 <HAL_DMAEx_MultiBufferStart_IT+0x400>
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	4a85      	ldr	r2, [pc, #532]	; (800274c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d03a      	beq.n	80025b2 <HAL_DMAEx_MultiBufferStart_IT+0x3fa>
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a83      	ldr	r2, [pc, #524]	; (8002750 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d032      	beq.n	80025ac <HAL_DMAEx_MultiBufferStart_IT+0x3f4>
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4a82      	ldr	r2, [pc, #520]	; (8002754 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d02a      	beq.n	80025a6 <HAL_DMAEx_MultiBufferStart_IT+0x3ee>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a80      	ldr	r2, [pc, #512]	; (8002758 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d022      	beq.n	80025a0 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a7f      	ldr	r2, [pc, #508]	; (800275c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d01a      	beq.n	800259a <HAL_DMAEx_MultiBufferStart_IT+0x3e2>
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4a7d      	ldr	r2, [pc, #500]	; (8002760 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 800256a:	4293      	cmp	r3, r2
 800256c:	d012      	beq.n	8002594 <HAL_DMAEx_MultiBufferStart_IT+0x3dc>
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	4a7c      	ldr	r2, [pc, #496]	; (8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00a      	beq.n	800258e <HAL_DMAEx_MultiBufferStart_IT+0x3d6>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a7a      	ldr	r2, [pc, #488]	; (8002768 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d102      	bne.n	8002588 <HAL_DMAEx_MultiBufferStart_IT+0x3d0>
 8002582:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002586:	e01e      	b.n	80025c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002588:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800258c:	e01b      	b.n	80025c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800258e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002592:	e018      	b.n	80025c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 8002594:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002598:	e015      	b.n	80025c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 800259a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800259e:	e012      	b.n	80025c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80025a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025a4:	e00f      	b.n	80025c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80025a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025aa:	e00c      	b.n	80025c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80025ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025b0:	e009      	b.n	80025c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80025b2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025b6:	e006      	b.n	80025c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80025b8:	2320      	movs	r3, #32
 80025ba:	e004      	b.n	80025c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80025bc:	2320      	movs	r3, #32
 80025be:	e002      	b.n	80025c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80025c0:	2320      	movs	r3, #32
 80025c2:	e000      	b.n	80025c6 <HAL_DMAEx_MultiBufferStart_IT+0x40e>
 80025c4:	2320      	movs	r3, #32
 80025c6:	4a5c      	ldr	r2, [pc, #368]	; (8002738 <HAL_DMAEx_MultiBufferStart_IT+0x580>)
 80025c8:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	461a      	mov	r2, r3
 80025d0:	4b66      	ldr	r3, [pc, #408]	; (800276c <HAL_DMAEx_MultiBufferStart_IT+0x5b4>)
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d960      	bls.n	8002698 <HAL_DMAEx_MultiBufferStart_IT+0x4e0>
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a58      	ldr	r2, [pc, #352]	; (800273c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d057      	beq.n	8002690 <HAL_DMAEx_MultiBufferStart_IT+0x4d8>
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a56      	ldr	r2, [pc, #344]	; (8002740 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d050      	beq.n	800268c <HAL_DMAEx_MultiBufferStart_IT+0x4d4>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a55      	ldr	r2, [pc, #340]	; (8002744 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d049      	beq.n	8002688 <HAL_DMAEx_MultiBufferStart_IT+0x4d0>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	4a53      	ldr	r2, [pc, #332]	; (8002748 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80025fa:	4293      	cmp	r3, r2
 80025fc:	d042      	beq.n	8002684 <HAL_DMAEx_MultiBufferStart_IT+0x4cc>
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a52      	ldr	r2, [pc, #328]	; (800274c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 8002604:	4293      	cmp	r3, r2
 8002606:	d03a      	beq.n	800267e <HAL_DMAEx_MultiBufferStart_IT+0x4c6>
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a50      	ldr	r2, [pc, #320]	; (8002750 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d032      	beq.n	8002678 <HAL_DMAEx_MultiBufferStart_IT+0x4c0>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a4f      	ldr	r2, [pc, #316]	; (8002754 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d02a      	beq.n	8002672 <HAL_DMAEx_MultiBufferStart_IT+0x4ba>
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a4d      	ldr	r2, [pc, #308]	; (8002758 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d022      	beq.n	800266c <HAL_DMAEx_MultiBufferStart_IT+0x4b4>
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a4c      	ldr	r2, [pc, #304]	; (800275c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d01a      	beq.n	8002666 <HAL_DMAEx_MultiBufferStart_IT+0x4ae>
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a4a      	ldr	r2, [pc, #296]	; (8002760 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d012      	beq.n	8002660 <HAL_DMAEx_MultiBufferStart_IT+0x4a8>
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a49      	ldr	r2, [pc, #292]	; (8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d00a      	beq.n	800265a <HAL_DMAEx_MultiBufferStart_IT+0x4a2>
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a47      	ldr	r2, [pc, #284]	; (8002768 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d102      	bne.n	8002654 <HAL_DMAEx_MultiBufferStart_IT+0x49c>
 800264e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002652:	e01e      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002654:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002658:	e01b      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800265a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800265e:	e018      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002660:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002664:	e015      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002666:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800266a:	e012      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800266c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002670:	e00f      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002672:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002676:	e00c      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002678:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800267c:	e009      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800267e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002682:	e006      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002684:	2310      	movs	r3, #16
 8002686:	e004      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002688:	2310      	movs	r3, #16
 800268a:	e002      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 800268c:	2310      	movs	r3, #16
 800268e:	e000      	b.n	8002692 <HAL_DMAEx_MultiBufferStart_IT+0x4da>
 8002690:	2310      	movs	r3, #16
 8002692:	4a37      	ldr	r2, [pc, #220]	; (8002770 <HAL_DMAEx_MultiBufferStart_IT+0x5b8>)
 8002694:	60d3      	str	r3, [r2, #12]
 8002696:	e14f      	b.n	8002938 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	461a      	mov	r2, r3
 800269e:	4b35      	ldr	r3, [pc, #212]	; (8002774 <HAL_DMAEx_MultiBufferStart_IT+0x5bc>)
 80026a0:	429a      	cmp	r2, r3
 80026a2:	f240 8082 	bls.w	80027aa <HAL_DMAEx_MultiBufferStart_IT+0x5f2>
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a24      	ldr	r2, [pc, #144]	; (800273c <HAL_DMAEx_MultiBufferStart_IT+0x584>)
 80026ac:	4293      	cmp	r3, r2
 80026ae:	d078      	beq.n	80027a2 <HAL_DMAEx_MultiBufferStart_IT+0x5ea>
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a22      	ldr	r2, [pc, #136]	; (8002740 <HAL_DMAEx_MultiBufferStart_IT+0x588>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d071      	beq.n	800279e <HAL_DMAEx_MultiBufferStart_IT+0x5e6>
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	4a21      	ldr	r2, [pc, #132]	; (8002744 <HAL_DMAEx_MultiBufferStart_IT+0x58c>)
 80026c0:	4293      	cmp	r3, r2
 80026c2:	d06a      	beq.n	800279a <HAL_DMAEx_MultiBufferStart_IT+0x5e2>
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a1f      	ldr	r2, [pc, #124]	; (8002748 <HAL_DMAEx_MultiBufferStart_IT+0x590>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d063      	beq.n	8002796 <HAL_DMAEx_MultiBufferStart_IT+0x5de>
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a1e      	ldr	r2, [pc, #120]	; (800274c <HAL_DMAEx_MultiBufferStart_IT+0x594>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d05b      	beq.n	8002790 <HAL_DMAEx_MultiBufferStart_IT+0x5d8>
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a1c      	ldr	r2, [pc, #112]	; (8002750 <HAL_DMAEx_MultiBufferStart_IT+0x598>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d053      	beq.n	800278a <HAL_DMAEx_MultiBufferStart_IT+0x5d2>
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a1b      	ldr	r2, [pc, #108]	; (8002754 <HAL_DMAEx_MultiBufferStart_IT+0x59c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d04b      	beq.n	8002784 <HAL_DMAEx_MultiBufferStart_IT+0x5cc>
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a19      	ldr	r2, [pc, #100]	; (8002758 <HAL_DMAEx_MultiBufferStart_IT+0x5a0>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d043      	beq.n	800277e <HAL_DMAEx_MultiBufferStart_IT+0x5c6>
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4a18      	ldr	r2, [pc, #96]	; (800275c <HAL_DMAEx_MultiBufferStart_IT+0x5a4>)
 80026fc:	4293      	cmp	r3, r2
 80026fe:	d03b      	beq.n	8002778 <HAL_DMAEx_MultiBufferStart_IT+0x5c0>
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a16      	ldr	r2, [pc, #88]	; (8002760 <HAL_DMAEx_MultiBufferStart_IT+0x5a8>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d012      	beq.n	8002730 <HAL_DMAEx_MultiBufferStart_IT+0x578>
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a15      	ldr	r2, [pc, #84]	; (8002764 <HAL_DMAEx_MultiBufferStart_IT+0x5ac>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d00a      	beq.n	800272a <HAL_DMAEx_MultiBufferStart_IT+0x572>
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a13      	ldr	r2, [pc, #76]	; (8002768 <HAL_DMAEx_MultiBufferStart_IT+0x5b0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d102      	bne.n	8002724 <HAL_DMAEx_MultiBufferStart_IT+0x56c>
 800271e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002722:	e03f      	b.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002724:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002728:	e03c      	b.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800272a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800272e:	e039      	b.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002730:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002734:	e036      	b.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002736:	bf00      	nop
 8002738:	40026000 	.word	0x40026000
 800273c:	40026010 	.word	0x40026010
 8002740:	40026410 	.word	0x40026410
 8002744:	40026070 	.word	0x40026070
 8002748:	40026470 	.word	0x40026470
 800274c:	40026028 	.word	0x40026028
 8002750:	40026428 	.word	0x40026428
 8002754:	40026088 	.word	0x40026088
 8002758:	40026488 	.word	0x40026488
 800275c:	40026040 	.word	0x40026040
 8002760:	40026440 	.word	0x40026440
 8002764:	400260a0 	.word	0x400260a0
 8002768:	400264a0 	.word	0x400264a0
 800276c:	40026458 	.word	0x40026458
 8002770:	40026400 	.word	0x40026400
 8002774:	400260b8 	.word	0x400260b8
 8002778:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800277c:	e012      	b.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800277e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002782:	e00f      	b.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002784:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002788:	e00c      	b.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800278a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800278e:	e009      	b.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002790:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002794:	e006      	b.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 8002796:	2310      	movs	r3, #16
 8002798:	e004      	b.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800279a:	2310      	movs	r3, #16
 800279c:	e002      	b.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 800279e:	2310      	movs	r3, #16
 80027a0:	e000      	b.n	80027a4 <HAL_DMAEx_MultiBufferStart_IT+0x5ec>
 80027a2:	2310      	movs	r3, #16
 80027a4:	4a8c      	ldr	r2, [pc, #560]	; (80029d8 <HAL_DMAEx_MultiBufferStart_IT+0x820>)
 80027a6:	6093      	str	r3, [r2, #8]
 80027a8:	e0c6      	b.n	8002938 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	4b8a      	ldr	r3, [pc, #552]	; (80029dc <HAL_DMAEx_MultiBufferStart_IT+0x824>)
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d960      	bls.n	8002878 <HAL_DMAEx_MultiBufferStart_IT+0x6c0>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a89      	ldr	r2, [pc, #548]	; (80029e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d057      	beq.n	8002870 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a87      	ldr	r2, [pc, #540]	; (80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d050      	beq.n	800286c <HAL_DMAEx_MultiBufferStart_IT+0x6b4>
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a86      	ldr	r2, [pc, #536]	; (80029e8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	d049      	beq.n	8002868 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a84      	ldr	r2, [pc, #528]	; (80029ec <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d042      	beq.n	8002864 <HAL_DMAEx_MultiBufferStart_IT+0x6ac>
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a83      	ldr	r2, [pc, #524]	; (80029f0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d03a      	beq.n	800285e <HAL_DMAEx_MultiBufferStart_IT+0x6a6>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a81      	ldr	r2, [pc, #516]	; (80029f4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d032      	beq.n	8002858 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a80      	ldr	r2, [pc, #512]	; (80029f8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d02a      	beq.n	8002852 <HAL_DMAEx_MultiBufferStart_IT+0x69a>
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a7e      	ldr	r2, [pc, #504]	; (80029fc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d022      	beq.n	800284c <HAL_DMAEx_MultiBufferStart_IT+0x694>
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a7d      	ldr	r2, [pc, #500]	; (8002a00 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d01a      	beq.n	8002846 <HAL_DMAEx_MultiBufferStart_IT+0x68e>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a7b      	ldr	r2, [pc, #492]	; (8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d012      	beq.n	8002840 <HAL_DMAEx_MultiBufferStart_IT+0x688>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a7a      	ldr	r2, [pc, #488]	; (8002a08 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d00a      	beq.n	800283a <HAL_DMAEx_MultiBufferStart_IT+0x682>
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	4a78      	ldr	r2, [pc, #480]	; (8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d102      	bne.n	8002834 <HAL_DMAEx_MultiBufferStart_IT+0x67c>
 800282e:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002832:	e01e      	b.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002834:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002838:	e01b      	b.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800283a:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800283e:	e018      	b.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002840:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002844:	e015      	b.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002846:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800284a:	e012      	b.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800284c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002850:	e00f      	b.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002852:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002856:	e00c      	b.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002858:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800285c:	e009      	b.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800285e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002862:	e006      	b.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002864:	2310      	movs	r3, #16
 8002866:	e004      	b.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002868:	2310      	movs	r3, #16
 800286a:	e002      	b.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 800286c:	2310      	movs	r3, #16
 800286e:	e000      	b.n	8002872 <HAL_DMAEx_MultiBufferStart_IT+0x6ba>
 8002870:	2310      	movs	r3, #16
 8002872:	4a67      	ldr	r2, [pc, #412]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002874:	60d3      	str	r3, [r2, #12]
 8002876:	e05f      	b.n	8002938 <HAL_DMAEx_MultiBufferStart_IT+0x780>
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a58      	ldr	r2, [pc, #352]	; (80029e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d057      	beq.n	8002932 <HAL_DMAEx_MultiBufferStart_IT+0x77a>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a57      	ldr	r2, [pc, #348]	; (80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d050      	beq.n	800292e <HAL_DMAEx_MultiBufferStart_IT+0x776>
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a55      	ldr	r2, [pc, #340]	; (80029e8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d049      	beq.n	800292a <HAL_DMAEx_MultiBufferStart_IT+0x772>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a54      	ldr	r2, [pc, #336]	; (80029ec <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d042      	beq.n	8002926 <HAL_DMAEx_MultiBufferStart_IT+0x76e>
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a52      	ldr	r2, [pc, #328]	; (80029f0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d03a      	beq.n	8002920 <HAL_DMAEx_MultiBufferStart_IT+0x768>
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a51      	ldr	r2, [pc, #324]	; (80029f4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d032      	beq.n	800291a <HAL_DMAEx_MultiBufferStart_IT+0x762>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a4f      	ldr	r2, [pc, #316]	; (80029f8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d02a      	beq.n	8002914 <HAL_DMAEx_MultiBufferStart_IT+0x75c>
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a4e      	ldr	r2, [pc, #312]	; (80029fc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d022      	beq.n	800290e <HAL_DMAEx_MultiBufferStart_IT+0x756>
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a4c      	ldr	r2, [pc, #304]	; (8002a00 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d01a      	beq.n	8002908 <HAL_DMAEx_MultiBufferStart_IT+0x750>
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4a4b      	ldr	r2, [pc, #300]	; (8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d012      	beq.n	8002902 <HAL_DMAEx_MultiBufferStart_IT+0x74a>
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a49      	ldr	r2, [pc, #292]	; (8002a08 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d00a      	beq.n	80028fc <HAL_DMAEx_MultiBufferStart_IT+0x744>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a48      	ldr	r2, [pc, #288]	; (8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d102      	bne.n	80028f6 <HAL_DMAEx_MultiBufferStart_IT+0x73e>
 80028f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80028f4:	e01e      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028f6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80028fa:	e01b      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 80028fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002900:	e018      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002902:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002906:	e015      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002908:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800290c:	e012      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800290e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002912:	e00f      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002914:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002918:	e00c      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800291a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800291e:	e009      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002920:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002924:	e006      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002926:	2310      	movs	r3, #16
 8002928:	e004      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800292a:	2310      	movs	r3, #16
 800292c:	e002      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 800292e:	2310      	movs	r3, #16
 8002930:	e000      	b.n	8002934 <HAL_DMAEx_MultiBufferStart_IT+0x77c>
 8002932:	2310      	movs	r3, #16
 8002934:	4a36      	ldr	r2, [pc, #216]	; (8002a10 <HAL_DMAEx_MultiBufferStart_IT+0x858>)
 8002936:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_TE_FLAG_INDEX(hdma));
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	461a      	mov	r2, r3
 800293e:	4b35      	ldr	r3, [pc, #212]	; (8002a14 <HAL_DMAEx_MultiBufferStart_IT+0x85c>)
 8002940:	429a      	cmp	r2, r3
 8002942:	f240 8082 	bls.w	8002a4a <HAL_DMAEx_MultiBufferStart_IT+0x892>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a25      	ldr	r2, [pc, #148]	; (80029e0 <HAL_DMAEx_MultiBufferStart_IT+0x828>)
 800294c:	4293      	cmp	r3, r2
 800294e:	d078      	beq.n	8002a42 <HAL_DMAEx_MultiBufferStart_IT+0x88a>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a23      	ldr	r2, [pc, #140]	; (80029e4 <HAL_DMAEx_MultiBufferStart_IT+0x82c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d071      	beq.n	8002a3e <HAL_DMAEx_MultiBufferStart_IT+0x886>
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a22      	ldr	r2, [pc, #136]	; (80029e8 <HAL_DMAEx_MultiBufferStart_IT+0x830>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d06a      	beq.n	8002a3a <HAL_DMAEx_MultiBufferStart_IT+0x882>
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a20      	ldr	r2, [pc, #128]	; (80029ec <HAL_DMAEx_MultiBufferStart_IT+0x834>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d063      	beq.n	8002a36 <HAL_DMAEx_MultiBufferStart_IT+0x87e>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	4a1f      	ldr	r2, [pc, #124]	; (80029f0 <HAL_DMAEx_MultiBufferStart_IT+0x838>)
 8002974:	4293      	cmp	r3, r2
 8002976:	d05b      	beq.n	8002a30 <HAL_DMAEx_MultiBufferStart_IT+0x878>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	4a1d      	ldr	r2, [pc, #116]	; (80029f4 <HAL_DMAEx_MultiBufferStart_IT+0x83c>)
 800297e:	4293      	cmp	r3, r2
 8002980:	d053      	beq.n	8002a2a <HAL_DMAEx_MultiBufferStart_IT+0x872>
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4a1c      	ldr	r2, [pc, #112]	; (80029f8 <HAL_DMAEx_MultiBufferStart_IT+0x840>)
 8002988:	4293      	cmp	r3, r2
 800298a:	d04b      	beq.n	8002a24 <HAL_DMAEx_MultiBufferStart_IT+0x86c>
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1a      	ldr	r2, [pc, #104]	; (80029fc <HAL_DMAEx_MultiBufferStart_IT+0x844>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d043      	beq.n	8002a1e <HAL_DMAEx_MultiBufferStart_IT+0x866>
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4a19      	ldr	r2, [pc, #100]	; (8002a00 <HAL_DMAEx_MultiBufferStart_IT+0x848>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d03b      	beq.n	8002a18 <HAL_DMAEx_MultiBufferStart_IT+0x860>
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a17      	ldr	r2, [pc, #92]	; (8002a04 <HAL_DMAEx_MultiBufferStart_IT+0x84c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d012      	beq.n	80029d0 <HAL_DMAEx_MultiBufferStart_IT+0x818>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a16      	ldr	r2, [pc, #88]	; (8002a08 <HAL_DMAEx_MultiBufferStart_IT+0x850>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d00a      	beq.n	80029ca <HAL_DMAEx_MultiBufferStart_IT+0x812>
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a14      	ldr	r2, [pc, #80]	; (8002a0c <HAL_DMAEx_MultiBufferStart_IT+0x854>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d102      	bne.n	80029c4 <HAL_DMAEx_MultiBufferStart_IT+0x80c>
 80029be:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029c2:	e03f      	b.n	8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80029c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029c8:	e03c      	b.n	8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80029ca:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029ce:	e039      	b.n	8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80029d0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80029d4:	e036      	b.n	8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 80029d6:	bf00      	nop
 80029d8:	40026400 	.word	0x40026400
 80029dc:	40026058 	.word	0x40026058
 80029e0:	40026010 	.word	0x40026010
 80029e4:	40026410 	.word	0x40026410
 80029e8:	40026070 	.word	0x40026070
 80029ec:	40026470 	.word	0x40026470
 80029f0:	40026028 	.word	0x40026028
 80029f4:	40026428 	.word	0x40026428
 80029f8:	40026088 	.word	0x40026088
 80029fc:	40026488 	.word	0x40026488
 8002a00:	40026040 	.word	0x40026040
 8002a04:	40026440 	.word	0x40026440
 8002a08:	400260a0 	.word	0x400260a0
 8002a0c:	400264a0 	.word	0x400264a0
 8002a10:	40026000 	.word	0x40026000
 8002a14:	40026458 	.word	0x40026458
 8002a18:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002a1c:	e012      	b.n	8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002a1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a22:	e00f      	b.n	8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002a24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a28:	e00c      	b.n	8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002a2a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a2e:	e009      	b.n	8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002a30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002a34:	e006      	b.n	8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002a36:	2308      	movs	r3, #8
 8002a38:	e004      	b.n	8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002a3a:	2308      	movs	r3, #8
 8002a3c:	e002      	b.n	8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002a3e:	2308      	movs	r3, #8
 8002a40:	e000      	b.n	8002a44 <HAL_DMAEx_MultiBufferStart_IT+0x88c>
 8002a42:	2308      	movs	r3, #8
 8002a44:	4a8c      	ldr	r2, [pc, #560]	; (8002c78 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002a46:	60d3      	str	r3, [r2, #12]
 8002a48:	e14e      	b.n	8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	461a      	mov	r2, r3
 8002a50:	4b8a      	ldr	r3, [pc, #552]	; (8002c7c <HAL_DMAEx_MultiBufferStart_IT+0xac4>)
 8002a52:	429a      	cmp	r2, r3
 8002a54:	d960      	bls.n	8002b18 <HAL_DMAEx_MultiBufferStart_IT+0x960>
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a89      	ldr	r2, [pc, #548]	; (8002c80 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d057      	beq.n	8002b10 <HAL_DMAEx_MultiBufferStart_IT+0x958>
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a87      	ldr	r2, [pc, #540]	; (8002c84 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d050      	beq.n	8002b0c <HAL_DMAEx_MultiBufferStart_IT+0x954>
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a86      	ldr	r2, [pc, #536]	; (8002c88 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d049      	beq.n	8002b08 <HAL_DMAEx_MultiBufferStart_IT+0x950>
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a84      	ldr	r2, [pc, #528]	; (8002c8c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d042      	beq.n	8002b04 <HAL_DMAEx_MultiBufferStart_IT+0x94c>
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a83      	ldr	r2, [pc, #524]	; (8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d03a      	beq.n	8002afe <HAL_DMAEx_MultiBufferStart_IT+0x946>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a81      	ldr	r2, [pc, #516]	; (8002c94 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d032      	beq.n	8002af8 <HAL_DMAEx_MultiBufferStart_IT+0x940>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	4a80      	ldr	r2, [pc, #512]	; (8002c98 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002a98:	4293      	cmp	r3, r2
 8002a9a:	d02a      	beq.n	8002af2 <HAL_DMAEx_MultiBufferStart_IT+0x93a>
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4a7e      	ldr	r2, [pc, #504]	; (8002c9c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d022      	beq.n	8002aec <HAL_DMAEx_MultiBufferStart_IT+0x934>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a7d      	ldr	r2, [pc, #500]	; (8002ca0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d01a      	beq.n	8002ae6 <HAL_DMAEx_MultiBufferStart_IT+0x92e>
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a7b      	ldr	r2, [pc, #492]	; (8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d012      	beq.n	8002ae0 <HAL_DMAEx_MultiBufferStart_IT+0x928>
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	4a7a      	ldr	r2, [pc, #488]	; (8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002ac0:	4293      	cmp	r3, r2
 8002ac2:	d00a      	beq.n	8002ada <HAL_DMAEx_MultiBufferStart_IT+0x922>
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4a78      	ldr	r2, [pc, #480]	; (8002cac <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d102      	bne.n	8002ad4 <HAL_DMAEx_MultiBufferStart_IT+0x91c>
 8002ace:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ad2:	e01e      	b.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002ad4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ad8:	e01b      	b.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002ada:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ade:	e018      	b.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002ae0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ae4:	e015      	b.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002ae6:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002aea:	e012      	b.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002aec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af0:	e00f      	b.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002af2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002af6:	e00c      	b.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002af8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002afc:	e009      	b.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002afe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b02:	e006      	b.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002b04:	2308      	movs	r3, #8
 8002b06:	e004      	b.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002b08:	2308      	movs	r3, #8
 8002b0a:	e002      	b.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002b0c:	2308      	movs	r3, #8
 8002b0e:	e000      	b.n	8002b12 <HAL_DMAEx_MultiBufferStart_IT+0x95a>
 8002b10:	2308      	movs	r3, #8
 8002b12:	4a59      	ldr	r2, [pc, #356]	; (8002c78 <HAL_DMAEx_MultiBufferStart_IT+0xac0>)
 8002b14:	6093      	str	r3, [r2, #8]
 8002b16:	e0e7      	b.n	8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	4b64      	ldr	r3, [pc, #400]	; (8002cb0 <HAL_DMAEx_MultiBufferStart_IT+0xaf8>)
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d960      	bls.n	8002be6 <HAL_DMAEx_MultiBufferStart_IT+0xa2e>
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a55      	ldr	r2, [pc, #340]	; (8002c80 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002b2a:	4293      	cmp	r3, r2
 8002b2c:	d057      	beq.n	8002bde <HAL_DMAEx_MultiBufferStart_IT+0xa26>
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	4a54      	ldr	r2, [pc, #336]	; (8002c84 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d050      	beq.n	8002bda <HAL_DMAEx_MultiBufferStart_IT+0xa22>
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a52      	ldr	r2, [pc, #328]	; (8002c88 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d049      	beq.n	8002bd6 <HAL_DMAEx_MultiBufferStart_IT+0xa1e>
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4a51      	ldr	r2, [pc, #324]	; (8002c8c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d042      	beq.n	8002bd2 <HAL_DMAEx_MultiBufferStart_IT+0xa1a>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a4f      	ldr	r2, [pc, #316]	; (8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d03a      	beq.n	8002bcc <HAL_DMAEx_MultiBufferStart_IT+0xa14>
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4a4e      	ldr	r2, [pc, #312]	; (8002c94 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002b5c:	4293      	cmp	r3, r2
 8002b5e:	d032      	beq.n	8002bc6 <HAL_DMAEx_MultiBufferStart_IT+0xa0e>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	4a4c      	ldr	r2, [pc, #304]	; (8002c98 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d02a      	beq.n	8002bc0 <HAL_DMAEx_MultiBufferStart_IT+0xa08>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a4b      	ldr	r2, [pc, #300]	; (8002c9c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d022      	beq.n	8002bba <HAL_DMAEx_MultiBufferStart_IT+0xa02>
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a49      	ldr	r2, [pc, #292]	; (8002ca0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d01a      	beq.n	8002bb4 <HAL_DMAEx_MultiBufferStart_IT+0x9fc>
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a48      	ldr	r2, [pc, #288]	; (8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002b84:	4293      	cmp	r3, r2
 8002b86:	d012      	beq.n	8002bae <HAL_DMAEx_MultiBufferStart_IT+0x9f6>
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a46      	ldr	r2, [pc, #280]	; (8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d00a      	beq.n	8002ba8 <HAL_DMAEx_MultiBufferStart_IT+0x9f0>
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a45      	ldr	r2, [pc, #276]	; (8002cac <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d102      	bne.n	8002ba2 <HAL_DMAEx_MultiBufferStart_IT+0x9ea>
 8002b9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002ba0:	e01e      	b.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002ba2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ba6:	e01b      	b.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002ba8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002bac:	e018      	b.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002bae:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002bb2:	e015      	b.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002bb4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002bb8:	e012      	b.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002bba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bbe:	e00f      	b.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002bc0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bc4:	e00c      	b.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002bc6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bca:	e009      	b.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002bcc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002bd0:	e006      	b.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002bd2:	2308      	movs	r3, #8
 8002bd4:	e004      	b.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002bd6:	2308      	movs	r3, #8
 8002bd8:	e002      	b.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002bda:	2308      	movs	r3, #8
 8002bdc:	e000      	b.n	8002be0 <HAL_DMAEx_MultiBufferStart_IT+0xa28>
 8002bde:	2308      	movs	r3, #8
 8002be0:	4a34      	ldr	r2, [pc, #208]	; (8002cb4 <HAL_DMAEx_MultiBufferStart_IT+0xafc>)
 8002be2:	60d3      	str	r3, [r2, #12]
 8002be4:	e080      	b.n	8002ce8 <HAL_DMAEx_MultiBufferStart_IT+0xb30>
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a25      	ldr	r2, [pc, #148]	; (8002c80 <HAL_DMAEx_MultiBufferStart_IT+0xac8>)
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d078      	beq.n	8002ce2 <HAL_DMAEx_MultiBufferStart_IT+0xb2a>
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a23      	ldr	r2, [pc, #140]	; (8002c84 <HAL_DMAEx_MultiBufferStart_IT+0xacc>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d071      	beq.n	8002cde <HAL_DMAEx_MultiBufferStart_IT+0xb26>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <HAL_DMAEx_MultiBufferStart_IT+0xad0>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d06a      	beq.n	8002cda <HAL_DMAEx_MultiBufferStart_IT+0xb22>
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a20      	ldr	r2, [pc, #128]	; (8002c8c <HAL_DMAEx_MultiBufferStart_IT+0xad4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d063      	beq.n	8002cd6 <HAL_DMAEx_MultiBufferStart_IT+0xb1e>
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <HAL_DMAEx_MultiBufferStart_IT+0xad8>)
 8002c14:	4293      	cmp	r3, r2
 8002c16:	d05b      	beq.n	8002cd0 <HAL_DMAEx_MultiBufferStart_IT+0xb18>
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	4a1d      	ldr	r2, [pc, #116]	; (8002c94 <HAL_DMAEx_MultiBufferStart_IT+0xadc>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d053      	beq.n	8002cca <HAL_DMAEx_MultiBufferStart_IT+0xb12>
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4a1c      	ldr	r2, [pc, #112]	; (8002c98 <HAL_DMAEx_MultiBufferStart_IT+0xae0>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d04b      	beq.n	8002cc4 <HAL_DMAEx_MultiBufferStart_IT+0xb0c>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a1a      	ldr	r2, [pc, #104]	; (8002c9c <HAL_DMAEx_MultiBufferStart_IT+0xae4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d043      	beq.n	8002cbe <HAL_DMAEx_MultiBufferStart_IT+0xb06>
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a19      	ldr	r2, [pc, #100]	; (8002ca0 <HAL_DMAEx_MultiBufferStart_IT+0xae8>)
 8002c3c:	4293      	cmp	r3, r2
 8002c3e:	d03b      	beq.n	8002cb8 <HAL_DMAEx_MultiBufferStart_IT+0xb00>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a17      	ldr	r2, [pc, #92]	; (8002ca4 <HAL_DMAEx_MultiBufferStart_IT+0xaec>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d012      	beq.n	8002c70 <HAL_DMAEx_MultiBufferStart_IT+0xab8>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a16      	ldr	r2, [pc, #88]	; (8002ca8 <HAL_DMAEx_MultiBufferStart_IT+0xaf0>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d00a      	beq.n	8002c6a <HAL_DMAEx_MultiBufferStart_IT+0xab2>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a14      	ldr	r2, [pc, #80]	; (8002cac <HAL_DMAEx_MultiBufferStart_IT+0xaf4>)
 8002c5a:	4293      	cmp	r3, r2
 8002c5c:	d102      	bne.n	8002c64 <HAL_DMAEx_MultiBufferStart_IT+0xaac>
 8002c5e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c62:	e03f      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c64:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c68:	e03c      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c6a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c6e:	e039      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002c74:	e036      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002c76:	bf00      	nop
 8002c78:	40026400 	.word	0x40026400
 8002c7c:	400260b8 	.word	0x400260b8
 8002c80:	40026010 	.word	0x40026010
 8002c84:	40026410 	.word	0x40026410
 8002c88:	40026070 	.word	0x40026070
 8002c8c:	40026470 	.word	0x40026470
 8002c90:	40026028 	.word	0x40026028
 8002c94:	40026428 	.word	0x40026428
 8002c98:	40026088 	.word	0x40026088
 8002c9c:	40026488 	.word	0x40026488
 8002ca0:	40026040 	.word	0x40026040
 8002ca4:	40026440 	.word	0x40026440
 8002ca8:	400260a0 	.word	0x400260a0
 8002cac:	400264a0 	.word	0x400264a0
 8002cb0:	40026058 	.word	0x40026058
 8002cb4:	40026000 	.word	0x40026000
 8002cb8:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002cbc:	e012      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cc2:	e00f      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002cc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cc8:	e00c      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002cca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cce:	e009      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cd4:	e006      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002cd6:	2308      	movs	r3, #8
 8002cd8:	e004      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002cda:	2308      	movs	r3, #8
 8002cdc:	e002      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002cde:	2308      	movs	r3, #8
 8002ce0:	e000      	b.n	8002ce4 <HAL_DMAEx_MultiBufferStart_IT+0xb2c>
 8002ce2:	2308      	movs	r3, #8
 8002ce4:	4a8a      	ldr	r2, [pc, #552]	; (8002f10 <HAL_DMAEx_MultiBufferStart_IT+0xd58>)
 8002ce6:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_DME_FLAG_INDEX(hdma));
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	461a      	mov	r2, r3
 8002cee:	4b89      	ldr	r3, [pc, #548]	; (8002f14 <HAL_DMAEx_MultiBufferStart_IT+0xd5c>)
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d960      	bls.n	8002db6 <HAL_DMAEx_MultiBufferStart_IT+0xbfe>
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a87      	ldr	r2, [pc, #540]	; (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d057      	beq.n	8002dae <HAL_DMAEx_MultiBufferStart_IT+0xbf6>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a86      	ldr	r2, [pc, #536]	; (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d050      	beq.n	8002daa <HAL_DMAEx_MultiBufferStart_IT+0xbf2>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a84      	ldr	r2, [pc, #528]	; (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d049      	beq.n	8002da6 <HAL_DMAEx_MultiBufferStart_IT+0xbee>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a83      	ldr	r2, [pc, #524]	; (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d042      	beq.n	8002da2 <HAL_DMAEx_MultiBufferStart_IT+0xbea>
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a81      	ldr	r2, [pc, #516]	; (8002f28 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002d22:	4293      	cmp	r3, r2
 8002d24:	d03a      	beq.n	8002d9c <HAL_DMAEx_MultiBufferStart_IT+0xbe4>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a80      	ldr	r2, [pc, #512]	; (8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d032      	beq.n	8002d96 <HAL_DMAEx_MultiBufferStart_IT+0xbde>
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a7e      	ldr	r2, [pc, #504]	; (8002f30 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d02a      	beq.n	8002d90 <HAL_DMAEx_MultiBufferStart_IT+0xbd8>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a7d      	ldr	r2, [pc, #500]	; (8002f34 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d022      	beq.n	8002d8a <HAL_DMAEx_MultiBufferStart_IT+0xbd2>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4a7b      	ldr	r2, [pc, #492]	; (8002f38 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d01a      	beq.n	8002d84 <HAL_DMAEx_MultiBufferStart_IT+0xbcc>
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	4a7a      	ldr	r2, [pc, #488]	; (8002f3c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d012      	beq.n	8002d7e <HAL_DMAEx_MultiBufferStart_IT+0xbc6>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a78      	ldr	r2, [pc, #480]	; (8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d00a      	beq.n	8002d78 <HAL_DMAEx_MultiBufferStart_IT+0xbc0>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	4a77      	ldr	r2, [pc, #476]	; (8002f44 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002d68:	4293      	cmp	r3, r2
 8002d6a:	d102      	bne.n	8002d72 <HAL_DMAEx_MultiBufferStart_IT+0xbba>
 8002d6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d70:	e01e      	b.n	8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d72:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002d76:	e01b      	b.n	8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d78:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d7c:	e018      	b.n	8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d7e:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d82:	e015      	b.n	8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d84:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d88:	e012      	b.n	8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d8e:	e00f      	b.n	8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d94:	e00c      	b.n	8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d96:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002d9a:	e009      	b.n	8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002d9c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002da0:	e006      	b.n	8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002da2:	2304      	movs	r3, #4
 8002da4:	e004      	b.n	8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002da6:	2304      	movs	r3, #4
 8002da8:	e002      	b.n	8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002daa:	2304      	movs	r3, #4
 8002dac:	e000      	b.n	8002db0 <HAL_DMAEx_MultiBufferStart_IT+0xbf8>
 8002dae:	2304      	movs	r3, #4
 8002db0:	4a65      	ldr	r2, [pc, #404]	; (8002f48 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002db2:	60d3      	str	r3, [r2, #12]
 8002db4:	e150      	b.n	8003058 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	461a      	mov	r2, r3
 8002dbc:	4b63      	ldr	r3, [pc, #396]	; (8002f4c <HAL_DMAEx_MultiBufferStart_IT+0xd94>)
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	d960      	bls.n	8002e84 <HAL_DMAEx_MultiBufferStart_IT+0xccc>
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a54      	ldr	r2, [pc, #336]	; (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d057      	beq.n	8002e7c <HAL_DMAEx_MultiBufferStart_IT+0xcc4>
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a52      	ldr	r2, [pc, #328]	; (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d050      	beq.n	8002e78 <HAL_DMAEx_MultiBufferStart_IT+0xcc0>
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	4a51      	ldr	r2, [pc, #324]	; (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d049      	beq.n	8002e74 <HAL_DMAEx_MultiBufferStart_IT+0xcbc>
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4a4f      	ldr	r2, [pc, #316]	; (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d042      	beq.n	8002e70 <HAL_DMAEx_MultiBufferStart_IT+0xcb8>
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a4e      	ldr	r2, [pc, #312]	; (8002f28 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002df0:	4293      	cmp	r3, r2
 8002df2:	d03a      	beq.n	8002e6a <HAL_DMAEx_MultiBufferStart_IT+0xcb2>
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a4c      	ldr	r2, [pc, #304]	; (8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d032      	beq.n	8002e64 <HAL_DMAEx_MultiBufferStart_IT+0xcac>
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	4a4b      	ldr	r2, [pc, #300]	; (8002f30 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d02a      	beq.n	8002e5e <HAL_DMAEx_MultiBufferStart_IT+0xca6>
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	4a49      	ldr	r2, [pc, #292]	; (8002f34 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d022      	beq.n	8002e58 <HAL_DMAEx_MultiBufferStart_IT+0xca0>
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	4a48      	ldr	r2, [pc, #288]	; (8002f38 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002e18:	4293      	cmp	r3, r2
 8002e1a:	d01a      	beq.n	8002e52 <HAL_DMAEx_MultiBufferStart_IT+0xc9a>
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a46      	ldr	r2, [pc, #280]	; (8002f3c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002e22:	4293      	cmp	r3, r2
 8002e24:	d012      	beq.n	8002e4c <HAL_DMAEx_MultiBufferStart_IT+0xc94>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a45      	ldr	r2, [pc, #276]	; (8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d00a      	beq.n	8002e46 <HAL_DMAEx_MultiBufferStart_IT+0xc8e>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a43      	ldr	r2, [pc, #268]	; (8002f44 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d102      	bne.n	8002e40 <HAL_DMAEx_MultiBufferStart_IT+0xc88>
 8002e3a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e3e:	e01e      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e44:	e01b      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e46:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e4a:	e018      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e50:	e015      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e52:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002e56:	e012      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e58:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e5c:	e00f      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e62:	e00c      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e68:	e009      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e6a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002e6e:	e006      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e70:	2304      	movs	r3, #4
 8002e72:	e004      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e74:	2304      	movs	r3, #4
 8002e76:	e002      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e000      	b.n	8002e7e <HAL_DMAEx_MultiBufferStart_IT+0xcc6>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	4a32      	ldr	r2, [pc, #200]	; (8002f48 <HAL_DMAEx_MultiBufferStart_IT+0xd90>)
 8002e80:	6093      	str	r3, [r2, #8]
 8002e82:	e0e9      	b.n	8003058 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	461a      	mov	r2, r3
 8002e8a:	4b31      	ldr	r3, [pc, #196]	; (8002f50 <HAL_DMAEx_MultiBufferStart_IT+0xd98>)
 8002e8c:	429a      	cmp	r2, r3
 8002e8e:	f240 8083 	bls.w	8002f98 <HAL_DMAEx_MultiBufferStart_IT+0xde0>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a20      	ldr	r2, [pc, #128]	; (8002f18 <HAL_DMAEx_MultiBufferStart_IT+0xd60>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d079      	beq.n	8002f90 <HAL_DMAEx_MultiBufferStart_IT+0xdd8>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4a1e      	ldr	r2, [pc, #120]	; (8002f1c <HAL_DMAEx_MultiBufferStart_IT+0xd64>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d072      	beq.n	8002f8c <HAL_DMAEx_MultiBufferStart_IT+0xdd4>
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a1d      	ldr	r2, [pc, #116]	; (8002f20 <HAL_DMAEx_MultiBufferStart_IT+0xd68>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d06b      	beq.n	8002f88 <HAL_DMAEx_MultiBufferStart_IT+0xdd0>
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a1b      	ldr	r2, [pc, #108]	; (8002f24 <HAL_DMAEx_MultiBufferStart_IT+0xd6c>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d064      	beq.n	8002f84 <HAL_DMAEx_MultiBufferStart_IT+0xdcc>
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4a1a      	ldr	r2, [pc, #104]	; (8002f28 <HAL_DMAEx_MultiBufferStart_IT+0xd70>)
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d05c      	beq.n	8002f7e <HAL_DMAEx_MultiBufferStart_IT+0xdc6>
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a18      	ldr	r2, [pc, #96]	; (8002f2c <HAL_DMAEx_MultiBufferStart_IT+0xd74>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d054      	beq.n	8002f78 <HAL_DMAEx_MultiBufferStart_IT+0xdc0>
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <HAL_DMAEx_MultiBufferStart_IT+0xd78>)
 8002ed4:	4293      	cmp	r3, r2
 8002ed6:	d04c      	beq.n	8002f72 <HAL_DMAEx_MultiBufferStart_IT+0xdba>
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a15      	ldr	r2, [pc, #84]	; (8002f34 <HAL_DMAEx_MultiBufferStart_IT+0xd7c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d044      	beq.n	8002f6c <HAL_DMAEx_MultiBufferStart_IT+0xdb4>
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a14      	ldr	r2, [pc, #80]	; (8002f38 <HAL_DMAEx_MultiBufferStart_IT+0xd80>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d03c      	beq.n	8002f66 <HAL_DMAEx_MultiBufferStart_IT+0xdae>
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a12      	ldr	r2, [pc, #72]	; (8002f3c <HAL_DMAEx_MultiBufferStart_IT+0xd84>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d034      	beq.n	8002f60 <HAL_DMAEx_MultiBufferStart_IT+0xda8>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a11      	ldr	r2, [pc, #68]	; (8002f40 <HAL_DMAEx_MultiBufferStart_IT+0xd88>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d02c      	beq.n	8002f5a <HAL_DMAEx_MultiBufferStart_IT+0xda2>
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4a0f      	ldr	r2, [pc, #60]	; (8002f44 <HAL_DMAEx_MultiBufferStart_IT+0xd8c>)
 8002f06:	4293      	cmp	r3, r2
 8002f08:	d124      	bne.n	8002f54 <HAL_DMAEx_MultiBufferStart_IT+0xd9c>
 8002f0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f0e:	e040      	b.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f10:	40026000 	.word	0x40026000
 8002f14:	40026458 	.word	0x40026458
 8002f18:	40026010 	.word	0x40026010
 8002f1c:	40026410 	.word	0x40026410
 8002f20:	40026070 	.word	0x40026070
 8002f24:	40026470 	.word	0x40026470
 8002f28:	40026028 	.word	0x40026028
 8002f2c:	40026428 	.word	0x40026428
 8002f30:	40026088 	.word	0x40026088
 8002f34:	40026488 	.word	0x40026488
 8002f38:	40026040 	.word	0x40026040
 8002f3c:	40026440 	.word	0x40026440
 8002f40:	400260a0 	.word	0x400260a0
 8002f44:	400264a0 	.word	0x400264a0
 8002f48:	40026400 	.word	0x40026400
 8002f4c:	400260b8 	.word	0x400260b8
 8002f50:	40026058 	.word	0x40026058
 8002f54:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002f58:	e01b      	b.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f5a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f5e:	e018      	b.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f64:	e015      	b.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f66:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002f6a:	e012      	b.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f6c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f70:	e00f      	b.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f72:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f76:	e00c      	b.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f78:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f7c:	e009      	b.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f7e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f82:	e006      	b.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f84:	2304      	movs	r3, #4
 8002f86:	e004      	b.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f88:	2304      	movs	r3, #4
 8002f8a:	e002      	b.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f8c:	2304      	movs	r3, #4
 8002f8e:	e000      	b.n	8002f92 <HAL_DMAEx_MultiBufferStart_IT+0xdda>
 8002f90:	2304      	movs	r3, #4
 8002f92:	4a8b      	ldr	r2, [pc, #556]	; (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8002f94:	60d3      	str	r3, [r2, #12]
 8002f96:	e05f      	b.n	8003058 <HAL_DMAEx_MultiBufferStart_IT+0xea0>
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a89      	ldr	r2, [pc, #548]	; (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d057      	beq.n	8003052 <HAL_DMAEx_MultiBufferStart_IT+0xe9a>
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a88      	ldr	r2, [pc, #544]	; (80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d050      	beq.n	800304e <HAL_DMAEx_MultiBufferStart_IT+0xe96>
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4a86      	ldr	r2, [pc, #536]	; (80031cc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d049      	beq.n	800304a <HAL_DMAEx_MultiBufferStart_IT+0xe92>
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4a85      	ldr	r2, [pc, #532]	; (80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d042      	beq.n	8003046 <HAL_DMAEx_MultiBufferStart_IT+0xe8e>
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a83      	ldr	r2, [pc, #524]	; (80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d03a      	beq.n	8003040 <HAL_DMAEx_MultiBufferStart_IT+0xe88>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a82      	ldr	r2, [pc, #520]	; (80031d8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d032      	beq.n	800303a <HAL_DMAEx_MultiBufferStart_IT+0xe82>
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4a80      	ldr	r2, [pc, #512]	; (80031dc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d02a      	beq.n	8003034 <HAL_DMAEx_MultiBufferStart_IT+0xe7c>
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a7f      	ldr	r2, [pc, #508]	; (80031e0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d022      	beq.n	800302e <HAL_DMAEx_MultiBufferStart_IT+0xe76>
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a7d      	ldr	r2, [pc, #500]	; (80031e4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d01a      	beq.n	8003028 <HAL_DMAEx_MultiBufferStart_IT+0xe70>
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a7c      	ldr	r2, [pc, #496]	; (80031e8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d012      	beq.n	8003022 <HAL_DMAEx_MultiBufferStart_IT+0xe6a>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a7a      	ldr	r2, [pc, #488]	; (80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003002:	4293      	cmp	r3, r2
 8003004:	d00a      	beq.n	800301c <HAL_DMAEx_MultiBufferStart_IT+0xe64>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a79      	ldr	r2, [pc, #484]	; (80031f0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d102      	bne.n	8003016 <HAL_DMAEx_MultiBufferStart_IT+0xe5e>
 8003010:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003014:	e01e      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003016:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800301a:	e01b      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800301c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003020:	e018      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003022:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003026:	e015      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003028:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800302c:	e012      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800302e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003032:	e00f      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003034:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003038:	e00c      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800303a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800303e:	e009      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003040:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003044:	e006      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003046:	2304      	movs	r3, #4
 8003048:	e004      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800304a:	2304      	movs	r3, #4
 800304c:	e002      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 800304e:	2304      	movs	r3, #4
 8003050:	e000      	b.n	8003054 <HAL_DMAEx_MultiBufferStart_IT+0xe9c>
 8003052:	2304      	movs	r3, #4
 8003054:	4a5a      	ldr	r2, [pc, #360]	; (80031c0 <HAL_DMAEx_MultiBufferStart_IT+0x1008>)
 8003056:	6093      	str	r3, [r2, #8]
    __HAL_DMA_CLEAR_FLAG (hdma, __HAL_DMA_GET_FE_FLAG_INDEX(hdma));
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	461a      	mov	r2, r3
 800305e:	4b65      	ldr	r3, [pc, #404]	; (80031f4 <HAL_DMAEx_MultiBufferStart_IT+0x103c>)
 8003060:	429a      	cmp	r2, r3
 8003062:	d95c      	bls.n	800311e <HAL_DMAEx_MultiBufferStart_IT+0xf66>
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a56      	ldr	r2, [pc, #344]	; (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d053      	beq.n	8003116 <HAL_DMAEx_MultiBufferStart_IT+0xf5e>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a55      	ldr	r2, [pc, #340]	; (80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 8003074:	4293      	cmp	r3, r2
 8003076:	d04c      	beq.n	8003112 <HAL_DMAEx_MultiBufferStart_IT+0xf5a>
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a53      	ldr	r2, [pc, #332]	; (80031cc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d045      	beq.n	800310e <HAL_DMAEx_MultiBufferStart_IT+0xf56>
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4a52      	ldr	r2, [pc, #328]	; (80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d03e      	beq.n	800310a <HAL_DMAEx_MultiBufferStart_IT+0xf52>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a50      	ldr	r2, [pc, #320]	; (80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d037      	beq.n	8003106 <HAL_DMAEx_MultiBufferStart_IT+0xf4e>
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	4a4f      	ldr	r2, [pc, #316]	; (80031d8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 800309c:	4293      	cmp	r3, r2
 800309e:	d030      	beq.n	8003102 <HAL_DMAEx_MultiBufferStart_IT+0xf4a>
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a4d      	ldr	r2, [pc, #308]	; (80031dc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d029      	beq.n	80030fe <HAL_DMAEx_MultiBufferStart_IT+0xf46>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	4a4c      	ldr	r2, [pc, #304]	; (80031e0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d022      	beq.n	80030fa <HAL_DMAEx_MultiBufferStart_IT+0xf42>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	4a4a      	ldr	r2, [pc, #296]	; (80031e4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01a      	beq.n	80030f4 <HAL_DMAEx_MultiBufferStart_IT+0xf3c>
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a49      	ldr	r2, [pc, #292]	; (80031e8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d012      	beq.n	80030ee <HAL_DMAEx_MultiBufferStart_IT+0xf36>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a47      	ldr	r2, [pc, #284]	; (80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d00a      	beq.n	80030e8 <HAL_DMAEx_MultiBufferStart_IT+0xf30>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4a46      	ldr	r2, [pc, #280]	; (80031f0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d102      	bne.n	80030e2 <HAL_DMAEx_MultiBufferStart_IT+0xf2a>
 80030dc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030e0:	e01a      	b.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80030e6:	e017      	b.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030ec:	e014      	b.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030ee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f2:	e011      	b.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80030f8:	e00e      	b.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030fa:	2340      	movs	r3, #64	; 0x40
 80030fc:	e00c      	b.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 80030fe:	2340      	movs	r3, #64	; 0x40
 8003100:	e00a      	b.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003102:	2340      	movs	r3, #64	; 0x40
 8003104:	e008      	b.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003106:	2340      	movs	r3, #64	; 0x40
 8003108:	e006      	b.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800310a:	2301      	movs	r3, #1
 800310c:	e004      	b.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 800310e:	2301      	movs	r3, #1
 8003110:	e002      	b.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003112:	2301      	movs	r3, #1
 8003114:	e000      	b.n	8003118 <HAL_DMAEx_MultiBufferStart_IT+0xf60>
 8003116:	2301      	movs	r3, #1
 8003118:	4a37      	ldr	r2, [pc, #220]	; (80031f8 <HAL_DMAEx_MultiBufferStart_IT+0x1040>)
 800311a:	60d3      	str	r3, [r2, #12]
 800311c:	e141      	b.n	80033a2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	461a      	mov	r2, r3
 8003124:	4b35      	ldr	r3, [pc, #212]	; (80031fc <HAL_DMAEx_MultiBufferStart_IT+0x1044>)
 8003126:	429a      	cmp	r2, r3
 8003128:	d97c      	bls.n	8003224 <HAL_DMAEx_MultiBufferStart_IT+0x106c>
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4a25      	ldr	r2, [pc, #148]	; (80031c4 <HAL_DMAEx_MultiBufferStart_IT+0x100c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d073      	beq.n	800321c <HAL_DMAEx_MultiBufferStart_IT+0x1064>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <HAL_DMAEx_MultiBufferStart_IT+0x1010>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d06c      	beq.n	8003218 <HAL_DMAEx_MultiBufferStart_IT+0x1060>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a22      	ldr	r2, [pc, #136]	; (80031cc <HAL_DMAEx_MultiBufferStart_IT+0x1014>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d065      	beq.n	8003214 <HAL_DMAEx_MultiBufferStart_IT+0x105c>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a20      	ldr	r2, [pc, #128]	; (80031d0 <HAL_DMAEx_MultiBufferStart_IT+0x1018>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d05e      	beq.n	8003210 <HAL_DMAEx_MultiBufferStart_IT+0x1058>
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	4a1f      	ldr	r2, [pc, #124]	; (80031d4 <HAL_DMAEx_MultiBufferStart_IT+0x101c>)
 8003158:	4293      	cmp	r3, r2
 800315a:	d057      	beq.n	800320c <HAL_DMAEx_MultiBufferStart_IT+0x1054>
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	4a1d      	ldr	r2, [pc, #116]	; (80031d8 <HAL_DMAEx_MultiBufferStart_IT+0x1020>)
 8003162:	4293      	cmp	r3, r2
 8003164:	d050      	beq.n	8003208 <HAL_DMAEx_MultiBufferStart_IT+0x1050>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a1c      	ldr	r2, [pc, #112]	; (80031dc <HAL_DMAEx_MultiBufferStart_IT+0x1024>)
 800316c:	4293      	cmp	r3, r2
 800316e:	d049      	beq.n	8003204 <HAL_DMAEx_MultiBufferStart_IT+0x104c>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1a      	ldr	r2, [pc, #104]	; (80031e0 <HAL_DMAEx_MultiBufferStart_IT+0x1028>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d042      	beq.n	8003200 <HAL_DMAEx_MultiBufferStart_IT+0x1048>
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4a19      	ldr	r2, [pc, #100]	; (80031e4 <HAL_DMAEx_MultiBufferStart_IT+0x102c>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d01a      	beq.n	80031ba <HAL_DMAEx_MultiBufferStart_IT+0x1002>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a17      	ldr	r2, [pc, #92]	; (80031e8 <HAL_DMAEx_MultiBufferStart_IT+0x1030>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d012      	beq.n	80031b4 <HAL_DMAEx_MultiBufferStart_IT+0xffc>
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a16      	ldr	r2, [pc, #88]	; (80031ec <HAL_DMAEx_MultiBufferStart_IT+0x1034>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d00a      	beq.n	80031ae <HAL_DMAEx_MultiBufferStart_IT+0xff6>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a14      	ldr	r2, [pc, #80]	; (80031f0 <HAL_DMAEx_MultiBufferStart_IT+0x1038>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d102      	bne.n	80031a8 <HAL_DMAEx_MultiBufferStart_IT+0xff0>
 80031a2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031a6:	e03a      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80031a8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80031ac:	e037      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80031ae:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031b2:	e034      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80031b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031b8:	e031      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80031ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80031be:	e02e      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 80031c0:	40026000 	.word	0x40026000
 80031c4:	40026010 	.word	0x40026010
 80031c8:	40026410 	.word	0x40026410
 80031cc:	40026070 	.word	0x40026070
 80031d0:	40026470 	.word	0x40026470
 80031d4:	40026028 	.word	0x40026028
 80031d8:	40026428 	.word	0x40026428
 80031dc:	40026088 	.word	0x40026088
 80031e0:	40026488 	.word	0x40026488
 80031e4:	40026040 	.word	0x40026040
 80031e8:	40026440 	.word	0x40026440
 80031ec:	400260a0 	.word	0x400260a0
 80031f0:	400264a0 	.word	0x400264a0
 80031f4:	40026458 	.word	0x40026458
 80031f8:	40026400 	.word	0x40026400
 80031fc:	400260b8 	.word	0x400260b8
 8003200:	2340      	movs	r3, #64	; 0x40
 8003202:	e00c      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003204:	2340      	movs	r3, #64	; 0x40
 8003206:	e00a      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003208:	2340      	movs	r3, #64	; 0x40
 800320a:	e008      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800320c:	2340      	movs	r3, #64	; 0x40
 800320e:	e006      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003210:	2301      	movs	r3, #1
 8003212:	e004      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003214:	2301      	movs	r3, #1
 8003216:	e002      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 8003218:	2301      	movs	r3, #1
 800321a:	e000      	b.n	800321e <HAL_DMAEx_MultiBufferStart_IT+0x1066>
 800321c:	2301      	movs	r3, #1
 800321e:	4a7b      	ldr	r2, [pc, #492]	; (800340c <HAL_DMAEx_MultiBufferStart_IT+0x1254>)
 8003220:	6093      	str	r3, [r2, #8]
 8003222:	e0be      	b.n	80033a2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	461a      	mov	r2, r3
 800322a:	4b79      	ldr	r3, [pc, #484]	; (8003410 <HAL_DMAEx_MultiBufferStart_IT+0x1258>)
 800322c:	429a      	cmp	r2, r3
 800322e:	d95c      	bls.n	80032ea <HAL_DMAEx_MultiBufferStart_IT+0x1132>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4a77      	ldr	r2, [pc, #476]	; (8003414 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d053      	beq.n	80032e2 <HAL_DMAEx_MultiBufferStart_IT+0x112a>
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a76      	ldr	r2, [pc, #472]	; (8003418 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d04c      	beq.n	80032de <HAL_DMAEx_MultiBufferStart_IT+0x1126>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a74      	ldr	r2, [pc, #464]	; (800341c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d045      	beq.n	80032da <HAL_DMAEx_MultiBufferStart_IT+0x1122>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a73      	ldr	r2, [pc, #460]	; (8003420 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d03e      	beq.n	80032d6 <HAL_DMAEx_MultiBufferStart_IT+0x111e>
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a71      	ldr	r2, [pc, #452]	; (8003424 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 800325e:	4293      	cmp	r3, r2
 8003260:	d037      	beq.n	80032d2 <HAL_DMAEx_MultiBufferStart_IT+0x111a>
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	4a70      	ldr	r2, [pc, #448]	; (8003428 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d030      	beq.n	80032ce <HAL_DMAEx_MultiBufferStart_IT+0x1116>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a6e      	ldr	r2, [pc, #440]	; (800342c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d029      	beq.n	80032ca <HAL_DMAEx_MultiBufferStart_IT+0x1112>
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a6d      	ldr	r2, [pc, #436]	; (8003430 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d022      	beq.n	80032c6 <HAL_DMAEx_MultiBufferStart_IT+0x110e>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a6b      	ldr	r2, [pc, #428]	; (8003434 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d01a      	beq.n	80032c0 <HAL_DMAEx_MultiBufferStart_IT+0x1108>
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a6a      	ldr	r2, [pc, #424]	; (8003438 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d012      	beq.n	80032ba <HAL_DMAEx_MultiBufferStart_IT+0x1102>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a68      	ldr	r2, [pc, #416]	; (800343c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d00a      	beq.n	80032b4 <HAL_DMAEx_MultiBufferStart_IT+0x10fc>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a67      	ldr	r2, [pc, #412]	; (8003440 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d102      	bne.n	80032ae <HAL_DMAEx_MultiBufferStart_IT+0x10f6>
 80032a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032ac:	e01a      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80032ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80032b2:	e017      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80032b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032b8:	e014      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80032ba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032be:	e011      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80032c0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032c4:	e00e      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80032c6:	2340      	movs	r3, #64	; 0x40
 80032c8:	e00c      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80032ca:	2340      	movs	r3, #64	; 0x40
 80032cc:	e00a      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80032ce:	2340      	movs	r3, #64	; 0x40
 80032d0:	e008      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80032d2:	2340      	movs	r3, #64	; 0x40
 80032d4:	e006      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80032d6:	2301      	movs	r3, #1
 80032d8:	e004      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80032da:	2301      	movs	r3, #1
 80032dc:	e002      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80032de:	2301      	movs	r3, #1
 80032e0:	e000      	b.n	80032e4 <HAL_DMAEx_MultiBufferStart_IT+0x112c>
 80032e2:	2301      	movs	r3, #1
 80032e4:	4a57      	ldr	r2, [pc, #348]	; (8003444 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80032e6:	60d3      	str	r3, [r2, #12]
 80032e8:	e05b      	b.n	80033a2 <HAL_DMAEx_MultiBufferStart_IT+0x11ea>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a49      	ldr	r2, [pc, #292]	; (8003414 <HAL_DMAEx_MultiBufferStart_IT+0x125c>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d053      	beq.n	800339c <HAL_DMAEx_MultiBufferStart_IT+0x11e4>
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a47      	ldr	r2, [pc, #284]	; (8003418 <HAL_DMAEx_MultiBufferStart_IT+0x1260>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d04c      	beq.n	8003398 <HAL_DMAEx_MultiBufferStart_IT+0x11e0>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a46      	ldr	r2, [pc, #280]	; (800341c <HAL_DMAEx_MultiBufferStart_IT+0x1264>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d045      	beq.n	8003394 <HAL_DMAEx_MultiBufferStart_IT+0x11dc>
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a44      	ldr	r2, [pc, #272]	; (8003420 <HAL_DMAEx_MultiBufferStart_IT+0x1268>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d03e      	beq.n	8003390 <HAL_DMAEx_MultiBufferStart_IT+0x11d8>
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a43      	ldr	r2, [pc, #268]	; (8003424 <HAL_DMAEx_MultiBufferStart_IT+0x126c>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d037      	beq.n	800338c <HAL_DMAEx_MultiBufferStart_IT+0x11d4>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a41      	ldr	r2, [pc, #260]	; (8003428 <HAL_DMAEx_MultiBufferStart_IT+0x1270>)
 8003322:	4293      	cmp	r3, r2
 8003324:	d030      	beq.n	8003388 <HAL_DMAEx_MultiBufferStart_IT+0x11d0>
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a40      	ldr	r2, [pc, #256]	; (800342c <HAL_DMAEx_MultiBufferStart_IT+0x1274>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d029      	beq.n	8003384 <HAL_DMAEx_MultiBufferStart_IT+0x11cc>
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a3e      	ldr	r2, [pc, #248]	; (8003430 <HAL_DMAEx_MultiBufferStart_IT+0x1278>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d022      	beq.n	8003380 <HAL_DMAEx_MultiBufferStart_IT+0x11c8>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	4a3d      	ldr	r2, [pc, #244]	; (8003434 <HAL_DMAEx_MultiBufferStart_IT+0x127c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d01a      	beq.n	800337a <HAL_DMAEx_MultiBufferStart_IT+0x11c2>
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a3b      	ldr	r2, [pc, #236]	; (8003438 <HAL_DMAEx_MultiBufferStart_IT+0x1280>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d012      	beq.n	8003374 <HAL_DMAEx_MultiBufferStart_IT+0x11bc>
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a3a      	ldr	r2, [pc, #232]	; (800343c <HAL_DMAEx_MultiBufferStart_IT+0x1284>)
 8003354:	4293      	cmp	r3, r2
 8003356:	d00a      	beq.n	800336e <HAL_DMAEx_MultiBufferStart_IT+0x11b6>
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4a38      	ldr	r2, [pc, #224]	; (8003440 <HAL_DMAEx_MultiBufferStart_IT+0x1288>)
 800335e:	4293      	cmp	r3, r2
 8003360:	d102      	bne.n	8003368 <HAL_DMAEx_MultiBufferStart_IT+0x11b0>
 8003362:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003366:	e01a      	b.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003368:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800336c:	e017      	b.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800336e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003372:	e014      	b.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003374:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003378:	e011      	b.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800337a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800337e:	e00e      	b.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003380:	2340      	movs	r3, #64	; 0x40
 8003382:	e00c      	b.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003384:	2340      	movs	r3, #64	; 0x40
 8003386:	e00a      	b.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003388:	2340      	movs	r3, #64	; 0x40
 800338a:	e008      	b.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800338c:	2340      	movs	r3, #64	; 0x40
 800338e:	e006      	b.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003390:	2301      	movs	r3, #1
 8003392:	e004      	b.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003394:	2301      	movs	r3, #1
 8003396:	e002      	b.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 8003398:	2301      	movs	r3, #1
 800339a:	e000      	b.n	800339e <HAL_DMAEx_MultiBufferStart_IT+0x11e6>
 800339c:	2301      	movs	r3, #1
 800339e:	4a29      	ldr	r2, [pc, #164]	; (8003444 <HAL_DMAEx_MultiBufferStart_IT+0x128c>)
 80033a0:	6093      	str	r3, [r2, #8]

    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	681a      	ldr	r2, [r3, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f042 0216 	orr.w	r2, r2, #22
 80033b0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	695a      	ldr	r2, [r3, #20]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80033c0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d103      	bne.n	80033d2 <HAL_DMAEx_MultiBufferStart_IT+0x121a>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d007      	beq.n	80033e2 <HAL_DMAEx_MultiBufferStart_IT+0x122a>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f042 0208 	orr.w	r2, r2, #8
 80033e0:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma); 
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	681a      	ldr	r2, [r3, #0]
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f042 0201 	orr.w	r2, r2, #1
 80033f0:	601a      	str	r2, [r3, #0]
 80033f2:	e005      	b.n	8003400 <HAL_DMAEx_MultiBufferStart_IT+0x1248>
  }
  else
  {     
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80033fc:	2302      	movs	r3, #2
 80033fe:	75fb      	strb	r3, [r7, #23]
  }  
  return status; 
 8003400:	7dfb      	ldrb	r3, [r7, #23]
}
 8003402:	4618      	mov	r0, r3
 8003404:	3718      	adds	r7, #24
 8003406:	46bd      	mov	sp, r7
 8003408:	bd80      	pop	{r7, pc}
 800340a:	bf00      	nop
 800340c:	40026400 	.word	0x40026400
 8003410:	40026058 	.word	0x40026058
 8003414:	40026010 	.word	0x40026010
 8003418:	40026410 	.word	0x40026410
 800341c:	40026070 	.word	0x40026070
 8003420:	40026470 	.word	0x40026470
 8003424:	40026028 	.word	0x40026028
 8003428:	40026428 	.word	0x40026428
 800342c:	40026088 	.word	0x40026088
 8003430:	40026488 	.word	0x40026488
 8003434:	40026040 	.word	0x40026040
 8003438:	40026440 	.word	0x40026440
 800343c:	400260a0 	.word	0x400260a0
 8003440:	400264a0 	.word	0x400264a0
 8003444:	40026000 	.word	0x40026000

08003448 <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current 
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8003448:	b480      	push	{r7}
 800344a:	b085      	sub	sp, #20
 800344c:	af00      	add	r7, sp, #0
 800344e:	60f8      	str	r0, [r7, #12]
 8003450:	60b9      	str	r1, [r7, #8]
 8003452:	4613      	mov	r3, r2
 8003454:	71fb      	strb	r3, [r7, #7]
  if(memory == MEMORY0)
 8003456:	79fb      	ldrb	r3, [r7, #7]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d104      	bne.n	8003466 <HAL_DMAEx_ChangeMemory+0x1e>
  {
    /* change the memory0 address */
    hdma->Instance->M0AR = Address;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	60da      	str	r2, [r3, #12]
 8003464:	e003      	b.n	800346e <HAL_DMAEx_ChangeMemory+0x26>
  }
  else
  {
    /* change the memory1 address */
    hdma->Instance->M1AR = Address;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	68ba      	ldr	r2, [r7, #8]
 800346c:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3714      	adds	r7, #20
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr

0800347c <DMA_MultiBufferSetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{  
 800347c:	b480      	push	{r7}
 800347e:	b085      	sub	sp, #20
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
 8003488:	603b      	str	r3, [r7, #0]
  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	683a      	ldr	r2, [r7, #0]
 8003490:	605a      	str	r2, [r3, #4]
  
  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689b      	ldr	r3, [r3, #8]
 8003496:	2b40      	cmp	r3, #64	; 0x40
 8003498:	d108      	bne.n	80034ac <DMA_MultiBufferSetConfig+0x30>
  {   
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	609a      	str	r2, [r3, #8]
    
    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	68ba      	ldr	r2, [r7, #8]
 80034a8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;
    
    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80034aa:	e007      	b.n	80034bc <DMA_MultiBufferSetConfig+0x40>
    hdma->Instance->PAR = SrcAddress;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	68ba      	ldr	r2, [r7, #8]
 80034b2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	60da      	str	r2, [r3, #12]
}
 80034bc:	bf00      	nop
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034c8:	b480      	push	{r7}
 80034ca:	b089      	sub	sp, #36	; 0x24
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034d2:	2300      	movs	r3, #0
 80034d4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034de:	2300      	movs	r3, #0
 80034e0:	61fb      	str	r3, [r7, #28]
 80034e2:	e16b      	b.n	80037bc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034e4:	2201      	movs	r2, #1
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ec:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	697a      	ldr	r2, [r7, #20]
 80034f4:	4013      	ands	r3, r2
 80034f6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80034f8:	693a      	ldr	r2, [r7, #16]
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	f040 815a 	bne.w	80037b6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f003 0303 	and.w	r3, r3, #3
 800350a:	2b01      	cmp	r3, #1
 800350c:	d005      	beq.n	800351a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003516:	2b02      	cmp	r3, #2
 8003518:	d130      	bne.n	800357c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	005b      	lsls	r3, r3, #1
 8003524:	2203      	movs	r2, #3
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43db      	mvns	r3, r3
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	4013      	ands	r3, r2
 8003530:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	68da      	ldr	r2, [r3, #12]
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	fa02 f303 	lsl.w	r3, r2, r3
 800353e:	69ba      	ldr	r2, [r7, #24]
 8003540:	4313      	orrs	r3, r2
 8003542:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	685b      	ldr	r3, [r3, #4]
 800354e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003550:	2201      	movs	r2, #1
 8003552:	69fb      	ldr	r3, [r7, #28]
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	091b      	lsrs	r3, r3, #4
 8003566:	f003 0201 	and.w	r2, r3, #1
 800356a:	69fb      	ldr	r3, [r7, #28]
 800356c:	fa02 f303 	lsl.w	r3, r2, r3
 8003570:	69ba      	ldr	r2, [r7, #24]
 8003572:	4313      	orrs	r3, r2
 8003574:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	f003 0303 	and.w	r3, r3, #3
 8003584:	2b03      	cmp	r3, #3
 8003586:	d017      	beq.n	80035b8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800358e:	69fb      	ldr	r3, [r7, #28]
 8003590:	005b      	lsls	r3, r3, #1
 8003592:	2203      	movs	r2, #3
 8003594:	fa02 f303 	lsl.w	r3, r2, r3
 8003598:	43db      	mvns	r3, r3
 800359a:	69ba      	ldr	r2, [r7, #24]
 800359c:	4013      	ands	r3, r2
 800359e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035a0:	683b      	ldr	r3, [r7, #0]
 80035a2:	689a      	ldr	r2, [r3, #8]
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	005b      	lsls	r3, r3, #1
 80035a8:	fa02 f303 	lsl.w	r3, r2, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4313      	orrs	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f003 0303 	and.w	r3, r3, #3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d123      	bne.n	800360c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035c4:	69fb      	ldr	r3, [r7, #28]
 80035c6:	08da      	lsrs	r2, r3, #3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	3208      	adds	r2, #8
 80035cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f003 0307 	and.w	r3, r3, #7
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	220f      	movs	r2, #15
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43db      	mvns	r3, r3
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	4013      	ands	r3, r2
 80035e6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	691a      	ldr	r2, [r3, #16]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	f003 0307 	and.w	r3, r3, #7
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	fa02 f303 	lsl.w	r3, r2, r3
 80035f8:	69ba      	ldr	r2, [r7, #24]
 80035fa:	4313      	orrs	r3, r2
 80035fc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	08da      	lsrs	r2, r3, #3
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	3208      	adds	r2, #8
 8003606:	69b9      	ldr	r1, [r7, #24]
 8003608:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	2203      	movs	r2, #3
 8003618:	fa02 f303 	lsl.w	r3, r2, r3
 800361c:	43db      	mvns	r3, r3
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4013      	ands	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 0203 	and.w	r2, r3, #3
 800362c:	69fb      	ldr	r3, [r7, #28]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	fa02 f303 	lsl.w	r3, r2, r3
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	4313      	orrs	r3, r2
 8003638:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	685b      	ldr	r3, [r3, #4]
 8003644:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003648:	2b00      	cmp	r3, #0
 800364a:	f000 80b4 	beq.w	80037b6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800364e:	2300      	movs	r3, #0
 8003650:	60fb      	str	r3, [r7, #12]
 8003652:	4b60      	ldr	r3, [pc, #384]	; (80037d4 <HAL_GPIO_Init+0x30c>)
 8003654:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003656:	4a5f      	ldr	r2, [pc, #380]	; (80037d4 <HAL_GPIO_Init+0x30c>)
 8003658:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800365c:	6453      	str	r3, [r2, #68]	; 0x44
 800365e:	4b5d      	ldr	r3, [pc, #372]	; (80037d4 <HAL_GPIO_Init+0x30c>)
 8003660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003662:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003666:	60fb      	str	r3, [r7, #12]
 8003668:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800366a:	4a5b      	ldr	r2, [pc, #364]	; (80037d8 <HAL_GPIO_Init+0x310>)
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	089b      	lsrs	r3, r3, #2
 8003670:	3302      	adds	r3, #2
 8003672:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003676:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	f003 0303 	and.w	r3, r3, #3
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	220f      	movs	r2, #15
 8003682:	fa02 f303 	lsl.w	r3, r2, r3
 8003686:	43db      	mvns	r3, r3
 8003688:	69ba      	ldr	r2, [r7, #24]
 800368a:	4013      	ands	r3, r2
 800368c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a52      	ldr	r2, [pc, #328]	; (80037dc <HAL_GPIO_Init+0x314>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d02b      	beq.n	80036ee <HAL_GPIO_Init+0x226>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a51      	ldr	r2, [pc, #324]	; (80037e0 <HAL_GPIO_Init+0x318>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d025      	beq.n	80036ea <HAL_GPIO_Init+0x222>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a50      	ldr	r2, [pc, #320]	; (80037e4 <HAL_GPIO_Init+0x31c>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d01f      	beq.n	80036e6 <HAL_GPIO_Init+0x21e>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a4f      	ldr	r2, [pc, #316]	; (80037e8 <HAL_GPIO_Init+0x320>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d019      	beq.n	80036e2 <HAL_GPIO_Init+0x21a>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a4e      	ldr	r2, [pc, #312]	; (80037ec <HAL_GPIO_Init+0x324>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d013      	beq.n	80036de <HAL_GPIO_Init+0x216>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a4d      	ldr	r2, [pc, #308]	; (80037f0 <HAL_GPIO_Init+0x328>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00d      	beq.n	80036da <HAL_GPIO_Init+0x212>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a4c      	ldr	r2, [pc, #304]	; (80037f4 <HAL_GPIO_Init+0x32c>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d007      	beq.n	80036d6 <HAL_GPIO_Init+0x20e>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a4b      	ldr	r2, [pc, #300]	; (80037f8 <HAL_GPIO_Init+0x330>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d101      	bne.n	80036d2 <HAL_GPIO_Init+0x20a>
 80036ce:	2307      	movs	r3, #7
 80036d0:	e00e      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036d2:	2308      	movs	r3, #8
 80036d4:	e00c      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036d6:	2306      	movs	r3, #6
 80036d8:	e00a      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036da:	2305      	movs	r3, #5
 80036dc:	e008      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036de:	2304      	movs	r3, #4
 80036e0:	e006      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036e2:	2303      	movs	r3, #3
 80036e4:	e004      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036e6:	2302      	movs	r3, #2
 80036e8:	e002      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <HAL_GPIO_Init+0x228>
 80036ee:	2300      	movs	r3, #0
 80036f0:	69fa      	ldr	r2, [r7, #28]
 80036f2:	f002 0203 	and.w	r2, r2, #3
 80036f6:	0092      	lsls	r2, r2, #2
 80036f8:	4093      	lsls	r3, r2
 80036fa:	69ba      	ldr	r2, [r7, #24]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003700:	4935      	ldr	r1, [pc, #212]	; (80037d8 <HAL_GPIO_Init+0x310>)
 8003702:	69fb      	ldr	r3, [r7, #28]
 8003704:	089b      	lsrs	r3, r3, #2
 8003706:	3302      	adds	r3, #2
 8003708:	69ba      	ldr	r2, [r7, #24]
 800370a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800370e:	4b3b      	ldr	r3, [pc, #236]	; (80037fc <HAL_GPIO_Init+0x334>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003714:	693b      	ldr	r3, [r7, #16]
 8003716:	43db      	mvns	r3, r3
 8003718:	69ba      	ldr	r2, [r7, #24]
 800371a:	4013      	ands	r3, r2
 800371c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d003      	beq.n	8003732 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800372a:	69ba      	ldr	r2, [r7, #24]
 800372c:	693b      	ldr	r3, [r7, #16]
 800372e:	4313      	orrs	r3, r2
 8003730:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003732:	4a32      	ldr	r2, [pc, #200]	; (80037fc <HAL_GPIO_Init+0x334>)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003738:	4b30      	ldr	r3, [pc, #192]	; (80037fc <HAL_GPIO_Init+0x334>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	43db      	mvns	r3, r3
 8003742:	69ba      	ldr	r2, [r7, #24]
 8003744:	4013      	ands	r3, r2
 8003746:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003750:	2b00      	cmp	r3, #0
 8003752:	d003      	beq.n	800375c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800375c:	4a27      	ldr	r2, [pc, #156]	; (80037fc <HAL_GPIO_Init+0x334>)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003762:	4b26      	ldr	r3, [pc, #152]	; (80037fc <HAL_GPIO_Init+0x334>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	43db      	mvns	r3, r3
 800376c:	69ba      	ldr	r2, [r7, #24]
 800376e:	4013      	ands	r3, r2
 8003770:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800377e:	69ba      	ldr	r2, [r7, #24]
 8003780:	693b      	ldr	r3, [r7, #16]
 8003782:	4313      	orrs	r3, r2
 8003784:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003786:	4a1d      	ldr	r2, [pc, #116]	; (80037fc <HAL_GPIO_Init+0x334>)
 8003788:	69bb      	ldr	r3, [r7, #24]
 800378a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800378c:	4b1b      	ldr	r3, [pc, #108]	; (80037fc <HAL_GPIO_Init+0x334>)
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	43db      	mvns	r3, r3
 8003796:	69ba      	ldr	r2, [r7, #24]
 8003798:	4013      	ands	r3, r2
 800379a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d003      	beq.n	80037b0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80037a8:	69ba      	ldr	r2, [r7, #24]
 80037aa:	693b      	ldr	r3, [r7, #16]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80037b0:	4a12      	ldr	r2, [pc, #72]	; (80037fc <HAL_GPIO_Init+0x334>)
 80037b2:	69bb      	ldr	r3, [r7, #24]
 80037b4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037b6:	69fb      	ldr	r3, [r7, #28]
 80037b8:	3301      	adds	r3, #1
 80037ba:	61fb      	str	r3, [r7, #28]
 80037bc:	69fb      	ldr	r3, [r7, #28]
 80037be:	2b0f      	cmp	r3, #15
 80037c0:	f67f ae90 	bls.w	80034e4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	3724      	adds	r7, #36	; 0x24
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40013800 	.word	0x40013800
 80037dc:	40020000 	.word	0x40020000
 80037e0:	40020400 	.word	0x40020400
 80037e4:	40020800 	.word	0x40020800
 80037e8:	40020c00 	.word	0x40020c00
 80037ec:	40021000 	.word	0x40021000
 80037f0:	40021400 	.word	0x40021400
 80037f4:	40021800 	.word	0x40021800
 80037f8:	40021c00 	.word	0x40021c00
 80037fc:	40013c00 	.word	0x40013c00

08003800 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003800:	b480      	push	{r7}
 8003802:	b085      	sub	sp, #20
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	460b      	mov	r3, r1
 800380a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	691a      	ldr	r2, [r3, #16]
 8003810:	887b      	ldrh	r3, [r7, #2]
 8003812:	4013      	ands	r3, r2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d002      	beq.n	800381e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003818:	2301      	movs	r3, #1
 800381a:	73fb      	strb	r3, [r7, #15]
 800381c:	e001      	b.n	8003822 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800381e:	2300      	movs	r3, #0
 8003820:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003822:	7bfb      	ldrb	r3, [r7, #15]
}
 8003824:	4618      	mov	r0, r3
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	807b      	strh	r3, [r7, #2]
 800383c:	4613      	mov	r3, r2
 800383e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003840:	787b      	ldrb	r3, [r7, #1]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d003      	beq.n	800384e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003846:	887a      	ldrh	r2, [r7, #2]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800384c:	e003      	b.n	8003856 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800384e:	887b      	ldrh	r3, [r7, #2]
 8003850:	041a      	lsls	r2, r3, #16
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	619a      	str	r2, [r3, #24]
}
 8003856:	bf00      	nop
 8003858:	370c      	adds	r7, #12
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
	...

08003864 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d101      	bne.n	8003876 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e12b      	b.n	8003ace <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800387c:	b2db      	uxtb	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d106      	bne.n	8003890 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7fd fa4e 	bl	8000d2c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2224      	movs	r2, #36	; 0x24
 8003894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f022 0201 	bic.w	r2, r2, #1
 80038a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80038c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80038c8:	f001 fbfa 	bl	80050c0 <HAL_RCC_GetPCLK1Freq>
 80038cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	4a81      	ldr	r2, [pc, #516]	; (8003ad8 <HAL_I2C_Init+0x274>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d807      	bhi.n	80038e8 <HAL_I2C_Init+0x84>
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	4a80      	ldr	r2, [pc, #512]	; (8003adc <HAL_I2C_Init+0x278>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	bf94      	ite	ls
 80038e0:	2301      	movls	r3, #1
 80038e2:	2300      	movhi	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	e006      	b.n	80038f6 <HAL_I2C_Init+0x92>
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	4a7d      	ldr	r2, [pc, #500]	; (8003ae0 <HAL_I2C_Init+0x27c>)
 80038ec:	4293      	cmp	r3, r2
 80038ee:	bf94      	ite	ls
 80038f0:	2301      	movls	r3, #1
 80038f2:	2300      	movhi	r3, #0
 80038f4:	b2db      	uxtb	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038fa:	2301      	movs	r3, #1
 80038fc:	e0e7      	b.n	8003ace <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	4a78      	ldr	r2, [pc, #480]	; (8003ae4 <HAL_I2C_Init+0x280>)
 8003902:	fba2 2303 	umull	r2, r3, r2, r3
 8003906:	0c9b      	lsrs	r3, r3, #18
 8003908:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	68ba      	ldr	r2, [r7, #8]
 800391a:	430a      	orrs	r2, r1
 800391c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	6a1b      	ldr	r3, [r3, #32]
 8003924:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	4a6a      	ldr	r2, [pc, #424]	; (8003ad8 <HAL_I2C_Init+0x274>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d802      	bhi.n	8003938 <HAL_I2C_Init+0xd4>
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	3301      	adds	r3, #1
 8003936:	e009      	b.n	800394c <HAL_I2C_Init+0xe8>
 8003938:	68bb      	ldr	r3, [r7, #8]
 800393a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	4a69      	ldr	r2, [pc, #420]	; (8003ae8 <HAL_I2C_Init+0x284>)
 8003944:	fba2 2303 	umull	r2, r3, r2, r3
 8003948:	099b      	lsrs	r3, r3, #6
 800394a:	3301      	adds	r3, #1
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	430b      	orrs	r3, r1
 8003952:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800395e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	495c      	ldr	r1, [pc, #368]	; (8003ad8 <HAL_I2C_Init+0x274>)
 8003968:	428b      	cmp	r3, r1
 800396a:	d819      	bhi.n	80039a0 <HAL_I2C_Init+0x13c>
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	1e59      	subs	r1, r3, #1
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	fbb1 f3f3 	udiv	r3, r1, r3
 800397a:	1c59      	adds	r1, r3, #1
 800397c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003980:	400b      	ands	r3, r1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d00a      	beq.n	800399c <HAL_I2C_Init+0x138>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	1e59      	subs	r1, r3, #1
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	005b      	lsls	r3, r3, #1
 8003990:	fbb1 f3f3 	udiv	r3, r1, r3
 8003994:	3301      	adds	r3, #1
 8003996:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800399a:	e051      	b.n	8003a40 <HAL_I2C_Init+0x1dc>
 800399c:	2304      	movs	r3, #4
 800399e:	e04f      	b.n	8003a40 <HAL_I2C_Init+0x1dc>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d111      	bne.n	80039cc <HAL_I2C_Init+0x168>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	1e58      	subs	r0, r3, #1
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6859      	ldr	r1, [r3, #4]
 80039b0:	460b      	mov	r3, r1
 80039b2:	005b      	lsls	r3, r3, #1
 80039b4:	440b      	add	r3, r1
 80039b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80039ba:	3301      	adds	r3, #1
 80039bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	bf0c      	ite	eq
 80039c4:	2301      	moveq	r3, #1
 80039c6:	2300      	movne	r3, #0
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	e012      	b.n	80039f2 <HAL_I2C_Init+0x18e>
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	1e58      	subs	r0, r3, #1
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6859      	ldr	r1, [r3, #4]
 80039d4:	460b      	mov	r3, r1
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	0099      	lsls	r1, r3, #2
 80039dc:	440b      	add	r3, r1
 80039de:	fbb0 f3f3 	udiv	r3, r0, r3
 80039e2:	3301      	adds	r3, #1
 80039e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	bf0c      	ite	eq
 80039ec:	2301      	moveq	r3, #1
 80039ee:	2300      	movne	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d001      	beq.n	80039fa <HAL_I2C_Init+0x196>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e022      	b.n	8003a40 <HAL_I2C_Init+0x1dc>
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d10e      	bne.n	8003a20 <HAL_I2C_Init+0x1bc>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	1e58      	subs	r0, r3, #1
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6859      	ldr	r1, [r3, #4]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	005b      	lsls	r3, r3, #1
 8003a0e:	440b      	add	r3, r1
 8003a10:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a14:	3301      	adds	r3, #1
 8003a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003a1e:	e00f      	b.n	8003a40 <HAL_I2C_Init+0x1dc>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	1e58      	subs	r0, r3, #1
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6859      	ldr	r1, [r3, #4]
 8003a28:	460b      	mov	r3, r1
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	0099      	lsls	r1, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	fbb0 f3f3 	udiv	r3, r0, r3
 8003a36:	3301      	adds	r3, #1
 8003a38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003a3c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	6809      	ldr	r1, [r1, #0]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	69da      	ldr	r2, [r3, #28]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6a1b      	ldr	r3, [r3, #32]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	430a      	orrs	r2, r1
 8003a62:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003a6e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	6911      	ldr	r1, [r2, #16]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	68d2      	ldr	r2, [r2, #12]
 8003a7a:	4311      	orrs	r1, r2
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6812      	ldr	r2, [r2, #0]
 8003a80:	430b      	orrs	r3, r1
 8003a82:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	695a      	ldr	r2, [r3, #20]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	431a      	orrs	r2, r3
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	430a      	orrs	r2, r1
 8003a9e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	681a      	ldr	r2, [r3, #0]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	000186a0 	.word	0x000186a0
 8003adc:	001e847f 	.word	0x001e847f
 8003ae0:	003d08ff 	.word	0x003d08ff
 8003ae4:	431bde83 	.word	0x431bde83
 8003ae8:	10624dd3 	.word	0x10624dd3

08003aec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b088      	sub	sp, #32
 8003af0:	af02      	add	r7, sp, #8
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	607a      	str	r2, [r7, #4]
 8003af6:	461a      	mov	r2, r3
 8003af8:	460b      	mov	r3, r1
 8003afa:	817b      	strh	r3, [r7, #10]
 8003afc:	4613      	mov	r3, r2
 8003afe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b00:	f7fd fb56 	bl	80011b0 <HAL_GetTick>
 8003b04:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	2b20      	cmp	r3, #32
 8003b10:	f040 80e0 	bne.w	8003cd4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	9300      	str	r3, [sp, #0]
 8003b18:	2319      	movs	r3, #25
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	4970      	ldr	r1, [pc, #448]	; (8003ce0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003b1e:	68f8      	ldr	r0, [r7, #12]
 8003b20:	f000 fc58 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	e0d3      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_I2C_Master_Transmit+0x50>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e0cc      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0x1ea>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0301 	and.w	r3, r3, #1
 8003b4e:	2b01      	cmp	r3, #1
 8003b50:	d007      	beq.n	8003b62 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b70:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2221      	movs	r2, #33	; 0x21
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	2210      	movs	r2, #16
 8003b7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	2200      	movs	r2, #0
 8003b86:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	687a      	ldr	r2, [r7, #4]
 8003b8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	893a      	ldrh	r2, [r7, #8]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29a      	uxth	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a50      	ldr	r2, [pc, #320]	; (8003ce4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003ba2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003ba4:	8979      	ldrh	r1, [r7, #10]
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	6a3a      	ldr	r2, [r7, #32]
 8003baa:	68f8      	ldr	r0, [r7, #12]
 8003bac:	f000 fac2 	bl	8004134 <I2C_MasterRequestWrite>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d001      	beq.n	8003bba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e08d      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bba:	2300      	movs	r3, #0
 8003bbc:	613b      	str	r3, [r7, #16]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	695b      	ldr	r3, [r3, #20]
 8003bc4:	613b      	str	r3, [r7, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	699b      	ldr	r3, [r3, #24]
 8003bcc:	613b      	str	r3, [r7, #16]
 8003bce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003bd0:	e066      	b.n	8003ca0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	6a39      	ldr	r1, [r7, #32]
 8003bd6:	68f8      	ldr	r0, [r7, #12]
 8003bd8:	f000 fcd2 	bl	8004580 <I2C_WaitOnTXEFlagUntilTimeout>
 8003bdc:	4603      	mov	r3, r0
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d00d      	beq.n	8003bfe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be6:	2b04      	cmp	r3, #4
 8003be8:	d107      	bne.n	8003bfa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681a      	ldr	r2, [r3, #0]
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bf8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bfa:	2301      	movs	r3, #1
 8003bfc:	e06b      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c02:	781a      	ldrb	r2, [r3, #0]
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0e:	1c5a      	adds	r2, r3, #1
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	b29a      	uxth	r2, r3
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b04      	cmp	r3, #4
 8003c3a:	d11b      	bne.n	8003c74 <HAL_I2C_Master_Transmit+0x188>
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d017      	beq.n	8003c74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c48:	781a      	ldrb	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c54:	1c5a      	adds	r2, r3, #1
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	3b01      	subs	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c74:	697a      	ldr	r2, [r7, #20]
 8003c76:	6a39      	ldr	r1, [r7, #32]
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 fcc2 	bl	8004602 <I2C_WaitOnBTFFlagUntilTimeout>
 8003c7e:	4603      	mov	r3, r0
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00d      	beq.n	8003ca0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c88:	2b04      	cmp	r3, #4
 8003c8a:	d107      	bne.n	8003c9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	e01a      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d194      	bne.n	8003bd2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2220      	movs	r2, #32
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	2200      	movs	r2, #0
 8003cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	e000      	b.n	8003cd6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003cd4:	2302      	movs	r3, #2
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3718      	adds	r7, #24
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	00100002 	.word	0x00100002
 8003ce4:	ffff0000 	.word	0xffff0000

08003ce8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08c      	sub	sp, #48	; 0x30
 8003cec:	af02      	add	r7, sp, #8
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	607a      	str	r2, [r7, #4]
 8003cf2:	461a      	mov	r2, r3
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	817b      	strh	r3, [r7, #10]
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003cfc:	f7fd fa58 	bl	80011b0 <HAL_GetTick>
 8003d00:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d08:	b2db      	uxtb	r3, r3
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	f040 820b 	bne.w	8004126 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	2319      	movs	r3, #25
 8003d16:	2201      	movs	r2, #1
 8003d18:	497c      	ldr	r1, [pc, #496]	; (8003f0c <HAL_I2C_Master_Receive+0x224>)
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f000 fb5a 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d001      	beq.n	8003d2a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003d26:	2302      	movs	r3, #2
 8003d28:	e1fe      	b.n	8004128 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d101      	bne.n	8003d38 <HAL_I2C_Master_Receive+0x50>
 8003d34:	2302      	movs	r3, #2
 8003d36:	e1f7      	b.n	8004128 <HAL_I2C_Master_Receive+0x440>
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0301 	and.w	r3, r3, #1
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d007      	beq.n	8003d5e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f042 0201 	orr.w	r2, r2, #1
 8003d5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	681a      	ldr	r2, [r3, #0]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d6c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	2222      	movs	r2, #34	; 0x22
 8003d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	2210      	movs	r2, #16
 8003d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	2200      	movs	r2, #0
 8003d82:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	687a      	ldr	r2, [r7, #4]
 8003d88:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	893a      	ldrh	r2, [r7, #8]
 8003d8e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	4a5c      	ldr	r2, [pc, #368]	; (8003f10 <HAL_I2C_Master_Receive+0x228>)
 8003d9e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003da0:	8979      	ldrh	r1, [r7, #10]
 8003da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 fa46 	bl	8004238 <I2C_MasterRequestRead>
 8003dac:	4603      	mov	r3, r0
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d001      	beq.n	8003db6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003db2:	2301      	movs	r3, #1
 8003db4:	e1b8      	b.n	8004128 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d113      	bne.n	8003de6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	623b      	str	r3, [r7, #32]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	623b      	str	r3, [r7, #32]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	623b      	str	r3, [r7, #32]
 8003dd2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de2:	601a      	str	r2, [r3, #0]
 8003de4:	e18c      	b.n	8004100 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d11b      	bne.n	8003e26 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	681a      	ldr	r2, [r3, #0]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	695b      	ldr	r3, [r3, #20]
 8003e08:	61fb      	str	r3, [r7, #28]
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	699b      	ldr	r3, [r3, #24]
 8003e10:	61fb      	str	r3, [r7, #28]
 8003e12:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003e22:	601a      	str	r2, [r3, #0]
 8003e24:	e16c      	b.n	8004100 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e2a:	2b02      	cmp	r3, #2
 8003e2c:	d11b      	bne.n	8003e66 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e3c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	681a      	ldr	r2, [r3, #0]
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e4c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e4e:	2300      	movs	r3, #0
 8003e50:	61bb      	str	r3, [r7, #24]
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695b      	ldr	r3, [r3, #20]
 8003e58:	61bb      	str	r3, [r7, #24]
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	699b      	ldr	r3, [r3, #24]
 8003e60:	61bb      	str	r3, [r7, #24]
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	e14c      	b.n	8004100 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003e74:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	617b      	str	r3, [r7, #20]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	699b      	ldr	r3, [r3, #24]
 8003e88:	617b      	str	r3, [r7, #20]
 8003e8a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e8c:	e138      	b.n	8004100 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e92:	2b03      	cmp	r3, #3
 8003e94:	f200 80f1 	bhi.w	800407a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	d123      	bne.n	8003ee8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ea2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 fbed 	bl	8004684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e139      	b.n	8004128 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	691a      	ldr	r2, [r3, #16]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ebe:	b2d2      	uxtb	r2, r2
 8003ec0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec6:	1c5a      	adds	r2, r3, #1
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	b29a      	uxth	r2, r3
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	3b01      	subs	r3, #1
 8003ee0:	b29a      	uxth	r2, r3
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003ee6:	e10b      	b.n	8004100 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d14e      	bne.n	8003f8e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	9300      	str	r3, [sp, #0]
 8003ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	4906      	ldr	r1, [pc, #24]	; (8003f14 <HAL_I2C_Master_Receive+0x22c>)
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f000 fa6a 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d008      	beq.n	8003f18 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e10e      	b.n	8004128 <HAL_I2C_Master_Receive+0x440>
 8003f0a:	bf00      	nop
 8003f0c:	00100002 	.word	0x00100002
 8003f10:	ffff0000 	.word	0xffff0000
 8003f14:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f26:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f32:	b2d2      	uxtb	r2, r2
 8003f34:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f3a:	1c5a      	adds	r2, r3, #1
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	3b01      	subs	r3, #1
 8003f54:	b29a      	uxth	r2, r3
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	691a      	ldr	r2, [r3, #16]
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f64:	b2d2      	uxtb	r2, r2
 8003f66:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f76:	3b01      	subs	r3, #1
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	3b01      	subs	r3, #1
 8003f86:	b29a      	uxth	r2, r3
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003f8c:	e0b8      	b.n	8004100 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f90:	9300      	str	r3, [sp, #0]
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	2200      	movs	r2, #0
 8003f96:	4966      	ldr	r1, [pc, #408]	; (8004130 <HAL_I2C_Master_Receive+0x448>)
 8003f98:	68f8      	ldr	r0, [r7, #12]
 8003f9a:	f000 fa1b 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d001      	beq.n	8003fa8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e0bf      	b.n	8004128 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fb6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	691a      	ldr	r2, [r3, #16]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	b2d2      	uxtb	r2, r2
 8003fc4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	1c5a      	adds	r2, r3, #1
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd4:	3b01      	subs	r3, #1
 8003fd6:	b29a      	uxth	r2, r3
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	3b01      	subs	r3, #1
 8003fe4:	b29a      	uxth	r2, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	494f      	ldr	r1, [pc, #316]	; (8004130 <HAL_I2C_Master_Receive+0x448>)
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 f9ed 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e091      	b.n	8004128 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004012:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	691a      	ldr	r2, [r3, #16]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	b2d2      	uxtb	r2, r2
 8004020:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004026:	1c5a      	adds	r2, r3, #1
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004030:	3b01      	subs	r3, #1
 8004032:	b29a      	uxth	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	691a      	ldr	r2, [r3, #16]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	b2d2      	uxtb	r2, r2
 8004052:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004058:	1c5a      	adds	r2, r3, #1
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004062:	3b01      	subs	r3, #1
 8004064:	b29a      	uxth	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800406e:	b29b      	uxth	r3, r3
 8004070:	3b01      	subs	r3, #1
 8004072:	b29a      	uxth	r2, r3
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004078:	e042      	b.n	8004100 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800407a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800407c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 fb00 	bl	8004684 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004084:	4603      	mov	r3, r0
 8004086:	2b00      	cmp	r3, #0
 8004088:	d001      	beq.n	800408e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800408a:	2301      	movs	r3, #1
 800408c:	e04c      	b.n	8004128 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	695b      	ldr	r3, [r3, #20]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d118      	bne.n	8004100 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	691a      	ldr	r2, [r3, #16]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	b2d2      	uxtb	r2, r2
 80040da:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e0:	1c5a      	adds	r2, r3, #1
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ea:	3b01      	subs	r3, #1
 80040ec:	b29a      	uxth	r2, r3
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b29a      	uxth	r2, r3
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004104:	2b00      	cmp	r3, #0
 8004106:	f47f aec2 	bne.w	8003e8e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2200      	movs	r2, #0
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004122:	2300      	movs	r3, #0
 8004124:	e000      	b.n	8004128 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004126:	2302      	movs	r3, #2
  }
}
 8004128:	4618      	mov	r0, r3
 800412a:	3728      	adds	r7, #40	; 0x28
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}
 8004130:	00010004 	.word	0x00010004

08004134 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b088      	sub	sp, #32
 8004138:	af02      	add	r7, sp, #8
 800413a:	60f8      	str	r0, [r7, #12]
 800413c:	607a      	str	r2, [r7, #4]
 800413e:	603b      	str	r3, [r7, #0]
 8004140:	460b      	mov	r3, r1
 8004142:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004148:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800414a:	697b      	ldr	r3, [r7, #20]
 800414c:	2b08      	cmp	r3, #8
 800414e:	d006      	beq.n	800415e <I2C_MasterRequestWrite+0x2a>
 8004150:	697b      	ldr	r3, [r7, #20]
 8004152:	2b01      	cmp	r3, #1
 8004154:	d003      	beq.n	800415e <I2C_MasterRequestWrite+0x2a>
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800415c:	d108      	bne.n	8004170 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800416c:	601a      	str	r2, [r3, #0]
 800416e:	e00b      	b.n	8004188 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004174:	2b12      	cmp	r3, #18
 8004176:	d107      	bne.n	8004188 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004186:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004188:	683b      	ldr	r3, [r7, #0]
 800418a:	9300      	str	r3, [sp, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 f91d 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 800419a:	4603      	mov	r3, r0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00d      	beq.n	80041bc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80041ae:	d103      	bne.n	80041b8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041b6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80041b8:	2303      	movs	r3, #3
 80041ba:	e035      	b.n	8004228 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	691b      	ldr	r3, [r3, #16]
 80041c0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041c4:	d108      	bne.n	80041d8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041c6:	897b      	ldrh	r3, [r7, #10]
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	461a      	mov	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80041d4:	611a      	str	r2, [r3, #16]
 80041d6:	e01b      	b.n	8004210 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80041d8:	897b      	ldrh	r3, [r7, #10]
 80041da:	11db      	asrs	r3, r3, #7
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	f003 0306 	and.w	r3, r3, #6
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	f063 030f 	orn	r3, r3, #15
 80041e8:	b2da      	uxtb	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	490e      	ldr	r1, [pc, #56]	; (8004230 <I2C_MasterRequestWrite+0xfc>)
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 f943 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e010      	b.n	8004228 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004206:	897b      	ldrh	r3, [r7, #10]
 8004208:	b2da      	uxtb	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	4907      	ldr	r1, [pc, #28]	; (8004234 <I2C_MasterRequestWrite+0x100>)
 8004216:	68f8      	ldr	r0, [r7, #12]
 8004218:	f000 f933 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800421c:	4603      	mov	r3, r0
 800421e:	2b00      	cmp	r3, #0
 8004220:	d001      	beq.n	8004226 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004222:	2301      	movs	r3, #1
 8004224:	e000      	b.n	8004228 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004226:	2300      	movs	r3, #0
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	00010008 	.word	0x00010008
 8004234:	00010002 	.word	0x00010002

08004238 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	603b      	str	r3, [r7, #0]
 8004244:	460b      	mov	r3, r1
 8004246:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800424c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800425c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	2b08      	cmp	r3, #8
 8004262:	d006      	beq.n	8004272 <I2C_MasterRequestRead+0x3a>
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d003      	beq.n	8004272 <I2C_MasterRequestRead+0x3a>
 800426a:	697b      	ldr	r3, [r7, #20]
 800426c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004270:	d108      	bne.n	8004284 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004280:	601a      	str	r2, [r3, #0]
 8004282:	e00b      	b.n	800429c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004288:	2b11      	cmp	r3, #17
 800428a:	d107      	bne.n	800429c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800429a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	9300      	str	r3, [sp, #0]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042a8:	68f8      	ldr	r0, [r7, #12]
 80042aa:	f000 f893 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 80042ae:	4603      	mov	r3, r0
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d00d      	beq.n	80042d0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042c2:	d103      	bne.n	80042cc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042ca:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80042cc:	2303      	movs	r3, #3
 80042ce:	e079      	b.n	80043c4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	691b      	ldr	r3, [r3, #16]
 80042d4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042d8:	d108      	bne.n	80042ec <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80042da:	897b      	ldrh	r3, [r7, #10]
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	f043 0301 	orr.w	r3, r3, #1
 80042e2:	b2da      	uxtb	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	611a      	str	r2, [r3, #16]
 80042ea:	e05f      	b.n	80043ac <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80042ec:	897b      	ldrh	r3, [r7, #10]
 80042ee:	11db      	asrs	r3, r3, #7
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	f003 0306 	and.w	r3, r3, #6
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	f063 030f 	orn	r3, r3, #15
 80042fc:	b2da      	uxtb	r2, r3
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	687a      	ldr	r2, [r7, #4]
 8004308:	4930      	ldr	r1, [pc, #192]	; (80043cc <I2C_MasterRequestRead+0x194>)
 800430a:	68f8      	ldr	r0, [r7, #12]
 800430c:	f000 f8b9 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004310:	4603      	mov	r3, r0
 8004312:	2b00      	cmp	r3, #0
 8004314:	d001      	beq.n	800431a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	e054      	b.n	80043c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800431a:	897b      	ldrh	r3, [r7, #10]
 800431c:	b2da      	uxtb	r2, r3
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4929      	ldr	r1, [pc, #164]	; (80043d0 <I2C_MasterRequestRead+0x198>)
 800432a:	68f8      	ldr	r0, [r7, #12]
 800432c:	f000 f8a9 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d001      	beq.n	800433a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	e044      	b.n	80043c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800433a:	2300      	movs	r3, #0
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	695b      	ldr	r3, [r3, #20]
 8004344:	613b      	str	r3, [r7, #16]
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	613b      	str	r3, [r7, #16]
 800434e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800435e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	9300      	str	r3, [sp, #0]
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2200      	movs	r2, #0
 8004368:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 f831 	bl	80043d4 <I2C_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d00d      	beq.n	8004394 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004382:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004386:	d103      	bne.n	8004390 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800438e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004390:	2303      	movs	r3, #3
 8004392:	e017      	b.n	80043c4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004394:	897b      	ldrh	r3, [r7, #10]
 8004396:	11db      	asrs	r3, r3, #7
 8004398:	b2db      	uxtb	r3, r3
 800439a:	f003 0306 	and.w	r3, r3, #6
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	f063 030e 	orn	r3, r3, #14
 80043a4:	b2da      	uxtb	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	4907      	ldr	r1, [pc, #28]	; (80043d0 <I2C_MasterRequestRead+0x198>)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f865 	bl	8004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e000      	b.n	80043c4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80043c2:	2300      	movs	r3, #0
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	3718      	adds	r7, #24
 80043c8:	46bd      	mov	sp, r7
 80043ca:	bd80      	pop	{r7, pc}
 80043cc:	00010008 	.word	0x00010008
 80043d0:	00010002 	.word	0x00010002

080043d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	b084      	sub	sp, #16
 80043d8:	af00      	add	r7, sp, #0
 80043da:	60f8      	str	r0, [r7, #12]
 80043dc:	60b9      	str	r1, [r7, #8]
 80043de:	603b      	str	r3, [r7, #0]
 80043e0:	4613      	mov	r3, r2
 80043e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80043e4:	e025      	b.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ec:	d021      	beq.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ee:	f7fc fedf 	bl	80011b0 <HAL_GetTick>
 80043f2:	4602      	mov	r2, r0
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	1ad3      	subs	r3, r2, r3
 80043f8:	683a      	ldr	r2, [r7, #0]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d302      	bcc.n	8004404 <I2C_WaitOnFlagUntilTimeout+0x30>
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d116      	bne.n	8004432 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	2220      	movs	r2, #32
 800440e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2200      	movs	r2, #0
 8004416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800441e:	f043 0220 	orr.w	r2, r3, #32
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	2200      	movs	r2, #0
 800442a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e023      	b.n	800447a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	0c1b      	lsrs	r3, r3, #16
 8004436:	b2db      	uxtb	r3, r3
 8004438:	2b01      	cmp	r3, #1
 800443a:	d10d      	bne.n	8004458 <I2C_WaitOnFlagUntilTimeout+0x84>
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	695b      	ldr	r3, [r3, #20]
 8004442:	43da      	mvns	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4013      	ands	r3, r2
 8004448:	b29b      	uxth	r3, r3
 800444a:	2b00      	cmp	r3, #0
 800444c:	bf0c      	ite	eq
 800444e:	2301      	moveq	r3, #1
 8004450:	2300      	movne	r3, #0
 8004452:	b2db      	uxtb	r3, r3
 8004454:	461a      	mov	r2, r3
 8004456:	e00c      	b.n	8004472 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	43da      	mvns	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	4013      	ands	r3, r2
 8004464:	b29b      	uxth	r3, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	bf0c      	ite	eq
 800446a:	2301      	moveq	r3, #1
 800446c:	2300      	movne	r3, #0
 800446e:	b2db      	uxtb	r3, r3
 8004470:	461a      	mov	r2, r3
 8004472:	79fb      	ldrb	r3, [r7, #7]
 8004474:	429a      	cmp	r2, r3
 8004476:	d0b6      	beq.n	80043e6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004478:	2300      	movs	r3, #0
}
 800447a:	4618      	mov	r0, r3
 800447c:	3710      	adds	r7, #16
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}

08004482 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004482:	b580      	push	{r7, lr}
 8004484:	b084      	sub	sp, #16
 8004486:	af00      	add	r7, sp, #0
 8004488:	60f8      	str	r0, [r7, #12]
 800448a:	60b9      	str	r1, [r7, #8]
 800448c:	607a      	str	r2, [r7, #4]
 800448e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004490:	e051      	b.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	695b      	ldr	r3, [r3, #20]
 8004498:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800449c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044a0:	d123      	bne.n	80044ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	681a      	ldr	r2, [r3, #0]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044b0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80044ba:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	2200      	movs	r2, #0
 80044c0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	2220      	movs	r2, #32
 80044c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d6:	f043 0204 	orr.w	r2, r3, #4
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2200      	movs	r2, #0
 80044e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	e046      	b.n	8004578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044f0:	d021      	beq.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f2:	f7fc fe5d 	bl	80011b0 <HAL_GetTick>
 80044f6:	4602      	mov	r2, r0
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	1ad3      	subs	r3, r2, r3
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d116      	bne.n	8004536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2200      	movs	r2, #0
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2220      	movs	r2, #32
 8004512:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2200      	movs	r2, #0
 800451a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	2200      	movs	r2, #0
 800452e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e020      	b.n	8004578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	0c1b      	lsrs	r3, r3, #16
 800453a:	b2db      	uxtb	r3, r3
 800453c:	2b01      	cmp	r3, #1
 800453e:	d10c      	bne.n	800455a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	695b      	ldr	r3, [r3, #20]
 8004546:	43da      	mvns	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	4013      	ands	r3, r2
 800454c:	b29b      	uxth	r3, r3
 800454e:	2b00      	cmp	r3, #0
 8004550:	bf14      	ite	ne
 8004552:	2301      	movne	r3, #1
 8004554:	2300      	moveq	r3, #0
 8004556:	b2db      	uxtb	r3, r3
 8004558:	e00b      	b.n	8004572 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	699b      	ldr	r3, [r3, #24]
 8004560:	43da      	mvns	r2, r3
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	4013      	ands	r3, r2
 8004566:	b29b      	uxth	r3, r3
 8004568:	2b00      	cmp	r3, #0
 800456a:	bf14      	ite	ne
 800456c:	2301      	movne	r3, #1
 800456e:	2300      	moveq	r3, #0
 8004570:	b2db      	uxtb	r3, r3
 8004572:	2b00      	cmp	r3, #0
 8004574:	d18d      	bne.n	8004492 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3710      	adds	r7, #16
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}

08004580 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b084      	sub	sp, #16
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800458c:	e02d      	b.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800458e:	68f8      	ldr	r0, [r7, #12]
 8004590:	f000 f8ce 	bl	8004730 <I2C_IsAcknowledgeFailed>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d001      	beq.n	800459e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e02d      	b.n	80045fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a4:	d021      	beq.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045a6:	f7fc fe03 	bl	80011b0 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d302      	bcc.n	80045bc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d116      	bne.n	80045ea <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2220      	movs	r2, #32
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2200      	movs	r2, #0
 80045ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f043 0220 	orr.w	r2, r3, #32
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80045e6:	2301      	movs	r3, #1
 80045e8:	e007      	b.n	80045fa <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	695b      	ldr	r3, [r3, #20]
 80045f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045f4:	2b80      	cmp	r3, #128	; 0x80
 80045f6:	d1ca      	bne.n	800458e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80045f8:	2300      	movs	r3, #0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3710      	adds	r7, #16
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}

08004602 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b084      	sub	sp, #16
 8004606:	af00      	add	r7, sp, #0
 8004608:	60f8      	str	r0, [r7, #12]
 800460a:	60b9      	str	r1, [r7, #8]
 800460c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800460e:	e02d      	b.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 f88d 	bl	8004730 <I2C_IsAcknowledgeFailed>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e02d      	b.n	800467c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004626:	d021      	beq.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004628:	f7fc fdc2 	bl	80011b0 <HAL_GetTick>
 800462c:	4602      	mov	r2, r0
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	1ad3      	subs	r3, r2, r3
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	429a      	cmp	r2, r3
 8004636:	d302      	bcc.n	800463e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d116      	bne.n	800466c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	2220      	movs	r2, #32
 8004648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	f043 0220 	orr.w	r2, r3, #32
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e007      	b.n	800467c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	f003 0304 	and.w	r3, r3, #4
 8004676:	2b04      	cmp	r3, #4
 8004678:	d1ca      	bne.n	8004610 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3710      	adds	r7, #16
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}

08004684 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	60f8      	str	r0, [r7, #12]
 800468c:	60b9      	str	r1, [r7, #8]
 800468e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004690:	e042      	b.n	8004718 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	695b      	ldr	r3, [r3, #20]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	2b10      	cmp	r3, #16
 800469e:	d119      	bne.n	80046d4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f06f 0210 	mvn.w	r2, #16
 80046a8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	2200      	movs	r2, #0
 80046ae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	2220      	movs	r2, #32
 80046b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2200      	movs	r2, #0
 80046cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e029      	b.n	8004728 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046d4:	f7fc fd6c 	bl	80011b0 <HAL_GetTick>
 80046d8:	4602      	mov	r2, r0
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	1ad3      	subs	r3, r2, r3
 80046de:	68ba      	ldr	r2, [r7, #8]
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d302      	bcc.n	80046ea <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80046e4:	68bb      	ldr	r3, [r7, #8]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d116      	bne.n	8004718 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004704:	f043 0220 	orr.w	r2, r3, #32
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e007      	b.n	8004728 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004722:	2b40      	cmp	r3, #64	; 0x40
 8004724:	d1b5      	bne.n	8004692 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	4618      	mov	r0, r3
 800472a:	3710      	adds	r7, #16
 800472c:	46bd      	mov	sp, r7
 800472e:	bd80      	pop	{r7, pc}

08004730 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004730:	b480      	push	{r7}
 8004732:	b083      	sub	sp, #12
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	695b      	ldr	r3, [r3, #20]
 800473e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004742:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004746:	d11b      	bne.n	8004780 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004750:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	2200      	movs	r2, #0
 8004756:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2220      	movs	r2, #32
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476c:	f043 0204 	orr.w	r2, r3, #4
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e000      	b.n	8004782 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004780:	2300      	movs	r3, #0
}
 8004782:	4618      	mov	r0, r3
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e267      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f003 0301 	and.w	r3, r3, #1
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d075      	beq.n	800489a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047ae:	4b88      	ldr	r3, [pc, #544]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f003 030c 	and.w	r3, r3, #12
 80047b6:	2b04      	cmp	r3, #4
 80047b8:	d00c      	beq.n	80047d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047ba:	4b85      	ldr	r3, [pc, #532]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047c2:	2b08      	cmp	r3, #8
 80047c4:	d112      	bne.n	80047ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047c6:	4b82      	ldr	r3, [pc, #520]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80047c8:	685b      	ldr	r3, [r3, #4]
 80047ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047d2:	d10b      	bne.n	80047ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047d4:	4b7e      	ldr	r3, [pc, #504]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d05b      	beq.n	8004898 <HAL_RCC_OscConfig+0x108>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d157      	bne.n	8004898 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e242      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f4:	d106      	bne.n	8004804 <HAL_RCC_OscConfig+0x74>
 80047f6:	4b76      	ldr	r3, [pc, #472]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a75      	ldr	r2, [pc, #468]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80047fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004800:	6013      	str	r3, [r2, #0]
 8004802:	e01d      	b.n	8004840 <HAL_RCC_OscConfig+0xb0>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800480c:	d10c      	bne.n	8004828 <HAL_RCC_OscConfig+0x98>
 800480e:	4b70      	ldr	r3, [pc, #448]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a6f      	ldr	r2, [pc, #444]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004814:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	4b6d      	ldr	r3, [pc, #436]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a6c      	ldr	r2, [pc, #432]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004820:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004824:	6013      	str	r3, [r2, #0]
 8004826:	e00b      	b.n	8004840 <HAL_RCC_OscConfig+0xb0>
 8004828:	4b69      	ldr	r3, [pc, #420]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	4a68      	ldr	r2, [pc, #416]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800482e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004832:	6013      	str	r3, [r2, #0]
 8004834:	4b66      	ldr	r3, [pc, #408]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a65      	ldr	r2, [pc, #404]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800483a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800483e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d013      	beq.n	8004870 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004848:	f7fc fcb2 	bl	80011b0 <HAL_GetTick>
 800484c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800484e:	e008      	b.n	8004862 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004850:	f7fc fcae 	bl	80011b0 <HAL_GetTick>
 8004854:	4602      	mov	r2, r0
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	2b64      	cmp	r3, #100	; 0x64
 800485c:	d901      	bls.n	8004862 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e207      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004862:	4b5b      	ldr	r3, [pc, #364]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d0f0      	beq.n	8004850 <HAL_RCC_OscConfig+0xc0>
 800486e:	e014      	b.n	800489a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004870:	f7fc fc9e 	bl	80011b0 <HAL_GetTick>
 8004874:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004876:	e008      	b.n	800488a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004878:	f7fc fc9a 	bl	80011b0 <HAL_GetTick>
 800487c:	4602      	mov	r2, r0
 800487e:	693b      	ldr	r3, [r7, #16]
 8004880:	1ad3      	subs	r3, r2, r3
 8004882:	2b64      	cmp	r3, #100	; 0x64
 8004884:	d901      	bls.n	800488a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e1f3      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800488a:	4b51      	ldr	r3, [pc, #324]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1f0      	bne.n	8004878 <HAL_RCC_OscConfig+0xe8>
 8004896:	e000      	b.n	800489a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004898:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d063      	beq.n	800496e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048a6:	4b4a      	ldr	r3, [pc, #296]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80048a8:	689b      	ldr	r3, [r3, #8]
 80048aa:	f003 030c 	and.w	r3, r3, #12
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00b      	beq.n	80048ca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048b2:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80048b4:	689b      	ldr	r3, [r3, #8]
 80048b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80048ba:	2b08      	cmp	r3, #8
 80048bc:	d11c      	bne.n	80048f8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80048be:	4b44      	ldr	r3, [pc, #272]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d116      	bne.n	80048f8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048ca:	4b41      	ldr	r3, [pc, #260]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0302 	and.w	r3, r3, #2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d005      	beq.n	80048e2 <HAL_RCC_OscConfig+0x152>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	2b01      	cmp	r3, #1
 80048dc:	d001      	beq.n	80048e2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e1c7      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80048e2:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	00db      	lsls	r3, r3, #3
 80048f0:	4937      	ldr	r1, [pc, #220]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80048f2:	4313      	orrs	r3, r2
 80048f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80048f6:	e03a      	b.n	800496e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	68db      	ldr	r3, [r3, #12]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d020      	beq.n	8004942 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004900:	4b34      	ldr	r3, [pc, #208]	; (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004902:	2201      	movs	r2, #1
 8004904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004906:	f7fc fc53 	bl	80011b0 <HAL_GetTick>
 800490a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800490c:	e008      	b.n	8004920 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800490e:	f7fc fc4f 	bl	80011b0 <HAL_GetTick>
 8004912:	4602      	mov	r2, r0
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	1ad3      	subs	r3, r2, r3
 8004918:	2b02      	cmp	r3, #2
 800491a:	d901      	bls.n	8004920 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e1a8      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004920:	4b2b      	ldr	r3, [pc, #172]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0302 	and.w	r3, r3, #2
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f0      	beq.n	800490e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800492c:	4b28      	ldr	r3, [pc, #160]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	00db      	lsls	r3, r3, #3
 800493a:	4925      	ldr	r1, [pc, #148]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 800493c:	4313      	orrs	r3, r2
 800493e:	600b      	str	r3, [r1, #0]
 8004940:	e015      	b.n	800496e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004942:	4b24      	ldr	r3, [pc, #144]	; (80049d4 <HAL_RCC_OscConfig+0x244>)
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fc fc32 	bl	80011b0 <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004950:	f7fc fc2e 	bl	80011b0 <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b02      	cmp	r3, #2
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e187      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004962:	4b1b      	ldr	r3, [pc, #108]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f003 0302 	and.w	r3, r3, #2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1f0      	bne.n	8004950 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f003 0308 	and.w	r3, r3, #8
 8004976:	2b00      	cmp	r3, #0
 8004978:	d036      	beq.n	80049e8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	695b      	ldr	r3, [r3, #20]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d016      	beq.n	80049b0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004982:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <HAL_RCC_OscConfig+0x248>)
 8004984:	2201      	movs	r2, #1
 8004986:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004988:	f7fc fc12 	bl	80011b0 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004990:	f7fc fc0e 	bl	80011b0 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e167      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049a2:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_RCC_OscConfig+0x240>)
 80049a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a6:	f003 0302 	and.w	r3, r3, #2
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d0f0      	beq.n	8004990 <HAL_RCC_OscConfig+0x200>
 80049ae:	e01b      	b.n	80049e8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80049b0:	4b09      	ldr	r3, [pc, #36]	; (80049d8 <HAL_RCC_OscConfig+0x248>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b6:	f7fc fbfb 	bl	80011b0 <HAL_GetTick>
 80049ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049bc:	e00e      	b.n	80049dc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049be:	f7fc fbf7 	bl	80011b0 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d907      	bls.n	80049dc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e150      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
 80049d0:	40023800 	.word	0x40023800
 80049d4:	42470000 	.word	0x42470000
 80049d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80049dc:	4b88      	ldr	r3, [pc, #544]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 80049de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d1ea      	bne.n	80049be <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0304 	and.w	r3, r3, #4
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	f000 8097 	beq.w	8004b24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80049f6:	2300      	movs	r3, #0
 80049f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80049fa:	4b81      	ldr	r3, [pc, #516]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d10f      	bne.n	8004a26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	2300      	movs	r3, #0
 8004a08:	60bb      	str	r3, [r7, #8]
 8004a0a:	4b7d      	ldr	r3, [pc, #500]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	4a7c      	ldr	r2, [pc, #496]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a14:	6413      	str	r3, [r2, #64]	; 0x40
 8004a16:	4b7a      	ldr	r3, [pc, #488]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a22:	2301      	movs	r3, #1
 8004a24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a26:	4b77      	ldr	r3, [pc, #476]	; (8004c04 <HAL_RCC_OscConfig+0x474>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d118      	bne.n	8004a64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a32:	4b74      	ldr	r3, [pc, #464]	; (8004c04 <HAL_RCC_OscConfig+0x474>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a73      	ldr	r2, [pc, #460]	; (8004c04 <HAL_RCC_OscConfig+0x474>)
 8004a38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a3e:	f7fc fbb7 	bl	80011b0 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a46:	f7fc fbb3 	bl	80011b0 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e10c      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a58:	4b6a      	ldr	r3, [pc, #424]	; (8004c04 <HAL_RCC_OscConfig+0x474>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d106      	bne.n	8004a7a <HAL_RCC_OscConfig+0x2ea>
 8004a6c:	4b64      	ldr	r3, [pc, #400]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a70:	4a63      	ldr	r2, [pc, #396]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a72:	f043 0301 	orr.w	r3, r3, #1
 8004a76:	6713      	str	r3, [r2, #112]	; 0x70
 8004a78:	e01c      	b.n	8004ab4 <HAL_RCC_OscConfig+0x324>
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	689b      	ldr	r3, [r3, #8]
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d10c      	bne.n	8004a9c <HAL_RCC_OscConfig+0x30c>
 8004a82:	4b5f      	ldr	r3, [pc, #380]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a86:	4a5e      	ldr	r2, [pc, #376]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a88:	f043 0304 	orr.w	r3, r3, #4
 8004a8c:	6713      	str	r3, [r2, #112]	; 0x70
 8004a8e:	4b5c      	ldr	r3, [pc, #368]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a92:	4a5b      	ldr	r2, [pc, #364]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	6713      	str	r3, [r2, #112]	; 0x70
 8004a9a:	e00b      	b.n	8004ab4 <HAL_RCC_OscConfig+0x324>
 8004a9c:	4b58      	ldr	r3, [pc, #352]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aa0:	4a57      	ldr	r2, [pc, #348]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8004aa8:	4b55      	ldr	r3, [pc, #340]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004aac:	4a54      	ldr	r2, [pc, #336]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004aae:	f023 0304 	bic.w	r3, r3, #4
 8004ab2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d015      	beq.n	8004ae8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004abc:	f7fc fb78 	bl	80011b0 <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ac2:	e00a      	b.n	8004ada <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004ac4:	f7fc fb74 	bl	80011b0 <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d901      	bls.n	8004ada <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ad6:	2303      	movs	r3, #3
 8004ad8:	e0cb      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ada:	4b49      	ldr	r3, [pc, #292]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004adc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ade:	f003 0302 	and.w	r3, r3, #2
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d0ee      	beq.n	8004ac4 <HAL_RCC_OscConfig+0x334>
 8004ae6:	e014      	b.n	8004b12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae8:	f7fc fb62 	bl	80011b0 <HAL_GetTick>
 8004aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004aee:	e00a      	b.n	8004b06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004af0:	f7fc fb5e 	bl	80011b0 <HAL_GetTick>
 8004af4:	4602      	mov	r2, r0
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	1ad3      	subs	r3, r2, r3
 8004afa:	f241 3288 	movw	r2, #5000	; 0x1388
 8004afe:	4293      	cmp	r3, r2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e0b5      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b06:	4b3e      	ldr	r3, [pc, #248]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	f003 0302 	and.w	r3, r3, #2
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1ee      	bne.n	8004af0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b12:	7dfb      	ldrb	r3, [r7, #23]
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d105      	bne.n	8004b24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b18:	4b39      	ldr	r3, [pc, #228]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1c:	4a38      	ldr	r2, [pc, #224]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004b1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	699b      	ldr	r3, [r3, #24]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	f000 80a1 	beq.w	8004c70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b2e:	4b34      	ldr	r3, [pc, #208]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004b30:	689b      	ldr	r3, [r3, #8]
 8004b32:	f003 030c 	and.w	r3, r3, #12
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d05c      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	699b      	ldr	r3, [r3, #24]
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	d141      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b42:	4b31      	ldr	r3, [pc, #196]	; (8004c08 <HAL_RCC_OscConfig+0x478>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b48:	f7fc fb32 	bl	80011b0 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b50:	f7fc fb2e 	bl	80011b0 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e087      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b62:	4b27      	ldr	r3, [pc, #156]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	69da      	ldr	r2, [r3, #28]
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6a1b      	ldr	r3, [r3, #32]
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	019b      	lsls	r3, r3, #6
 8004b7e:	431a      	orrs	r2, r3
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b84:	085b      	lsrs	r3, r3, #1
 8004b86:	3b01      	subs	r3, #1
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b90:	061b      	lsls	r3, r3, #24
 8004b92:	491b      	ldr	r1, [pc, #108]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004b94:	4313      	orrs	r3, r2
 8004b96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b98:	4b1b      	ldr	r3, [pc, #108]	; (8004c08 <HAL_RCC_OscConfig+0x478>)
 8004b9a:	2201      	movs	r2, #1
 8004b9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b9e:	f7fc fb07 	bl	80011b0 <HAL_GetTick>
 8004ba2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ba4:	e008      	b.n	8004bb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ba6:	f7fc fb03 	bl	80011b0 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	693b      	ldr	r3, [r7, #16]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	2b02      	cmp	r3, #2
 8004bb2:	d901      	bls.n	8004bb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004bb4:	2303      	movs	r3, #3
 8004bb6:	e05c      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004bb8:	4b11      	ldr	r3, [pc, #68]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d0f0      	beq.n	8004ba6 <HAL_RCC_OscConfig+0x416>
 8004bc4:	e054      	b.n	8004c70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bc6:	4b10      	ldr	r3, [pc, #64]	; (8004c08 <HAL_RCC_OscConfig+0x478>)
 8004bc8:	2200      	movs	r2, #0
 8004bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bcc:	f7fc faf0 	bl	80011b0 <HAL_GetTick>
 8004bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bd2:	e008      	b.n	8004be6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bd4:	f7fc faec 	bl	80011b0 <HAL_GetTick>
 8004bd8:	4602      	mov	r2, r0
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	1ad3      	subs	r3, r2, r3
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d901      	bls.n	8004be6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004be2:	2303      	movs	r3, #3
 8004be4:	e045      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004be6:	4b06      	ldr	r3, [pc, #24]	; (8004c00 <HAL_RCC_OscConfig+0x470>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d1f0      	bne.n	8004bd4 <HAL_RCC_OscConfig+0x444>
 8004bf2:	e03d      	b.n	8004c70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	2b01      	cmp	r3, #1
 8004bfa:	d107      	bne.n	8004c0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004bfc:	2301      	movs	r3, #1
 8004bfe:	e038      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
 8004c00:	40023800 	.word	0x40023800
 8004c04:	40007000 	.word	0x40007000
 8004c08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c0c:	4b1b      	ldr	r3, [pc, #108]	; (8004c7c <HAL_RCC_OscConfig+0x4ec>)
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	699b      	ldr	r3, [r3, #24]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d028      	beq.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d121      	bne.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d11a      	bne.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c36:	68fa      	ldr	r2, [r7, #12]
 8004c38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004c42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d111      	bne.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c52:	085b      	lsrs	r3, r3, #1
 8004c54:	3b01      	subs	r3, #1
 8004c56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004c58:	429a      	cmp	r2, r3
 8004c5a:	d107      	bne.n	8004c6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d001      	beq.n	8004c70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e000      	b.n	8004c72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004c70:	2300      	movs	r3, #0
}
 8004c72:	4618      	mov	r0, r3
 8004c74:	3718      	adds	r7, #24
 8004c76:	46bd      	mov	sp, r7
 8004c78:	bd80      	pop	{r7, pc}
 8004c7a:	bf00      	nop
 8004c7c:	40023800 	.word	0x40023800

08004c80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
 8004c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d101      	bne.n	8004c94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c90:	2301      	movs	r3, #1
 8004c92:	e0cc      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c94:	4b68      	ldr	r3, [pc, #416]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0307 	and.w	r3, r3, #7
 8004c9c:	683a      	ldr	r2, [r7, #0]
 8004c9e:	429a      	cmp	r2, r3
 8004ca0:	d90c      	bls.n	8004cbc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ca2:	4b65      	ldr	r3, [pc, #404]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004ca4:	683a      	ldr	r2, [r7, #0]
 8004ca6:	b2d2      	uxtb	r2, r2
 8004ca8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004caa:	4b63      	ldr	r3, [pc, #396]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	f003 0307 	and.w	r3, r3, #7
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e0b8      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 0302 	and.w	r3, r3, #2
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d020      	beq.n	8004d0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	f003 0304 	and.w	r3, r3, #4
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004cd4:	4b59      	ldr	r3, [pc, #356]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cd6:	689b      	ldr	r3, [r3, #8]
 8004cd8:	4a58      	ldr	r2, [pc, #352]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cda:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004cde:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0308 	and.w	r3, r3, #8
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d005      	beq.n	8004cf8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004cec:	4b53      	ldr	r3, [pc, #332]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	4a52      	ldr	r2, [pc, #328]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004cf6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cf8:	4b50      	ldr	r3, [pc, #320]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	494d      	ldr	r1, [pc, #308]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d06:	4313      	orrs	r3, r2
 8004d08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d044      	beq.n	8004da0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2b01      	cmp	r3, #1
 8004d1c:	d107      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d1e:	4b47      	ldr	r3, [pc, #284]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d119      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	e07f      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	2b02      	cmp	r3, #2
 8004d34:	d003      	beq.n	8004d3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d3a:	2b03      	cmp	r3, #3
 8004d3c:	d107      	bne.n	8004d4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d3e:	4b3f      	ldr	r3, [pc, #252]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d109      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	e06f      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d4e:	4b3b      	ldr	r3, [pc, #236]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0302 	and.w	r3, r3, #2
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d5a:	2301      	movs	r3, #1
 8004d5c:	e067      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d5e:	4b37      	ldr	r3, [pc, #220]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	f023 0203 	bic.w	r2, r3, #3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4934      	ldr	r1, [pc, #208]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d6c:	4313      	orrs	r3, r2
 8004d6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d70:	f7fc fa1e 	bl	80011b0 <HAL_GetTick>
 8004d74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d76:	e00a      	b.n	8004d8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d78:	f7fc fa1a 	bl	80011b0 <HAL_GetTick>
 8004d7c:	4602      	mov	r2, r0
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	1ad3      	subs	r3, r2, r3
 8004d82:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e04f      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d8e:	4b2b      	ldr	r3, [pc, #172]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	f003 020c 	and.w	r2, r3, #12
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	685b      	ldr	r3, [r3, #4]
 8004d9a:	009b      	lsls	r3, r3, #2
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d1eb      	bne.n	8004d78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004da0:	4b25      	ldr	r3, [pc, #148]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f003 0307 	and.w	r3, r3, #7
 8004da8:	683a      	ldr	r2, [r7, #0]
 8004daa:	429a      	cmp	r2, r3
 8004dac:	d20c      	bcs.n	8004dc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dae:	4b22      	ldr	r3, [pc, #136]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004db0:	683a      	ldr	r2, [r7, #0]
 8004db2:	b2d2      	uxtb	r2, r2
 8004db4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004db6:	4b20      	ldr	r3, [pc, #128]	; (8004e38 <HAL_RCC_ClockConfig+0x1b8>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0307 	and.w	r3, r3, #7
 8004dbe:	683a      	ldr	r2, [r7, #0]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d001      	beq.n	8004dc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e032      	b.n	8004e2e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 0304 	and.w	r3, r3, #4
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d008      	beq.n	8004de6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004dd4:	4b19      	ldr	r3, [pc, #100]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004dd6:	689b      	ldr	r3, [r3, #8]
 8004dd8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	68db      	ldr	r3, [r3, #12]
 8004de0:	4916      	ldr	r1, [pc, #88]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004de2:	4313      	orrs	r3, r2
 8004de4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 0308 	and.w	r3, r3, #8
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d009      	beq.n	8004e06 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004df2:	4b12      	ldr	r3, [pc, #72]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	691b      	ldr	r3, [r3, #16]
 8004dfe:	00db      	lsls	r3, r3, #3
 8004e00:	490e      	ldr	r1, [pc, #56]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e02:	4313      	orrs	r3, r2
 8004e04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e06:	f000 f889 	bl	8004f1c <HAL_RCC_GetSysClockFreq>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	4b0b      	ldr	r3, [pc, #44]	; (8004e3c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	091b      	lsrs	r3, r3, #4
 8004e12:	f003 030f 	and.w	r3, r3, #15
 8004e16:	490a      	ldr	r1, [pc, #40]	; (8004e40 <HAL_RCC_ClockConfig+0x1c0>)
 8004e18:	5ccb      	ldrb	r3, [r1, r3]
 8004e1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004e1e:	4a09      	ldr	r2, [pc, #36]	; (8004e44 <HAL_RCC_ClockConfig+0x1c4>)
 8004e20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e22:	4b09      	ldr	r3, [pc, #36]	; (8004e48 <HAL_RCC_ClockConfig+0x1c8>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7fc f97e 	bl	8001128 <HAL_InitTick>

  return HAL_OK;
 8004e2c:	2300      	movs	r3, #0
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	40023c00 	.word	0x40023c00
 8004e3c:	40023800 	.word	0x40023800
 8004e40:	08007dc8 	.word	0x08007dc8
 8004e44:	20000000 	.word	0x20000000
 8004e48:	20000004 	.word	0x20000004

08004e4c <HAL_RCC_MCOConfig>:
  * @note  For STM32F410Rx devices to output I2SCLK clock on MCO2 you should have
  *        at last one of the SPI clocks enabled (SPI1, SPI2 or SPI5).
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08c      	sub	sp, #48	; 0x30
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct;
  /* Check the parameters */
  assert_param(IS_RCC_MCO(RCC_MCOx));
  assert_param(IS_RCC_MCODIV(RCC_MCODiv));
  /* RCC_MCO1 */
  if(RCC_MCOx == RCC_MCO1)
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d129      	bne.n	8004eb2 <HAL_RCC_MCOConfig+0x66>
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    __MCO1_CLK_ENABLE();
 8004e5e:	2300      	movs	r3, #0
 8004e60:	61bb      	str	r3, [r7, #24]
 8004e62:	4b2b      	ldr	r3, [pc, #172]	; (8004f10 <HAL_RCC_MCOConfig+0xc4>)
 8004e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e66:	4a2a      	ldr	r2, [pc, #168]	; (8004f10 <HAL_RCC_MCOConfig+0xc4>)
 8004e68:	f043 0301 	orr.w	r3, r3, #1
 8004e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e6e:	4b28      	ldr	r3, [pc, #160]	; (8004f10 <HAL_RCC_MCOConfig+0xc4>)
 8004e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e72:	f003 0301 	and.w	r3, r3, #1
 8004e76:	61bb      	str	r3, [r7, #24]
 8004e78:	69bb      	ldr	r3, [r7, #24]

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
 8004e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004e80:	2302      	movs	r3, #2
 8004e82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e84:	2303      	movs	r3, #3
 8004e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e88:	2300      	movs	r3, #0
 8004e8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8004e90:	f107 031c 	add.w	r3, r7, #28
 8004e94:	4619      	mov	r1, r3
 8004e96:	481f      	ldr	r0, [pc, #124]	; (8004f14 <HAL_RCC_MCOConfig+0xc8>)
 8004e98:	f7fe fb16 	bl	80034c8 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8004e9c:	4b1c      	ldr	r3, [pc, #112]	; (8004f10 <HAL_RCC_MCOConfig+0xc4>)
 8004e9e:	689b      	ldr	r3, [r3, #8]
 8004ea0:	f023 62ec 	bic.w	r2, r3, #123731968	; 0x7600000
 8004ea4:	68b9      	ldr	r1, [r7, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	430b      	orrs	r3, r1
 8004eaa:	4919      	ldr	r1, [pc, #100]	; (8004f10 <HAL_RCC_MCOConfig+0xc4>)
 8004eac:	4313      	orrs	r3, r2
 8004eae:	608b      	str	r3, [r1, #8]
#if defined(RCC_CFGR_MCO2EN)
    __HAL_RCC_MCO2_ENABLE();
#endif /* RCC_CFGR_MCO2EN */
  }
#endif /* RCC_CFGR_MCO2 */
}
 8004eb0:	e029      	b.n	8004f06 <HAL_RCC_MCOConfig+0xba>
    __MCO2_CLK_ENABLE();
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	617b      	str	r3, [r7, #20]
 8004eb6:	4b16      	ldr	r3, [pc, #88]	; (8004f10 <HAL_RCC_MCOConfig+0xc4>)
 8004eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004eba:	4a15      	ldr	r2, [pc, #84]	; (8004f10 <HAL_RCC_MCOConfig+0xc4>)
 8004ebc:	f043 0304 	orr.w	r3, r3, #4
 8004ec0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ec2:	4b13      	ldr	r3, [pc, #76]	; (8004f10 <HAL_RCC_MCOConfig+0xc4>)
 8004ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ec6:	f003 0304 	and.w	r3, r3, #4
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = MCO2_PIN;
 8004ece:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004ed2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ed4:	2302      	movs	r3, #2
 8004ed6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ed8:	2303      	movs	r3, #3
 8004eda:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004edc:	2300      	movs	r3, #0
 8004ede:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8004ee4:	f107 031c 	add.w	r3, r7, #28
 8004ee8:	4619      	mov	r1, r3
 8004eea:	480b      	ldr	r0, [pc, #44]	; (8004f18 <HAL_RCC_MCOConfig+0xcc>)
 8004eec:	f7fe faec 	bl	80034c8 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
 8004ef0:	4b07      	ldr	r3, [pc, #28]	; (8004f10 <HAL_RCC_MCOConfig+0xc4>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	f023 4278 	bic.w	r2, r3, #4160749568	; 0xf8000000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	00d9      	lsls	r1, r3, #3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	430b      	orrs	r3, r1
 8004f00:	4903      	ldr	r1, [pc, #12]	; (8004f10 <HAL_RCC_MCOConfig+0xc4>)
 8004f02:	4313      	orrs	r3, r2
 8004f04:	608b      	str	r3, [r1, #8]
}
 8004f06:	bf00      	nop
 8004f08:	3730      	adds	r7, #48	; 0x30
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40023800 	.word	0x40023800
 8004f14:	40020000 	.word	0x40020000
 8004f18:	40020800 	.word	0x40020800

08004f1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f20:	b090      	sub	sp, #64	; 0x40
 8004f22:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004f24:	2300      	movs	r3, #0
 8004f26:	637b      	str	r3, [r7, #52]	; 0x34
 8004f28:	2300      	movs	r3, #0
 8004f2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004f30:	2300      	movs	r3, #0
 8004f32:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f34:	4b59      	ldr	r3, [pc, #356]	; (800509c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	f003 030c 	and.w	r3, r3, #12
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d00d      	beq.n	8004f5c <HAL_RCC_GetSysClockFreq+0x40>
 8004f40:	2b08      	cmp	r3, #8
 8004f42:	f200 80a1 	bhi.w	8005088 <HAL_RCC_GetSysClockFreq+0x16c>
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d002      	beq.n	8004f50 <HAL_RCC_GetSysClockFreq+0x34>
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	d003      	beq.n	8004f56 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f4e:	e09b      	b.n	8005088 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f50:	4b53      	ldr	r3, [pc, #332]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8004f52:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004f54:	e09b      	b.n	800508e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f56:	4b53      	ldr	r3, [pc, #332]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f58:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004f5a:	e098      	b.n	800508e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f5c:	4b4f      	ldr	r3, [pc, #316]	; (800509c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f64:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004f66:	4b4d      	ldr	r3, [pc, #308]	; (800509c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d028      	beq.n	8004fc4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f72:	4b4a      	ldr	r3, [pc, #296]	; (800509c <HAL_RCC_GetSysClockFreq+0x180>)
 8004f74:	685b      	ldr	r3, [r3, #4]
 8004f76:	099b      	lsrs	r3, r3, #6
 8004f78:	2200      	movs	r2, #0
 8004f7a:	623b      	str	r3, [r7, #32]
 8004f7c:	627a      	str	r2, [r7, #36]	; 0x24
 8004f7e:	6a3b      	ldr	r3, [r7, #32]
 8004f80:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004f84:	2100      	movs	r1, #0
 8004f86:	4b47      	ldr	r3, [pc, #284]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f88:	fb03 f201 	mul.w	r2, r3, r1
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	fb00 f303 	mul.w	r3, r0, r3
 8004f92:	4413      	add	r3, r2
 8004f94:	4a43      	ldr	r2, [pc, #268]	; (80050a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8004f96:	fba0 1202 	umull	r1, r2, r0, r2
 8004f9a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f9c:	460a      	mov	r2, r1
 8004f9e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004fa0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fa2:	4413      	add	r3, r2
 8004fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa8:	2200      	movs	r2, #0
 8004faa:	61bb      	str	r3, [r7, #24]
 8004fac:	61fa      	str	r2, [r7, #28]
 8004fae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fb2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004fb6:	f7fb f963 	bl	8000280 <__aeabi_uldivmod>
 8004fba:	4602      	mov	r2, r0
 8004fbc:	460b      	mov	r3, r1
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fc2:	e053      	b.n	800506c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fc4:	4b35      	ldr	r3, [pc, #212]	; (800509c <HAL_RCC_GetSysClockFreq+0x180>)
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	099b      	lsrs	r3, r3, #6
 8004fca:	2200      	movs	r2, #0
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	617a      	str	r2, [r7, #20]
 8004fd0:	693b      	ldr	r3, [r7, #16]
 8004fd2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004fd6:	f04f 0b00 	mov.w	fp, #0
 8004fda:	4652      	mov	r2, sl
 8004fdc:	465b      	mov	r3, fp
 8004fde:	f04f 0000 	mov.w	r0, #0
 8004fe2:	f04f 0100 	mov.w	r1, #0
 8004fe6:	0159      	lsls	r1, r3, #5
 8004fe8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004fec:	0150      	lsls	r0, r2, #5
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	ebb2 080a 	subs.w	r8, r2, sl
 8004ff6:	eb63 090b 	sbc.w	r9, r3, fp
 8004ffa:	f04f 0200 	mov.w	r2, #0
 8004ffe:	f04f 0300 	mov.w	r3, #0
 8005002:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005006:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800500a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800500e:	ebb2 0408 	subs.w	r4, r2, r8
 8005012:	eb63 0509 	sbc.w	r5, r3, r9
 8005016:	f04f 0200 	mov.w	r2, #0
 800501a:	f04f 0300 	mov.w	r3, #0
 800501e:	00eb      	lsls	r3, r5, #3
 8005020:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005024:	00e2      	lsls	r2, r4, #3
 8005026:	4614      	mov	r4, r2
 8005028:	461d      	mov	r5, r3
 800502a:	eb14 030a 	adds.w	r3, r4, sl
 800502e:	603b      	str	r3, [r7, #0]
 8005030:	eb45 030b 	adc.w	r3, r5, fp
 8005034:	607b      	str	r3, [r7, #4]
 8005036:	f04f 0200 	mov.w	r2, #0
 800503a:	f04f 0300 	mov.w	r3, #0
 800503e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005042:	4629      	mov	r1, r5
 8005044:	028b      	lsls	r3, r1, #10
 8005046:	4621      	mov	r1, r4
 8005048:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800504c:	4621      	mov	r1, r4
 800504e:	028a      	lsls	r2, r1, #10
 8005050:	4610      	mov	r0, r2
 8005052:	4619      	mov	r1, r3
 8005054:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005056:	2200      	movs	r2, #0
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	60fa      	str	r2, [r7, #12]
 800505c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005060:	f7fb f90e 	bl	8000280 <__aeabi_uldivmod>
 8005064:	4602      	mov	r2, r0
 8005066:	460b      	mov	r3, r1
 8005068:	4613      	mov	r3, r2
 800506a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800506c:	4b0b      	ldr	r3, [pc, #44]	; (800509c <HAL_RCC_GetSysClockFreq+0x180>)
 800506e:	685b      	ldr	r3, [r3, #4]
 8005070:	0c1b      	lsrs	r3, r3, #16
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	3301      	adds	r3, #1
 8005078:	005b      	lsls	r3, r3, #1
 800507a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800507c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800507e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005080:	fbb2 f3f3 	udiv	r3, r2, r3
 8005084:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005086:	e002      	b.n	800508e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005088:	4b05      	ldr	r3, [pc, #20]	; (80050a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800508a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800508c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005090:	4618      	mov	r0, r3
 8005092:	3740      	adds	r7, #64	; 0x40
 8005094:	46bd      	mov	sp, r7
 8005096:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800509a:	bf00      	nop
 800509c:	40023800 	.word	0x40023800
 80050a0:	00f42400 	.word	0x00f42400
 80050a4:	017d7840 	.word	0x017d7840

080050a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80050a8:	b480      	push	{r7}
 80050aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80050ac:	4b03      	ldr	r3, [pc, #12]	; (80050bc <HAL_RCC_GetHCLKFreq+0x14>)
 80050ae:	681b      	ldr	r3, [r3, #0]
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	46bd      	mov	sp, r7
 80050b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b8:	4770      	bx	lr
 80050ba:	bf00      	nop
 80050bc:	20000000 	.word	0x20000000

080050c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80050c4:	f7ff fff0 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 80050c8:	4602      	mov	r2, r0
 80050ca:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	0a9b      	lsrs	r3, r3, #10
 80050d0:	f003 0307 	and.w	r3, r3, #7
 80050d4:	4903      	ldr	r1, [pc, #12]	; (80050e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80050d6:	5ccb      	ldrb	r3, [r1, r3]
 80050d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80050dc:	4618      	mov	r0, r3
 80050de:	bd80      	pop	{r7, pc}
 80050e0:	40023800 	.word	0x40023800
 80050e4:	08007dd8 	.word	0x08007dd8

080050e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80050ec:	f7ff ffdc 	bl	80050a8 <HAL_RCC_GetHCLKFreq>
 80050f0:	4602      	mov	r2, r0
 80050f2:	4b05      	ldr	r3, [pc, #20]	; (8005108 <HAL_RCC_GetPCLK2Freq+0x20>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	0b5b      	lsrs	r3, r3, #13
 80050f8:	f003 0307 	and.w	r3, r3, #7
 80050fc:	4903      	ldr	r1, [pc, #12]	; (800510c <HAL_RCC_GetPCLK2Freq+0x24>)
 80050fe:	5ccb      	ldrb	r3, [r1, r3]
 8005100:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005104:	4618      	mov	r0, r3
 8005106:	bd80      	pop	{r7, pc}
 8005108:	40023800 	.word	0x40023800
 800510c:	08007dd8 	.word	0x08007dd8

08005110 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005110:	b580      	push	{r7, lr}
 8005112:	b086      	sub	sp, #24
 8005114:	af00      	add	r7, sp, #0
 8005116:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005118:	2300      	movs	r3, #0
 800511a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800511c:	2300      	movs	r3, #0
 800511e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f003 0301 	and.w	r3, r3, #1
 8005128:	2b00      	cmp	r3, #0
 800512a:	d105      	bne.n	8005138 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005134:	2b00      	cmp	r3, #0
 8005136:	d035      	beq.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005138:	4b62      	ldr	r3, [pc, #392]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800513e:	f7fc f837 	bl	80011b0 <HAL_GetTick>
 8005142:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005144:	e008      	b.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005146:	f7fc f833 	bl	80011b0 <HAL_GetTick>
 800514a:	4602      	mov	r2, r0
 800514c:	697b      	ldr	r3, [r7, #20]
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	2b02      	cmp	r3, #2
 8005152:	d901      	bls.n	8005158 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005154:	2303      	movs	r3, #3
 8005156:	e0b0      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005158:	4b5b      	ldr	r3, [pc, #364]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1f0      	bne.n	8005146 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	019a      	lsls	r2, r3, #6
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	071b      	lsls	r3, r3, #28
 8005170:	4955      	ldr	r1, [pc, #340]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005178:	4b52      	ldr	r3, [pc, #328]	; (80052c4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800517a:	2201      	movs	r2, #1
 800517c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800517e:	f7fc f817 	bl	80011b0 <HAL_GetTick>
 8005182:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005184:	e008      	b.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005186:	f7fc f813 	bl	80011b0 <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b02      	cmp	r3, #2
 8005192:	d901      	bls.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005194:	2303      	movs	r3, #3
 8005196:	e090      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005198:	4b4b      	ldr	r3, [pc, #300]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d0f0      	beq.n	8005186 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	f000 8083 	beq.w	80052b8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80051b2:	2300      	movs	r3, #0
 80051b4:	60fb      	str	r3, [r7, #12]
 80051b6:	4b44      	ldr	r3, [pc, #272]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ba:	4a43      	ldr	r2, [pc, #268]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051c0:	6413      	str	r3, [r2, #64]	; 0x40
 80051c2:	4b41      	ldr	r3, [pc, #260]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80051ce:	4b3f      	ldr	r3, [pc, #252]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a3e      	ldr	r2, [pc, #248]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80051da:	f7fb ffe9 	bl	80011b0 <HAL_GetTick>
 80051de:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051e0:	e008      	b.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80051e2:	f7fb ffe5 	bl	80011b0 <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e062      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80051f4:	4b35      	ldr	r3, [pc, #212]	; (80052cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005200:	4b31      	ldr	r3, [pc, #196]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005204:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005208:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d02f      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005218:	693a      	ldr	r2, [r7, #16]
 800521a:	429a      	cmp	r2, r3
 800521c:	d028      	beq.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800521e:	4b2a      	ldr	r3, [pc, #168]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005222:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005226:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005228:	4b29      	ldr	r3, [pc, #164]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800522a:	2201      	movs	r2, #1
 800522c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800522e:	4b28      	ldr	r3, [pc, #160]	; (80052d0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005234:	4a24      	ldr	r2, [pc, #144]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800523a:	4b23      	ldr	r3, [pc, #140]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800523c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	2b01      	cmp	r3, #1
 8005244:	d114      	bne.n	8005270 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005246:	f7fb ffb3 	bl	80011b0 <HAL_GetTick>
 800524a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800524c:	e00a      	b.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800524e:	f7fb ffaf 	bl	80011b0 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	697b      	ldr	r3, [r7, #20]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	f241 3288 	movw	r2, #5000	; 0x1388
 800525c:	4293      	cmp	r3, r2
 800525e:	d901      	bls.n	8005264 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005260:	2303      	movs	r3, #3
 8005262:	e02a      	b.n	80052ba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005264:	4b18      	ldr	r3, [pc, #96]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005266:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d0ee      	beq.n	800524e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005278:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800527c:	d10d      	bne.n	800529a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800527e:	4b12      	ldr	r3, [pc, #72]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005280:	689b      	ldr	r3, [r3, #8]
 8005282:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	68db      	ldr	r3, [r3, #12]
 800528a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800528e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005292:	490d      	ldr	r1, [pc, #52]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005294:	4313      	orrs	r3, r2
 8005296:	608b      	str	r3, [r1, #8]
 8005298:	e005      	b.n	80052a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800529a:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80052a4:	6093      	str	r3, [r2, #8]
 80052a6:	4b08      	ldr	r3, [pc, #32]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68db      	ldr	r3, [r3, #12]
 80052ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80052b2:	4905      	ldr	r1, [pc, #20]	; (80052c8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80052b4:	4313      	orrs	r3, r2
 80052b6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80052b8:	2300      	movs	r3, #0
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3718      	adds	r7, #24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	bf00      	nop
 80052c4:	42470068 	.word	0x42470068
 80052c8:	40023800 	.word	0x40023800
 80052cc:	40007000 	.word	0x40007000
 80052d0:	42470e40 	.word	0x42470e40

080052d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b082      	sub	sp, #8
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e03f      	b.n	8005366 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d106      	bne.n	8005300 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2200      	movs	r2, #0
 80052f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7fb fd5e 	bl	8000dbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2224      	movs	r2, #36	; 0x24
 8005304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005316:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 fed1 	bl	80060c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	691a      	ldr	r2, [r3, #16]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800532c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	695a      	ldr	r2, [r3, #20]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800533c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	68da      	ldr	r2, [r3, #12]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800534c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2200      	movs	r2, #0
 8005352:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2220      	movs	r2, #32
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005364:	2300      	movs	r3, #0
}
 8005366:	4618      	mov	r0, r3
 8005368:	3708      	adds	r7, #8
 800536a:	46bd      	mov	sp, r7
 800536c:	bd80      	pop	{r7, pc}

0800536e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800536e:	b580      	push	{r7, lr}
 8005370:	b08a      	sub	sp, #40	; 0x28
 8005372:	af02      	add	r7, sp, #8
 8005374:	60f8      	str	r0, [r7, #12]
 8005376:	60b9      	str	r1, [r7, #8]
 8005378:	603b      	str	r3, [r7, #0]
 800537a:	4613      	mov	r3, r2
 800537c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005388:	b2db      	uxtb	r3, r3
 800538a:	2b20      	cmp	r3, #32
 800538c:	d17c      	bne.n	8005488 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <HAL_UART_Transmit+0x2c>
 8005394:	88fb      	ldrh	r3, [r7, #6]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e075      	b.n	800548a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d101      	bne.n	80053ac <HAL_UART_Transmit+0x3e>
 80053a8:	2302      	movs	r3, #2
 80053aa:	e06e      	b.n	800548a <HAL_UART_Transmit+0x11c>
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2201      	movs	r2, #1
 80053b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	2221      	movs	r2, #33	; 0x21
 80053be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053c2:	f7fb fef5 	bl	80011b0 <HAL_GetTick>
 80053c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	88fa      	ldrh	r2, [r7, #6]
 80053cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	88fa      	ldrh	r2, [r7, #6]
 80053d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053dc:	d108      	bne.n	80053f0 <HAL_UART_Transmit+0x82>
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d104      	bne.n	80053f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80053e6:	2300      	movs	r3, #0
 80053e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80053ea:	68bb      	ldr	r3, [r7, #8]
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	e003      	b.n	80053f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80053f0:	68bb      	ldr	r3, [r7, #8]
 80053f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80053f4:	2300      	movs	r3, #0
 80053f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2200      	movs	r2, #0
 80053fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005400:	e02a      	b.n	8005458 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	2200      	movs	r2, #0
 800540a:	2180      	movs	r1, #128	; 0x80
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f000 fc26 	bl	8005c5e <UART_WaitOnFlagUntilTimeout>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e036      	b.n	800548a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800541c:	69fb      	ldr	r3, [r7, #28]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d10b      	bne.n	800543a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	881b      	ldrh	r3, [r3, #0]
 8005426:	461a      	mov	r2, r3
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005430:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005432:	69bb      	ldr	r3, [r7, #24]
 8005434:	3302      	adds	r3, #2
 8005436:	61bb      	str	r3, [r7, #24]
 8005438:	e007      	b.n	800544a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	781a      	ldrb	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005444:	69fb      	ldr	r3, [r7, #28]
 8005446:	3301      	adds	r3, #1
 8005448:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800544e:	b29b      	uxth	r3, r3
 8005450:	3b01      	subs	r3, #1
 8005452:	b29a      	uxth	r2, r3
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800545c:	b29b      	uxth	r3, r3
 800545e:	2b00      	cmp	r3, #0
 8005460:	d1cf      	bne.n	8005402 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	9300      	str	r3, [sp, #0]
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2200      	movs	r2, #0
 800546a:	2140      	movs	r1, #64	; 0x40
 800546c:	68f8      	ldr	r0, [r7, #12]
 800546e:	f000 fbf6 	bl	8005c5e <UART_WaitOnFlagUntilTimeout>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d001      	beq.n	800547c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005478:	2303      	movs	r3, #3
 800547a:	e006      	b.n	800548a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2220      	movs	r2, #32
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005484:	2300      	movs	r3, #0
 8005486:	e000      	b.n	800548a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005488:	2302      	movs	r3, #2
  }
}
 800548a:	4618      	mov	r0, r3
 800548c:	3720      	adds	r7, #32
 800548e:	46bd      	mov	sp, r7
 8005490:	bd80      	pop	{r7, pc}
	...

08005494 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b08c      	sub	sp, #48	; 0x30
 8005498:	af00      	add	r7, sp, #0
 800549a:	60f8      	str	r0, [r7, #12]
 800549c:	60b9      	str	r1, [r7, #8]
 800549e:	4613      	mov	r3, r2
 80054a0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	2b20      	cmp	r3, #32
 80054ac:	d165      	bne.n	800557a <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d002      	beq.n	80054ba <HAL_UART_Transmit_DMA+0x26>
 80054b4:	88fb      	ldrh	r3, [r7, #6]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80054ba:	2301      	movs	r3, #1
 80054bc:	e05e      	b.n	800557c <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_UART_Transmit_DMA+0x38>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e057      	b.n	800557c <HAL_UART_Transmit_DMA+0xe8>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2201      	movs	r2, #1
 80054d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80054d4:	68ba      	ldr	r2, [r7, #8]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	88fa      	ldrh	r2, [r7, #6]
 80054de:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	88fa      	ldrh	r2, [r7, #6]
 80054e4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2200      	movs	r2, #0
 80054ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	2221      	movs	r2, #33	; 0x21
 80054f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f8:	4a22      	ldr	r2, [pc, #136]	; (8005584 <HAL_UART_Transmit_DMA+0xf0>)
 80054fa:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005500:	4a21      	ldr	r2, [pc, #132]	; (8005588 <HAL_UART_Transmit_DMA+0xf4>)
 8005502:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005508:	4a20      	ldr	r2, [pc, #128]	; (800558c <HAL_UART_Transmit_DMA+0xf8>)
 800550a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005510:	2200      	movs	r2, #0
 8005512:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8005514:	f107 0308 	add.w	r3, r7, #8
 8005518:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800551e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005520:	6819      	ldr	r1, [r3, #0]
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	3304      	adds	r3, #4
 8005528:	461a      	mov	r2, r3
 800552a:	88fb      	ldrh	r3, [r7, #6]
 800552c:	f7fc faf0 	bl	8001b10 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005538:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	2200      	movs	r2, #0
 800553e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	3314      	adds	r3, #20
 8005548:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554a:	69bb      	ldr	r3, [r7, #24]
 800554c:	e853 3f00 	ldrex	r3, [r3]
 8005550:	617b      	str	r3, [r7, #20]
   return(result);
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	3314      	adds	r3, #20
 8005560:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005562:	627a      	str	r2, [r7, #36]	; 0x24
 8005564:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005566:	6a39      	ldr	r1, [r7, #32]
 8005568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005570:	69fb      	ldr	r3, [r7, #28]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d1e5      	bne.n	8005542 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 8005576:	2300      	movs	r3, #0
 8005578:	e000      	b.n	800557c <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800557a:	2302      	movs	r3, #2
  }
}
 800557c:	4618      	mov	r0, r3
 800557e:	3730      	adds	r7, #48	; 0x30
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	08005b15 	.word	0x08005b15
 8005588:	08005baf 	.word	0x08005baf
 800558c:	08005bcb 	.word	0x08005bcb

08005590 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b0ba      	sub	sp, #232	; 0xe8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	68db      	ldr	r3, [r3, #12]
 80055a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	695b      	ldr	r3, [r3, #20]
 80055b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80055b6:	2300      	movs	r3, #0
 80055b8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80055bc:	2300      	movs	r3, #0
 80055be:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055c6:	f003 030f 	and.w	r3, r3, #15
 80055ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80055ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d10f      	bne.n	80055f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	f003 0320 	and.w	r3, r3, #32
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d009      	beq.n	80055f6 <HAL_UART_IRQHandler+0x66>
 80055e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e6:	f003 0320 	and.w	r3, r3, #32
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d003      	beq.n	80055f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fcaa 	bl	8005f48 <UART_Receive_IT>
      return;
 80055f4:	e256      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80055f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	f000 80de 	beq.w	80057bc <HAL_UART_IRQHandler+0x22c>
 8005600:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005604:	f003 0301 	and.w	r3, r3, #1
 8005608:	2b00      	cmp	r3, #0
 800560a:	d106      	bne.n	800561a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800560c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005610:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005614:	2b00      	cmp	r3, #0
 8005616:	f000 80d1 	beq.w	80057bc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800561a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <HAL_UART_IRQHandler+0xae>
 8005626:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800562a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800562e:	2b00      	cmp	r3, #0
 8005630:	d005      	beq.n	800563e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f043 0201 	orr.w	r2, r3, #1
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800563e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005642:	f003 0304 	and.w	r3, r3, #4
 8005646:	2b00      	cmp	r3, #0
 8005648:	d00b      	beq.n	8005662 <HAL_UART_IRQHandler+0xd2>
 800564a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	2b00      	cmp	r3, #0
 8005654:	d005      	beq.n	8005662 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565a:	f043 0202 	orr.w	r2, r3, #2
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005662:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005666:	f003 0302 	and.w	r3, r3, #2
 800566a:	2b00      	cmp	r3, #0
 800566c:	d00b      	beq.n	8005686 <HAL_UART_IRQHandler+0xf6>
 800566e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	f043 0204 	orr.w	r2, r3, #4
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800568a:	f003 0308 	and.w	r3, r3, #8
 800568e:	2b00      	cmp	r3, #0
 8005690:	d011      	beq.n	80056b6 <HAL_UART_IRQHandler+0x126>
 8005692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005696:	f003 0320 	and.w	r3, r3, #32
 800569a:	2b00      	cmp	r3, #0
 800569c:	d105      	bne.n	80056aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800569e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d005      	beq.n	80056b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ae:	f043 0208 	orr.w	r2, r3, #8
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	f000 81ed 	beq.w	8005a9a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_UART_IRQHandler+0x14e>
 80056cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056d0:	f003 0320 	and.w	r3, r3, #32
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80056d8:	6878      	ldr	r0, [r7, #4]
 80056da:	f000 fc35 	bl	8005f48 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056e8:	2b40      	cmp	r3, #64	; 0x40
 80056ea:	bf0c      	ite	eq
 80056ec:	2301      	moveq	r3, #1
 80056ee:	2300      	movne	r3, #0
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056fa:	f003 0308 	and.w	r3, r3, #8
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d103      	bne.n	800570a <HAL_UART_IRQHandler+0x17a>
 8005702:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005706:	2b00      	cmp	r3, #0
 8005708:	d04f      	beq.n	80057aa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f000 fb3d 	bl	8005d8a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	695b      	ldr	r3, [r3, #20]
 8005716:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800571a:	2b40      	cmp	r3, #64	; 0x40
 800571c:	d141      	bne.n	80057a2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	3314      	adds	r3, #20
 8005724:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800572c:	e853 3f00 	ldrex	r3, [r3]
 8005730:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005734:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	3314      	adds	r3, #20
 8005746:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800574a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800574e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005752:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005756:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800575a:	e841 2300 	strex	r3, r2, [r1]
 800575e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005762:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d1d9      	bne.n	800571e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800576e:	2b00      	cmp	r3, #0
 8005770:	d013      	beq.n	800579a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005776:	4a7d      	ldr	r2, [pc, #500]	; (800596c <HAL_UART_IRQHandler+0x3dc>)
 8005778:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	4618      	mov	r0, r3
 8005780:	f7fc fa8e 	bl	8001ca0 <HAL_DMA_Abort_IT>
 8005784:	4603      	mov	r3, r0
 8005786:	2b00      	cmp	r3, #0
 8005788:	d016      	beq.n	80057b8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005790:	687a      	ldr	r2, [r7, #4]
 8005792:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005794:	4610      	mov	r0, r2
 8005796:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005798:	e00e      	b.n	80057b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f000 f9a4 	bl	8005ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a0:	e00a      	b.n	80057b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	f000 f9a0 	bl	8005ae8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057a8:	e006      	b.n	80057b8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 f99c 	bl	8005ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80057b6:	e170      	b.n	8005a9a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057b8:	bf00      	nop
    return;
 80057ba:	e16e      	b.n	8005a9a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	f040 814a 	bne.w	8005a5a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057ca:	f003 0310 	and.w	r3, r3, #16
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	f000 8143 	beq.w	8005a5a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80057d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057d8:	f003 0310 	and.w	r3, r3, #16
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f000 813c 	beq.w	8005a5a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80057e2:	2300      	movs	r3, #0
 80057e4:	60bb      	str	r3, [r7, #8]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	60bb      	str	r3, [r7, #8]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	60bb      	str	r3, [r7, #8]
 80057f6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	695b      	ldr	r3, [r3, #20]
 80057fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005802:	2b40      	cmp	r3, #64	; 0x40
 8005804:	f040 80b4 	bne.w	8005970 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005814:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005818:	2b00      	cmp	r3, #0
 800581a:	f000 8140 	beq.w	8005a9e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005822:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005826:	429a      	cmp	r2, r3
 8005828:	f080 8139 	bcs.w	8005a9e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005832:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005838:	69db      	ldr	r3, [r3, #28]
 800583a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583e:	f000 8088 	beq.w	8005952 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	330c      	adds	r3, #12
 8005848:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800584c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005850:	e853 3f00 	ldrex	r3, [r3]
 8005854:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005858:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800585c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005860:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	330c      	adds	r3, #12
 800586a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800586e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005872:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005876:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800587a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800587e:	e841 2300 	strex	r3, r2, [r1]
 8005882:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005886:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1d9      	bne.n	8005842 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3314      	adds	r3, #20
 8005894:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005898:	e853 3f00 	ldrex	r3, [r3]
 800589c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800589e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058a0:	f023 0301 	bic.w	r3, r3, #1
 80058a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	3314      	adds	r3, #20
 80058ae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058b2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058b6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058b8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058ba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058be:	e841 2300 	strex	r3, r2, [r1]
 80058c2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d1e1      	bne.n	800588e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	3314      	adds	r3, #20
 80058d0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058d4:	e853 3f00 	ldrex	r3, [r3]
 80058d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80058da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058dc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80058e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	3314      	adds	r3, #20
 80058ea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80058ee:	66fa      	str	r2, [r7, #108]	; 0x6c
 80058f0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058f2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80058f4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80058f6:	e841 2300 	strex	r3, r2, [r1]
 80058fa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80058fc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d1e3      	bne.n	80058ca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	330c      	adds	r3, #12
 8005916:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005918:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800591a:	e853 3f00 	ldrex	r3, [r3]
 800591e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005922:	f023 0310 	bic.w	r3, r3, #16
 8005926:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	330c      	adds	r3, #12
 8005930:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005934:	65ba      	str	r2, [r7, #88]	; 0x58
 8005936:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005938:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800593a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800593c:	e841 2300 	strex	r3, r2, [r1]
 8005940:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005942:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005944:	2b00      	cmp	r3, #0
 8005946:	d1e3      	bne.n	8005910 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800594c:	4618      	mov	r0, r3
 800594e:	f7fc f937 	bl	8001bc0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800595a:	b29b      	uxth	r3, r3
 800595c:	1ad3      	subs	r3, r2, r3
 800595e:	b29b      	uxth	r3, r3
 8005960:	4619      	mov	r1, r3
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 f8ca 	bl	8005afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005968:	e099      	b.n	8005a9e <HAL_UART_IRQHandler+0x50e>
 800596a:	bf00      	nop
 800596c:	08005e51 	.word	0x08005e51
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005978:	b29b      	uxth	r3, r3
 800597a:	1ad3      	subs	r3, r2, r3
 800597c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005984:	b29b      	uxth	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	f000 808b 	beq.w	8005aa2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800598c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005990:	2b00      	cmp	r3, #0
 8005992:	f000 8086 	beq.w	8005aa2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	330c      	adds	r3, #12
 800599c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800599e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a0:	e853 3f00 	ldrex	r3, [r3]
 80059a4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	330c      	adds	r3, #12
 80059b6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80059ba:	647a      	str	r2, [r7, #68]	; 0x44
 80059bc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059be:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059c2:	e841 2300 	strex	r3, r2, [r1]
 80059c6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80059c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d1e3      	bne.n	8005996 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	3314      	adds	r3, #20
 80059d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	e853 3f00 	ldrex	r3, [r3]
 80059dc:	623b      	str	r3, [r7, #32]
   return(result);
 80059de:	6a3b      	ldr	r3, [r7, #32]
 80059e0:	f023 0301 	bic.w	r3, r3, #1
 80059e4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	3314      	adds	r3, #20
 80059ee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80059f2:	633a      	str	r2, [r7, #48]	; 0x30
 80059f4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80059f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059fa:	e841 2300 	strex	r3, r2, [r1]
 80059fe:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d1e3      	bne.n	80059ce <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2220      	movs	r2, #32
 8005a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	330c      	adds	r3, #12
 8005a1a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	e853 3f00 	ldrex	r3, [r3]
 8005a22:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f023 0310 	bic.w	r3, r3, #16
 8005a2a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	330c      	adds	r3, #12
 8005a34:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a38:	61fa      	str	r2, [r7, #28]
 8005a3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a3c:	69b9      	ldr	r1, [r7, #24]
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	e841 2300 	strex	r3, r2, [r1]
 8005a44:	617b      	str	r3, [r7, #20]
   return(result);
 8005a46:	697b      	ldr	r3, [r7, #20]
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d1e3      	bne.n	8005a14 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a50:	4619      	mov	r1, r3
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f000 f852 	bl	8005afc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a58:	e023      	b.n	8005aa2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d009      	beq.n	8005a7a <HAL_UART_IRQHandler+0x4ea>
 8005a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d003      	beq.n	8005a7a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 fa00 	bl	8005e78 <UART_Transmit_IT>
    return;
 8005a78:	e014      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d00e      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x514>
 8005a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d008      	beq.n	8005aa4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f000 fa40 	bl	8005f18 <UART_EndTransmit_IT>
    return;
 8005a98:	e004      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
    return;
 8005a9a:	bf00      	nop
 8005a9c:	e002      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
      return;
 8005a9e:	bf00      	nop
 8005aa0:	e000      	b.n	8005aa4 <HAL_UART_IRQHandler+0x514>
      return;
 8005aa2:	bf00      	nop
  }
}
 8005aa4:	37e8      	adds	r7, #232	; 0xe8
 8005aa6:	46bd      	mov	sp, r7
 8005aa8:	bd80      	pop	{r7, pc}
 8005aaa:	bf00      	nop

08005aac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005aac:	b480      	push	{r7}
 8005aae:	b083      	sub	sp, #12
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005ab4:	bf00      	nop
 8005ab6:	370c      	adds	r7, #12
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr

08005ac0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005adc:	bf00      	nop
 8005ade:	370c      	adds	r7, #12
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr

08005afc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
 8005b04:	460b      	mov	r3, r1
 8005b06:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b08:	bf00      	nop
 8005b0a:	370c      	adds	r7, #12
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b090      	sub	sp, #64	; 0x40
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b20:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d137      	bne.n	8005ba0 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b32:	2200      	movs	r2, #0
 8005b34:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005b36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	3314      	adds	r3, #20
 8005b3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b40:	e853 3f00 	ldrex	r3, [r3]
 8005b44:	623b      	str	r3, [r7, #32]
   return(result);
 8005b46:	6a3b      	ldr	r3, [r7, #32]
 8005b48:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b4c:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	3314      	adds	r3, #20
 8005b54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005b56:	633a      	str	r2, [r7, #48]	; 0x30
 8005b58:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b5a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b5e:	e841 2300 	strex	r3, r2, [r1]
 8005b62:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d1e5      	bne.n	8005b36 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005b6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	e853 3f00 	ldrex	r3, [r3]
 8005b78:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b80:	637b      	str	r3, [r7, #52]	; 0x34
 8005b82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	330c      	adds	r3, #12
 8005b88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b8a:	61fa      	str	r2, [r7, #28]
 8005b8c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b8e:	69b9      	ldr	r1, [r7, #24]
 8005b90:	69fa      	ldr	r2, [r7, #28]
 8005b92:	e841 2300 	strex	r3, r2, [r1]
 8005b96:	617b      	str	r3, [r7, #20]
   return(result);
 8005b98:	697b      	ldr	r3, [r7, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d1e5      	bne.n	8005b6a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005b9e:	e002      	b.n	8005ba6 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005ba0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005ba2:	f7ff ff83 	bl	8005aac <HAL_UART_TxCpltCallback>
}
 8005ba6:	bf00      	nop
 8005ba8:	3740      	adds	r7, #64	; 0x40
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}

08005bae <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005bae:	b580      	push	{r7, lr}
 8005bb0:	b084      	sub	sp, #16
 8005bb2:	af00      	add	r7, sp, #0
 8005bb4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bba:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005bbc:	68f8      	ldr	r0, [r7, #12]
 8005bbe:	f7ff ff7f 	bl	8005ac0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005bc2:	bf00      	nop
 8005bc4:	3710      	adds	r7, #16
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}

08005bca <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005bca:	b580      	push	{r7, lr}
 8005bcc:	b084      	sub	sp, #16
 8005bce:	af00      	add	r7, sp, #0
 8005bd0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bda:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	695b      	ldr	r3, [r3, #20]
 8005be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005be6:	2b80      	cmp	r3, #128	; 0x80
 8005be8:	bf0c      	ite	eq
 8005bea:	2301      	moveq	r3, #1
 8005bec:	2300      	movne	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8005bf2:	68bb      	ldr	r3, [r7, #8]
 8005bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b21      	cmp	r3, #33	; 0x21
 8005bfc:	d108      	bne.n	8005c10 <UART_DMAError+0x46>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8005c04:	68bb      	ldr	r3, [r7, #8]
 8005c06:	2200      	movs	r2, #0
 8005c08:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8005c0a:	68b8      	ldr	r0, [r7, #8]
 8005c0c:	f000 f895 	bl	8005d3a <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	695b      	ldr	r3, [r3, #20]
 8005c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c1a:	2b40      	cmp	r3, #64	; 0x40
 8005c1c:	bf0c      	ite	eq
 8005c1e:	2301      	moveq	r3, #1
 8005c20:	2300      	movne	r3, #0
 8005c22:	b2db      	uxtb	r3, r3
 8005c24:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8005c26:	68bb      	ldr	r3, [r7, #8]
 8005c28:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b22      	cmp	r3, #34	; 0x22
 8005c30:	d108      	bne.n	8005c44 <UART_DMAError+0x7a>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d005      	beq.n	8005c44 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8005c38:	68bb      	ldr	r3, [r7, #8]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8005c3e:	68b8      	ldr	r0, [r7, #8]
 8005c40:	f000 f8a3 	bl	8005d8a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005c44:	68bb      	ldr	r3, [r7, #8]
 8005c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c48:	f043 0210 	orr.w	r2, r3, #16
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c50:	68b8      	ldr	r0, [r7, #8]
 8005c52:	f7ff ff49 	bl	8005ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b090      	sub	sp, #64	; 0x40
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	60f8      	str	r0, [r7, #12]
 8005c66:	60b9      	str	r1, [r7, #8]
 8005c68:	603b      	str	r3, [r7, #0]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c6e:	e050      	b.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c76:	d04c      	beq.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c78:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d007      	beq.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x30>
 8005c7e:	f7fb fa97 	bl	80011b0 <HAL_GetTick>
 8005c82:	4602      	mov	r2, r0
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	1ad3      	subs	r3, r2, r3
 8005c88:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d241      	bcs.n	8005d12 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	330c      	adds	r3, #12
 8005c94:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c98:	e853 3f00 	ldrex	r3, [r3]
 8005c9c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005ca4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	330c      	adds	r3, #12
 8005cac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005cae:	637a      	str	r2, [r7, #52]	; 0x34
 8005cb0:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cb2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005cb4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005cb6:	e841 2300 	strex	r3, r2, [r1]
 8005cba:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d1e5      	bne.n	8005c8e <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	3314      	adds	r3, #20
 8005cc8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	e853 3f00 	ldrex	r3, [r3]
 8005cd0:	613b      	str	r3, [r7, #16]
   return(result);
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f023 0301 	bic.w	r3, r3, #1
 8005cd8:	63bb      	str	r3, [r7, #56]	; 0x38
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	3314      	adds	r3, #20
 8005ce0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005ce2:	623a      	str	r2, [r7, #32]
 8005ce4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ce6:	69f9      	ldr	r1, [r7, #28]
 8005ce8:	6a3a      	ldr	r2, [r7, #32]
 8005cea:	e841 2300 	strex	r3, r2, [r1]
 8005cee:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d1e5      	bne.n	8005cc2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2220      	movs	r2, #32
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2220      	movs	r2, #32
 8005d02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	e00f      	b.n	8005d32 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	4013      	ands	r3, r2
 8005d1c:	68ba      	ldr	r2, [r7, #8]
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	bf0c      	ite	eq
 8005d22:	2301      	moveq	r3, #1
 8005d24:	2300      	movne	r3, #0
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	79fb      	ldrb	r3, [r7, #7]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d09f      	beq.n	8005c70 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005d30:	2300      	movs	r3, #0
}
 8005d32:	4618      	mov	r0, r3
 8005d34:	3740      	adds	r7, #64	; 0x40
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}

08005d3a <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005d3a:	b480      	push	{r7}
 8005d3c:	b089      	sub	sp, #36	; 0x24
 8005d3e:	af00      	add	r7, sp, #0
 8005d40:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	330c      	adds	r3, #12
 8005d48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	60bb      	str	r3, [r7, #8]
   return(result);
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	330c      	adds	r3, #12
 8005d60:	69fa      	ldr	r2, [r7, #28]
 8005d62:	61ba      	str	r2, [r7, #24]
 8005d64:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6979      	ldr	r1, [r7, #20]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	613b      	str	r3, [r7, #16]
   return(result);
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e5      	bne.n	8005d42 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2220      	movs	r2, #32
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8005d7e:	bf00      	nop
 8005d80:	3724      	adds	r7, #36	; 0x24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr

08005d8a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d8a:	b480      	push	{r7}
 8005d8c:	b095      	sub	sp, #84	; 0x54
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	330c      	adds	r3, #12
 8005d98:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9c:	e853 3f00 	ldrex	r3, [r3]
 8005da0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005da8:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	330c      	adds	r3, #12
 8005db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005db2:	643a      	str	r2, [r7, #64]	; 0x40
 8005db4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005db6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005db8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005dba:	e841 2300 	strex	r3, r2, [r1]
 8005dbe:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d1e5      	bne.n	8005d92 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	3314      	adds	r3, #20
 8005dcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dce:	6a3b      	ldr	r3, [r7, #32]
 8005dd0:	e853 3f00 	ldrex	r3, [r3]
 8005dd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	f023 0301 	bic.w	r3, r3, #1
 8005ddc:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	3314      	adds	r3, #20
 8005de4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005de6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005de8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dee:	e841 2300 	strex	r3, r2, [r1]
 8005df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d1e5      	bne.n	8005dc6 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d119      	bne.n	8005e36 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	330c      	adds	r3, #12
 8005e08:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	e853 3f00 	ldrex	r3, [r3]
 8005e10:	60bb      	str	r3, [r7, #8]
   return(result);
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f023 0310 	bic.w	r3, r3, #16
 8005e18:	647b      	str	r3, [r7, #68]	; 0x44
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	330c      	adds	r3, #12
 8005e20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e22:	61ba      	str	r2, [r7, #24]
 8005e24:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e26:	6979      	ldr	r1, [r7, #20]
 8005e28:	69ba      	ldr	r2, [r7, #24]
 8005e2a:	e841 2300 	strex	r3, r2, [r1]
 8005e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d1e5      	bne.n	8005e02 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2220      	movs	r2, #32
 8005e3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e44:	bf00      	nop
 8005e46:	3754      	adds	r7, #84	; 0x54
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e50:	b580      	push	{r7, lr}
 8005e52:	b084      	sub	sp, #16
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e5c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	2200      	movs	r2, #0
 8005e62:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e6a:	68f8      	ldr	r0, [r7, #12]
 8005e6c:	f7ff fe3c 	bl	8005ae8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e70:	bf00      	nop
 8005e72:	3710      	adds	r7, #16
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e78:	b480      	push	{r7}
 8005e7a:	b085      	sub	sp, #20
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2b21      	cmp	r3, #33	; 0x21
 8005e8a:	d13e      	bne.n	8005f0a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	689b      	ldr	r3, [r3, #8]
 8005e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e94:	d114      	bne.n	8005ec0 <UART_Transmit_IT+0x48>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	691b      	ldr	r3, [r3, #16]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d110      	bne.n	8005ec0 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6a1b      	ldr	r3, [r3, #32]
 8005ea2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	881b      	ldrh	r3, [r3, #0]
 8005ea8:	461a      	mov	r2, r3
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005eb2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	6a1b      	ldr	r3, [r3, #32]
 8005eb8:	1c9a      	adds	r2, r3, #2
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	621a      	str	r2, [r3, #32]
 8005ebe:	e008      	b.n	8005ed2 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	1c59      	adds	r1, r3, #1
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	6211      	str	r1, [r2, #32]
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	3b01      	subs	r3, #1
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	4619      	mov	r1, r3
 8005ee0:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10f      	bne.n	8005f06 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ef4:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	68da      	ldr	r2, [r3, #12]
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f04:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005f06:	2300      	movs	r3, #0
 8005f08:	e000      	b.n	8005f0c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005f0a:	2302      	movs	r3, #2
  }
}
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	3714      	adds	r7, #20
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	68da      	ldr	r2, [r3, #12]
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f2e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2220      	movs	r2, #32
 8005f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff fdb7 	bl	8005aac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	3708      	adds	r7, #8
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b08c      	sub	sp, #48	; 0x30
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005f56:	b2db      	uxtb	r3, r3
 8005f58:	2b22      	cmp	r3, #34	; 0x22
 8005f5a:	f040 80ab 	bne.w	80060b4 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	689b      	ldr	r3, [r3, #8]
 8005f62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f66:	d117      	bne.n	8005f98 <UART_Receive_IT+0x50>
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	691b      	ldr	r3, [r3, #16]
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d113      	bne.n	8005f98 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f70:	2300      	movs	r3, #0
 8005f72:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f78:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f8a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f90:	1c9a      	adds	r2, r3, #2
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	629a      	str	r2, [r3, #40]	; 0x28
 8005f96:	e026      	b.n	8005fe6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	689b      	ldr	r3, [r3, #8]
 8005fa6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005faa:	d007      	beq.n	8005fbc <UART_Receive_IT+0x74>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	689b      	ldr	r3, [r3, #8]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d10a      	bne.n	8005fca <UART_Receive_IT+0x82>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	691b      	ldr	r3, [r3, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d106      	bne.n	8005fca <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc6:	701a      	strb	r2, [r3, #0]
 8005fc8:	e008      	b.n	8005fdc <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fd6:	b2da      	uxtb	r2, r3
 8005fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fda:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	3b01      	subs	r3, #1
 8005fee:	b29b      	uxth	r3, r3
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	4619      	mov	r1, r3
 8005ff4:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d15a      	bne.n	80060b0 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f022 0220 	bic.w	r2, r2, #32
 8006008:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	68da      	ldr	r2, [r3, #12]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006018:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	695a      	ldr	r2, [r3, #20]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	f022 0201 	bic.w	r2, r2, #1
 8006028:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2220      	movs	r2, #32
 800602e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006036:	2b01      	cmp	r3, #1
 8006038:	d135      	bne.n	80060a6 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2200      	movs	r2, #0
 800603e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006048:	697b      	ldr	r3, [r7, #20]
 800604a:	e853 3f00 	ldrex	r3, [r3]
 800604e:	613b      	str	r3, [r7, #16]
   return(result);
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	f023 0310 	bic.w	r3, r3, #16
 8006056:	627b      	str	r3, [r7, #36]	; 0x24
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	330c      	adds	r3, #12
 800605e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006060:	623a      	str	r2, [r7, #32]
 8006062:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006064:	69f9      	ldr	r1, [r7, #28]
 8006066:	6a3a      	ldr	r2, [r7, #32]
 8006068:	e841 2300 	strex	r3, r2, [r1]
 800606c:	61bb      	str	r3, [r7, #24]
   return(result);
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1e5      	bne.n	8006040 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f003 0310 	and.w	r3, r3, #16
 800607e:	2b10      	cmp	r3, #16
 8006080:	d10a      	bne.n	8006098 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	60fb      	str	r3, [r7, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	685b      	ldr	r3, [r3, #4]
 8006094:	60fb      	str	r3, [r7, #12]
 8006096:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800609c:	4619      	mov	r1, r3
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f7ff fd2c 	bl	8005afc <HAL_UARTEx_RxEventCallback>
 80060a4:	e002      	b.n	80060ac <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f7ff fd14 	bl	8005ad4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80060ac:	2300      	movs	r3, #0
 80060ae:	e002      	b.n	80060b6 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80060b0:	2300      	movs	r3, #0
 80060b2:	e000      	b.n	80060b6 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80060b4:	2302      	movs	r3, #2
  }
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3730      	adds	r7, #48	; 0x30
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060c4:	b0c0      	sub	sp, #256	; 0x100
 80060c6:	af00      	add	r7, sp, #0
 80060c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	691b      	ldr	r3, [r3, #16]
 80060d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80060d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060dc:	68d9      	ldr	r1, [r3, #12]
 80060de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060e2:	681a      	ldr	r2, [r3, #0]
 80060e4:	ea40 0301 	orr.w	r3, r0, r1
 80060e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80060ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	431a      	orrs	r2, r3
 8006100:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006104:	69db      	ldr	r3, [r3, #28]
 8006106:	4313      	orrs	r3, r2
 8006108:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800610c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006118:	f021 010c 	bic.w	r1, r1, #12
 800611c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006126:	430b      	orrs	r3, r1
 8006128:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800612a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006136:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800613a:	6999      	ldr	r1, [r3, #24]
 800613c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006140:	681a      	ldr	r2, [r3, #0]
 8006142:	ea40 0301 	orr.w	r3, r0, r1
 8006146:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800614c:	681a      	ldr	r2, [r3, #0]
 800614e:	4b8f      	ldr	r3, [pc, #572]	; (800638c <UART_SetConfig+0x2cc>)
 8006150:	429a      	cmp	r2, r3
 8006152:	d005      	beq.n	8006160 <UART_SetConfig+0xa0>
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006158:	681a      	ldr	r2, [r3, #0]
 800615a:	4b8d      	ldr	r3, [pc, #564]	; (8006390 <UART_SetConfig+0x2d0>)
 800615c:	429a      	cmp	r2, r3
 800615e:	d104      	bne.n	800616a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006160:	f7fe ffc2 	bl	80050e8 <HAL_RCC_GetPCLK2Freq>
 8006164:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006168:	e003      	b.n	8006172 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800616a:	f7fe ffa9 	bl	80050c0 <HAL_RCC_GetPCLK1Freq>
 800616e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006172:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006176:	69db      	ldr	r3, [r3, #28]
 8006178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800617c:	f040 810c 	bne.w	8006398 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006180:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006184:	2200      	movs	r2, #0
 8006186:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800618a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800618e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006192:	4622      	mov	r2, r4
 8006194:	462b      	mov	r3, r5
 8006196:	1891      	adds	r1, r2, r2
 8006198:	65b9      	str	r1, [r7, #88]	; 0x58
 800619a:	415b      	adcs	r3, r3
 800619c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800619e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80061a2:	4621      	mov	r1, r4
 80061a4:	eb12 0801 	adds.w	r8, r2, r1
 80061a8:	4629      	mov	r1, r5
 80061aa:	eb43 0901 	adc.w	r9, r3, r1
 80061ae:	f04f 0200 	mov.w	r2, #0
 80061b2:	f04f 0300 	mov.w	r3, #0
 80061b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80061ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80061be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80061c2:	4690      	mov	r8, r2
 80061c4:	4699      	mov	r9, r3
 80061c6:	4623      	mov	r3, r4
 80061c8:	eb18 0303 	adds.w	r3, r8, r3
 80061cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80061d0:	462b      	mov	r3, r5
 80061d2:	eb49 0303 	adc.w	r3, r9, r3
 80061d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80061da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80061e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80061ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80061ee:	460b      	mov	r3, r1
 80061f0:	18db      	adds	r3, r3, r3
 80061f2:	653b      	str	r3, [r7, #80]	; 0x50
 80061f4:	4613      	mov	r3, r2
 80061f6:	eb42 0303 	adc.w	r3, r2, r3
 80061fa:	657b      	str	r3, [r7, #84]	; 0x54
 80061fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006200:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006204:	f7fa f83c 	bl	8000280 <__aeabi_uldivmod>
 8006208:	4602      	mov	r2, r0
 800620a:	460b      	mov	r3, r1
 800620c:	4b61      	ldr	r3, [pc, #388]	; (8006394 <UART_SetConfig+0x2d4>)
 800620e:	fba3 2302 	umull	r2, r3, r3, r2
 8006212:	095b      	lsrs	r3, r3, #5
 8006214:	011c      	lsls	r4, r3, #4
 8006216:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800621a:	2200      	movs	r2, #0
 800621c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006220:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006224:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006228:	4642      	mov	r2, r8
 800622a:	464b      	mov	r3, r9
 800622c:	1891      	adds	r1, r2, r2
 800622e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006230:	415b      	adcs	r3, r3
 8006232:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006234:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006238:	4641      	mov	r1, r8
 800623a:	eb12 0a01 	adds.w	sl, r2, r1
 800623e:	4649      	mov	r1, r9
 8006240:	eb43 0b01 	adc.w	fp, r3, r1
 8006244:	f04f 0200 	mov.w	r2, #0
 8006248:	f04f 0300 	mov.w	r3, #0
 800624c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006250:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006254:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006258:	4692      	mov	sl, r2
 800625a:	469b      	mov	fp, r3
 800625c:	4643      	mov	r3, r8
 800625e:	eb1a 0303 	adds.w	r3, sl, r3
 8006262:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006266:	464b      	mov	r3, r9
 8006268:	eb4b 0303 	adc.w	r3, fp, r3
 800626c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2200      	movs	r2, #0
 8006278:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800627c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006280:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006284:	460b      	mov	r3, r1
 8006286:	18db      	adds	r3, r3, r3
 8006288:	643b      	str	r3, [r7, #64]	; 0x40
 800628a:	4613      	mov	r3, r2
 800628c:	eb42 0303 	adc.w	r3, r2, r3
 8006290:	647b      	str	r3, [r7, #68]	; 0x44
 8006292:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006296:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800629a:	f7f9 fff1 	bl	8000280 <__aeabi_uldivmod>
 800629e:	4602      	mov	r2, r0
 80062a0:	460b      	mov	r3, r1
 80062a2:	4611      	mov	r1, r2
 80062a4:	4b3b      	ldr	r3, [pc, #236]	; (8006394 <UART_SetConfig+0x2d4>)
 80062a6:	fba3 2301 	umull	r2, r3, r3, r1
 80062aa:	095b      	lsrs	r3, r3, #5
 80062ac:	2264      	movs	r2, #100	; 0x64
 80062ae:	fb02 f303 	mul.w	r3, r2, r3
 80062b2:	1acb      	subs	r3, r1, r3
 80062b4:	00db      	lsls	r3, r3, #3
 80062b6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80062ba:	4b36      	ldr	r3, [pc, #216]	; (8006394 <UART_SetConfig+0x2d4>)
 80062bc:	fba3 2302 	umull	r2, r3, r3, r2
 80062c0:	095b      	lsrs	r3, r3, #5
 80062c2:	005b      	lsls	r3, r3, #1
 80062c4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80062c8:	441c      	add	r4, r3
 80062ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062ce:	2200      	movs	r2, #0
 80062d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80062d4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80062d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80062dc:	4642      	mov	r2, r8
 80062de:	464b      	mov	r3, r9
 80062e0:	1891      	adds	r1, r2, r2
 80062e2:	63b9      	str	r1, [r7, #56]	; 0x38
 80062e4:	415b      	adcs	r3, r3
 80062e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80062ec:	4641      	mov	r1, r8
 80062ee:	1851      	adds	r1, r2, r1
 80062f0:	6339      	str	r1, [r7, #48]	; 0x30
 80062f2:	4649      	mov	r1, r9
 80062f4:	414b      	adcs	r3, r1
 80062f6:	637b      	str	r3, [r7, #52]	; 0x34
 80062f8:	f04f 0200 	mov.w	r2, #0
 80062fc:	f04f 0300 	mov.w	r3, #0
 8006300:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006304:	4659      	mov	r1, fp
 8006306:	00cb      	lsls	r3, r1, #3
 8006308:	4651      	mov	r1, sl
 800630a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800630e:	4651      	mov	r1, sl
 8006310:	00ca      	lsls	r2, r1, #3
 8006312:	4610      	mov	r0, r2
 8006314:	4619      	mov	r1, r3
 8006316:	4603      	mov	r3, r0
 8006318:	4642      	mov	r2, r8
 800631a:	189b      	adds	r3, r3, r2
 800631c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006320:	464b      	mov	r3, r9
 8006322:	460a      	mov	r2, r1
 8006324:	eb42 0303 	adc.w	r3, r2, r3
 8006328:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800632c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006338:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800633c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006340:	460b      	mov	r3, r1
 8006342:	18db      	adds	r3, r3, r3
 8006344:	62bb      	str	r3, [r7, #40]	; 0x28
 8006346:	4613      	mov	r3, r2
 8006348:	eb42 0303 	adc.w	r3, r2, r3
 800634c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800634e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006352:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006356:	f7f9 ff93 	bl	8000280 <__aeabi_uldivmod>
 800635a:	4602      	mov	r2, r0
 800635c:	460b      	mov	r3, r1
 800635e:	4b0d      	ldr	r3, [pc, #52]	; (8006394 <UART_SetConfig+0x2d4>)
 8006360:	fba3 1302 	umull	r1, r3, r3, r2
 8006364:	095b      	lsrs	r3, r3, #5
 8006366:	2164      	movs	r1, #100	; 0x64
 8006368:	fb01 f303 	mul.w	r3, r1, r3
 800636c:	1ad3      	subs	r3, r2, r3
 800636e:	00db      	lsls	r3, r3, #3
 8006370:	3332      	adds	r3, #50	; 0x32
 8006372:	4a08      	ldr	r2, [pc, #32]	; (8006394 <UART_SetConfig+0x2d4>)
 8006374:	fba2 2303 	umull	r2, r3, r2, r3
 8006378:	095b      	lsrs	r3, r3, #5
 800637a:	f003 0207 	and.w	r2, r3, #7
 800637e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4422      	add	r2, r4
 8006386:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006388:	e105      	b.n	8006596 <UART_SetConfig+0x4d6>
 800638a:	bf00      	nop
 800638c:	40011000 	.word	0x40011000
 8006390:	40011400 	.word	0x40011400
 8006394:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006398:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800639c:	2200      	movs	r2, #0
 800639e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80063a2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80063a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80063aa:	4642      	mov	r2, r8
 80063ac:	464b      	mov	r3, r9
 80063ae:	1891      	adds	r1, r2, r2
 80063b0:	6239      	str	r1, [r7, #32]
 80063b2:	415b      	adcs	r3, r3
 80063b4:	627b      	str	r3, [r7, #36]	; 0x24
 80063b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80063ba:	4641      	mov	r1, r8
 80063bc:	1854      	adds	r4, r2, r1
 80063be:	4649      	mov	r1, r9
 80063c0:	eb43 0501 	adc.w	r5, r3, r1
 80063c4:	f04f 0200 	mov.w	r2, #0
 80063c8:	f04f 0300 	mov.w	r3, #0
 80063cc:	00eb      	lsls	r3, r5, #3
 80063ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80063d2:	00e2      	lsls	r2, r4, #3
 80063d4:	4614      	mov	r4, r2
 80063d6:	461d      	mov	r5, r3
 80063d8:	4643      	mov	r3, r8
 80063da:	18e3      	adds	r3, r4, r3
 80063dc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80063e0:	464b      	mov	r3, r9
 80063e2:	eb45 0303 	adc.w	r3, r5, r3
 80063e6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80063ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	2200      	movs	r2, #0
 80063f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80063f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80063fa:	f04f 0200 	mov.w	r2, #0
 80063fe:	f04f 0300 	mov.w	r3, #0
 8006402:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006406:	4629      	mov	r1, r5
 8006408:	008b      	lsls	r3, r1, #2
 800640a:	4621      	mov	r1, r4
 800640c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006410:	4621      	mov	r1, r4
 8006412:	008a      	lsls	r2, r1, #2
 8006414:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006418:	f7f9 ff32 	bl	8000280 <__aeabi_uldivmod>
 800641c:	4602      	mov	r2, r0
 800641e:	460b      	mov	r3, r1
 8006420:	4b60      	ldr	r3, [pc, #384]	; (80065a4 <UART_SetConfig+0x4e4>)
 8006422:	fba3 2302 	umull	r2, r3, r3, r2
 8006426:	095b      	lsrs	r3, r3, #5
 8006428:	011c      	lsls	r4, r3, #4
 800642a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800642e:	2200      	movs	r2, #0
 8006430:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006434:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006438:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800643c:	4642      	mov	r2, r8
 800643e:	464b      	mov	r3, r9
 8006440:	1891      	adds	r1, r2, r2
 8006442:	61b9      	str	r1, [r7, #24]
 8006444:	415b      	adcs	r3, r3
 8006446:	61fb      	str	r3, [r7, #28]
 8006448:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800644c:	4641      	mov	r1, r8
 800644e:	1851      	adds	r1, r2, r1
 8006450:	6139      	str	r1, [r7, #16]
 8006452:	4649      	mov	r1, r9
 8006454:	414b      	adcs	r3, r1
 8006456:	617b      	str	r3, [r7, #20]
 8006458:	f04f 0200 	mov.w	r2, #0
 800645c:	f04f 0300 	mov.w	r3, #0
 8006460:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006464:	4659      	mov	r1, fp
 8006466:	00cb      	lsls	r3, r1, #3
 8006468:	4651      	mov	r1, sl
 800646a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800646e:	4651      	mov	r1, sl
 8006470:	00ca      	lsls	r2, r1, #3
 8006472:	4610      	mov	r0, r2
 8006474:	4619      	mov	r1, r3
 8006476:	4603      	mov	r3, r0
 8006478:	4642      	mov	r2, r8
 800647a:	189b      	adds	r3, r3, r2
 800647c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006480:	464b      	mov	r3, r9
 8006482:	460a      	mov	r2, r1
 8006484:	eb42 0303 	adc.w	r3, r2, r3
 8006488:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	67bb      	str	r3, [r7, #120]	; 0x78
 8006496:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80064a4:	4649      	mov	r1, r9
 80064a6:	008b      	lsls	r3, r1, #2
 80064a8:	4641      	mov	r1, r8
 80064aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80064ae:	4641      	mov	r1, r8
 80064b0:	008a      	lsls	r2, r1, #2
 80064b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80064b6:	f7f9 fee3 	bl	8000280 <__aeabi_uldivmod>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4b39      	ldr	r3, [pc, #228]	; (80065a4 <UART_SetConfig+0x4e4>)
 80064c0:	fba3 1302 	umull	r1, r3, r3, r2
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	2164      	movs	r1, #100	; 0x64
 80064c8:	fb01 f303 	mul.w	r3, r1, r3
 80064cc:	1ad3      	subs	r3, r2, r3
 80064ce:	011b      	lsls	r3, r3, #4
 80064d0:	3332      	adds	r3, #50	; 0x32
 80064d2:	4a34      	ldr	r2, [pc, #208]	; (80065a4 <UART_SetConfig+0x4e4>)
 80064d4:	fba2 2303 	umull	r2, r3, r2, r3
 80064d8:	095b      	lsrs	r3, r3, #5
 80064da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80064de:	441c      	add	r4, r3
 80064e0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064e4:	2200      	movs	r2, #0
 80064e6:	673b      	str	r3, [r7, #112]	; 0x70
 80064e8:	677a      	str	r2, [r7, #116]	; 0x74
 80064ea:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80064ee:	4642      	mov	r2, r8
 80064f0:	464b      	mov	r3, r9
 80064f2:	1891      	adds	r1, r2, r2
 80064f4:	60b9      	str	r1, [r7, #8]
 80064f6:	415b      	adcs	r3, r3
 80064f8:	60fb      	str	r3, [r7, #12]
 80064fa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80064fe:	4641      	mov	r1, r8
 8006500:	1851      	adds	r1, r2, r1
 8006502:	6039      	str	r1, [r7, #0]
 8006504:	4649      	mov	r1, r9
 8006506:	414b      	adcs	r3, r1
 8006508:	607b      	str	r3, [r7, #4]
 800650a:	f04f 0200 	mov.w	r2, #0
 800650e:	f04f 0300 	mov.w	r3, #0
 8006512:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006516:	4659      	mov	r1, fp
 8006518:	00cb      	lsls	r3, r1, #3
 800651a:	4651      	mov	r1, sl
 800651c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006520:	4651      	mov	r1, sl
 8006522:	00ca      	lsls	r2, r1, #3
 8006524:	4610      	mov	r0, r2
 8006526:	4619      	mov	r1, r3
 8006528:	4603      	mov	r3, r0
 800652a:	4642      	mov	r2, r8
 800652c:	189b      	adds	r3, r3, r2
 800652e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006530:	464b      	mov	r3, r9
 8006532:	460a      	mov	r2, r1
 8006534:	eb42 0303 	adc.w	r3, r2, r3
 8006538:	66fb      	str	r3, [r7, #108]	; 0x6c
 800653a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	2200      	movs	r2, #0
 8006542:	663b      	str	r3, [r7, #96]	; 0x60
 8006544:	667a      	str	r2, [r7, #100]	; 0x64
 8006546:	f04f 0200 	mov.w	r2, #0
 800654a:	f04f 0300 	mov.w	r3, #0
 800654e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006552:	4649      	mov	r1, r9
 8006554:	008b      	lsls	r3, r1, #2
 8006556:	4641      	mov	r1, r8
 8006558:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800655c:	4641      	mov	r1, r8
 800655e:	008a      	lsls	r2, r1, #2
 8006560:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006564:	f7f9 fe8c 	bl	8000280 <__aeabi_uldivmod>
 8006568:	4602      	mov	r2, r0
 800656a:	460b      	mov	r3, r1
 800656c:	4b0d      	ldr	r3, [pc, #52]	; (80065a4 <UART_SetConfig+0x4e4>)
 800656e:	fba3 1302 	umull	r1, r3, r3, r2
 8006572:	095b      	lsrs	r3, r3, #5
 8006574:	2164      	movs	r1, #100	; 0x64
 8006576:	fb01 f303 	mul.w	r3, r1, r3
 800657a:	1ad3      	subs	r3, r2, r3
 800657c:	011b      	lsls	r3, r3, #4
 800657e:	3332      	adds	r3, #50	; 0x32
 8006580:	4a08      	ldr	r2, [pc, #32]	; (80065a4 <UART_SetConfig+0x4e4>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	095b      	lsrs	r3, r3, #5
 8006588:	f003 020f 	and.w	r2, r3, #15
 800658c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	4422      	add	r2, r4
 8006594:	609a      	str	r2, [r3, #8]
}
 8006596:	bf00      	nop
 8006598:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800659c:	46bd      	mov	sp, r7
 800659e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80065a2:	bf00      	nop
 80065a4:	51eb851f 	.word	0x51eb851f

080065a8 <OV7670_Init>:
		{ 0xc7, 0x40 }, { 0xcc, 0x42 }, { 0xcd, 0x3f }, { 0xce, 0x71 }, { 0xff,
				0xff } };



void OV7670_Init(I2C_HandleTypeDef *p_hi2c, DCMI_HandleTypeDef *p_hdcmi) {
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
	phi2c = p_hi2c;
 80065b2:	4a17      	ldr	r2, [pc, #92]	; (8006610 <OV7670_Init+0x68>)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6013      	str	r3, [r2, #0]
	phdcmi = p_hdcmi;
 80065b8:	4a16      	ldr	r2, [pc, #88]	; (8006614 <OV7670_Init+0x6c>)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	6013      	str	r3, [r2, #0]

	// Hardware reset
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_RESET);
 80065be:	2200      	movs	r2, #0
 80065c0:	2180      	movs	r1, #128	; 0x80
 80065c2:	4815      	ldr	r0, [pc, #84]	; (8006618 <OV7670_Init+0x70>)
 80065c4:	f7fd f934 	bl	8003830 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80065c8:	2064      	movs	r0, #100	; 0x64
 80065ca:	f7fa fdfd 	bl	80011c8 <HAL_Delay>
	HAL_GPIO_WritePin(CAMERA_RESET_GPIO_Port, CAMERA_RESET_Pin, GPIO_PIN_SET);
 80065ce:	2201      	movs	r2, #1
 80065d0:	2180      	movs	r1, #128	; 0x80
 80065d2:	4811      	ldr	r0, [pc, #68]	; (8006618 <OV7670_Init+0x70>)
 80065d4:	f7fd f92c 	bl	8003830 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80065d8:	2064      	movs	r0, #100	; 0x64
 80065da:	f7fa fdf5 	bl	80011c8 <HAL_Delay>

	// Software reset: reset all registers to default values
	//SCCB_Write(0xff, 0x01);
	SCCB_Write(0x12, 0x80);
 80065de:	2180      	movs	r1, #128	; 0x80
 80065e0:	2012      	movs	r0, #18
 80065e2:	f000 f957 	bl	8006894 <SCCB_Write>
	HAL_Delay(30);
 80065e6:	201e      	movs	r0, #30
 80065e8:	f7fa fdee 	bl	80011c8 <HAL_Delay>


#ifdef DEBUG
	uint8_t buffer[4];
		 SCCB_Read(0x0b, buffer);
 80065ec:	f107 030c 	add.w	r3, r7, #12
 80065f0:	4619      	mov	r1, r3
 80065f2:	200b      	movs	r0, #11
 80065f4:	f000 f97e 	bl	80068f4 <SCCB_Read>
		 printf("[OV7670] dev id = %02X\n", buffer[0]);
 80065f8:	7b3b      	ldrb	r3, [r7, #12]
 80065fa:	4619      	mov	r1, r3
 80065fc:	4807      	ldr	r0, [pc, #28]	; (800661c <OV7670_Init+0x74>)
 80065fe:	f000 fae7 	bl	8006bd0 <iprintf>
#endif

	// Stop DCMI clear buffer
	OV7670_StopDCMI();
 8006602:	f000 f911 	bl	8006828 <OV7670_StopDCMI>
}
 8006606:	bf00      	nop
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	20003cc8 	.word	0x20003cc8
 8006614:	20003ccc 	.word	0x20003ccc
 8006618:	40021000 	.word	0x40021000
 800661c:	08007d0c 	.word	0x08007d0c

08006620 <OV7670_ResolutionOptions>:

void OV7670_ResolutionOptions(uint16_t opt) {
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	4603      	mov	r3, r0
 8006628:	80fb      	strh	r3, [r7, #6]
	switch (opt) {
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006630:	4293      	cmp	r3, r2
 8006632:	d037      	beq.n	80066a4 <OV7670_ResolutionOptions+0x84>
 8006634:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006638:	da38      	bge.n	80066ac <OV7670_ResolutionOptions+0x8c>
 800663a:	f24b 12df 	movw	r2, #45535	; 0xb1df
 800663e:	4293      	cmp	r3, r2
 8006640:	d02c      	beq.n	800669c <OV7670_ResolutionOptions+0x7c>
 8006642:	f24b 12df 	movw	r2, #45535	; 0xb1df
 8006646:	4293      	cmp	r3, r2
 8006648:	dc30      	bgt.n	80066ac <OV7670_ResolutionOptions+0x8c>
 800664a:	f246 32bf 	movw	r2, #25535	; 0x63bf
 800664e:	4293      	cmp	r3, r2
 8006650:	d020      	beq.n	8006694 <OV7670_ResolutionOptions+0x74>
 8006652:	f246 32bf 	movw	r2, #25535	; 0x63bf
 8006656:	4293      	cmp	r3, r2
 8006658:	dc28      	bgt.n	80066ac <OV7670_ResolutionOptions+0x8c>
 800665a:	f643 42af 	movw	r2, #15535	; 0x3caf
 800665e:	4293      	cmp	r3, r2
 8006660:	d014      	beq.n	800668c <OV7670_ResolutionOptions+0x6c>
 8006662:	f643 42af 	movw	r2, #15535	; 0x3caf
 8006666:	4293      	cmp	r3, r2
 8006668:	dc20      	bgt.n	80066ac <OV7670_ResolutionOptions+0x8c>
 800666a:	f643 42ad 	movw	r2, #15533	; 0x3cad
 800666e:	4293      	cmp	r3, r2
 8006670:	d004      	beq.n	800667c <OV7670_ResolutionOptions+0x5c>
 8006672:	f643 42ae 	movw	r2, #15534	; 0x3cae
 8006676:	4293      	cmp	r3, r2
 8006678:	d004      	beq.n	8006684 <OV7670_ResolutionOptions+0x64>
 800667a:	e017      	b.n	80066ac <OV7670_ResolutionOptions+0x8c>
	case 15533:
		OV7670_ResolutionConfiguration(0);
 800667c:	2000      	movs	r0, #0
 800667e:	f000 f81d 	bl	80066bc <OV7670_ResolutionConfiguration>
		break;
 8006682:	e017      	b.n	80066b4 <OV7670_ResolutionOptions+0x94>
	case 15534:
		OV7670_ResolutionConfiguration(1);
 8006684:	2001      	movs	r0, #1
 8006686:	f000 f819 	bl	80066bc <OV7670_ResolutionConfiguration>
		break;
 800668a:	e013      	b.n	80066b4 <OV7670_ResolutionOptions+0x94>
	case 15535:
		OV7670_ResolutionConfiguration(2);
 800668c:	2002      	movs	r0, #2
 800668e:	f000 f815 	bl	80066bc <OV7670_ResolutionConfiguration>
		break;
 8006692:	e00f      	b.n	80066b4 <OV7670_ResolutionOptions+0x94>
	case 25535:
		OV7670_ResolutionConfiguration(3);
 8006694:	2003      	movs	r0, #3
 8006696:	f000 f811 	bl	80066bc <OV7670_ResolutionConfiguration>
		break;
 800669a:	e00b      	b.n	80066b4 <OV7670_ResolutionOptions+0x94>
	case 45535:
		OV7670_ResolutionConfiguration(4);
 800669c:	2004      	movs	r0, #4
 800669e:	f000 f80d 	bl	80066bc <OV7670_ResolutionConfiguration>
		break;
 80066a2:	e007      	b.n	80066b4 <OV7670_ResolutionOptions+0x94>
	case 65535:
		OV7670_ResolutionConfiguration(5);
 80066a4:	2005      	movs	r0, #5
 80066a6:	f000 f809 	bl	80066bc <OV7670_ResolutionConfiguration>
		break;
 80066aa:	e003      	b.n	80066b4 <OV7670_ResolutionOptions+0x94>
	default:
		OV7670_ResolutionConfiguration(1);
 80066ac:	2001      	movs	r0, #1
 80066ae:	f000 f805 	bl	80066bc <OV7670_ResolutionConfiguration>
		break;
 80066b2:	bf00      	nop
	}

}
 80066b4:	bf00      	nop
 80066b6:	3708      	adds	r7, #8
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}

080066bc <OV7670_ResolutionConfiguration>:

void OV7670_ResolutionConfiguration(short opt) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	80fb      	strh	r3, [r7, #6]
#ifdef DEBUG
	my_printf("Starting resolution choice \r\n");
 80066c6:	4827      	ldr	r0, [pc, #156]	; (8006764 <OV7670_ResolutionConfiguration+0xa8>)
 80066c8:	f7f9 ffb0 	bl	800062c <my_printf>
#endif
	SCCB_Write(REG_COM3, 4);
 80066cc:	2104      	movs	r1, #4
 80066ce:	200c      	movs	r0, #12
 80066d0:	f000 f8e0 	bl	8006894 <SCCB_Write>
	OV7670_Configuration(OV7670_JPEG_INIT);
 80066d4:	4824      	ldr	r0, [pc, #144]	; (8006768 <OV7670_ResolutionConfiguration+0xac>)
 80066d6:	f000 f859 	bl	800678c <OV7670_Configuration>
	OV7670_Configuration(OV7670_YUV422);
 80066da:	4824      	ldr	r0, [pc, #144]	; (800676c <OV7670_ResolutionConfiguration+0xb0>)
 80066dc:	f000 f856 	bl	800678c <OV7670_Configuration>
	//OV7670_Configuration(OV7670_JPEG);
	HAL_Delay(10);
 80066e0:	200a      	movs	r0, #10
 80066e2:	f7fa fd71 	bl	80011c8 <HAL_Delay>
	//SCCB_Write(0xff, 0x01);
	HAL_Delay(10);
 80066e6:	200a      	movs	r0, #10
 80066e8:	f7fa fd6e 	bl	80011c8 <HAL_Delay>
	//SCCB_Write(0x15, 0x00);

	switch (opt) {
 80066ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80066f0:	2b05      	cmp	r3, #5
 80066f2:	d827      	bhi.n	8006744 <OV7670_ResolutionConfiguration+0x88>
 80066f4:	a201      	add	r2, pc, #4	; (adr r2, 80066fc <OV7670_ResolutionConfiguration+0x40>)
 80066f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066fa:	bf00      	nop
 80066fc:	08006715 	.word	0x08006715
 8006700:	0800671d 	.word	0x0800671d
 8006704:	08006725 	.word	0x08006725
 8006708:	0800672d 	.word	0x0800672d
 800670c:	08006735 	.word	0x08006735
 8006710:	0800673d 	.word	0x0800673d
	case 0:
		OV7670_Configuration(OV7670_160x120_JPEG);
 8006714:	4816      	ldr	r0, [pc, #88]	; (8006770 <OV7670_ResolutionConfiguration+0xb4>)
 8006716:	f000 f839 	bl	800678c <OV7670_Configuration>
		break;
 800671a:	e017      	b.n	800674c <OV7670_ResolutionConfiguration+0x90>
	case 1:
		OV7670_Configuration(OV7670_320x240_JPEG);
 800671c:	4815      	ldr	r0, [pc, #84]	; (8006774 <OV7670_ResolutionConfiguration+0xb8>)
 800671e:	f000 f835 	bl	800678c <OV7670_Configuration>
		break;
 8006722:	e013      	b.n	800674c <OV7670_ResolutionConfiguration+0x90>
	case 2:
		OV7670_Configuration(OV7670_640x480_JPEG);
 8006724:	4814      	ldr	r0, [pc, #80]	; (8006778 <OV7670_ResolutionConfiguration+0xbc>)
 8006726:	f000 f831 	bl	800678c <OV7670_Configuration>
		break;
 800672a:	e00f      	b.n	800674c <OV7670_ResolutionConfiguration+0x90>
	case 3:
		OV7670_Configuration(OV7670_800x600_JPEG);
 800672c:	4813      	ldr	r0, [pc, #76]	; (800677c <OV7670_ResolutionConfiguration+0xc0>)
 800672e:	f000 f82d 	bl	800678c <OV7670_Configuration>
		break;
 8006732:	e00b      	b.n	800674c <OV7670_ResolutionConfiguration+0x90>
	case 4:
		OV7670_Configuration(OV7670_1024x768_JPEG);
 8006734:	4812      	ldr	r0, [pc, #72]	; (8006780 <OV7670_ResolutionConfiguration+0xc4>)
 8006736:	f000 f829 	bl	800678c <OV7670_Configuration>
		break;
 800673a:	e007      	b.n	800674c <OV7670_ResolutionConfiguration+0x90>
	case 5:
		OV7670_Configuration(OV7670_1280x960_JPEG);
 800673c:	4811      	ldr	r0, [pc, #68]	; (8006784 <OV7670_ResolutionConfiguration+0xc8>)
 800673e:	f000 f825 	bl	800678c <OV7670_Configuration>
		break;
 8006742:	e003      	b.n	800674c <OV7670_ResolutionConfiguration+0x90>
	default:
		OV7670_Configuration(OV7670_320x240_JPEG);
 8006744:	480b      	ldr	r0, [pc, #44]	; (8006774 <OV7670_ResolutionConfiguration+0xb8>)
 8006746:	f000 f821 	bl	800678c <OV7670_Configuration>
		break;
 800674a:	bf00      	nop
	}

#ifdef DEBUG
	my_printf("Finalize configuration \r\n");
 800674c:	480e      	ldr	r0, [pc, #56]	; (8006788 <OV7670_ResolutionConfiguration+0xcc>)
 800674e:	f7f9 ff6d 	bl	800062c <my_printf>
#endif
	SCCB_Write(0x11, 12);
 8006752:	210c      	movs	r1, #12
 8006754:	2011      	movs	r0, #17
 8006756:	f000 f89d 	bl	8006894 <SCCB_Write>
}
 800675a:	bf00      	nop
 800675c:	3708      	adds	r7, #8
 800675e:	46bd      	mov	sp, r7
 8006760:	bd80      	pop	{r7, pc}
 8006762:	bf00      	nop
 8006764:	08007d24 	.word	0x08007d24
 8006768:	08007de8 	.word	0x08007de8
 800676c:	08007f24 	.word	0x08007f24
 8006770:	08007f40 	.word	0x08007f40
 8006774:	08007f90 	.word	0x08007f90
 8006778:	08007fa4 	.word	0x08007fa4
 800677c:	08007ff8 	.word	0x08007ff8
 8006780:	0800804c 	.word	0x0800804c
 8006784:	0800809c 	.word	0x0800809c
 8006788:	08007d44 	.word	0x08007d44

0800678c <OV7670_Configuration>:

void OV7670_Configuration(const unsigned char arr[][2]) {
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	unsigned short i = 0;
 8006794:	2300      	movs	r3, #0
 8006796:	81fb      	strh	r3, [r7, #14]
	uint8_t reg_addr, data, data_read;
	while (1) {
		reg_addr = arr[i][0];
 8006798:	89fb      	ldrh	r3, [r7, #14]
 800679a:	005b      	lsls	r3, r3, #1
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	4413      	add	r3, r2
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	737b      	strb	r3, [r7, #13]
		data = arr[i][1];
 80067a4:	89fb      	ldrh	r3, [r7, #14]
 80067a6:	005b      	lsls	r3, r3, #1
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	4413      	add	r3, r2
 80067ac:	785b      	ldrb	r3, [r3, #1]
 80067ae:	733b      	strb	r3, [r7, #12]
		if (reg_addr == 0xff && data == 0xff) {
 80067b0:	7b7b      	ldrb	r3, [r7, #13]
 80067b2:	2bff      	cmp	r3, #255	; 0xff
 80067b4:	d102      	bne.n	80067bc <OV7670_Configuration+0x30>
 80067b6:	7b3b      	ldrb	r3, [r7, #12]
 80067b8:	2bff      	cmp	r3, #255	; 0xff
 80067ba:	d02b      	beq.n	8006814 <OV7670_Configuration+0x88>
			break;
		}
		SCCB_Read(reg_addr, &data_read);
 80067bc:	f107 020b 	add.w	r2, r7, #11
 80067c0:	7b7b      	ldrb	r3, [r7, #13]
 80067c2:	4611      	mov	r1, r2
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 f895 	bl	80068f4 <SCCB_Read>
		SCCB_Write(reg_addr, data);
 80067ca:	7b3a      	ldrb	r2, [r7, #12]
 80067cc:	7b7b      	ldrb	r3, [r7, #13]
 80067ce:	4611      	mov	r1, r2
 80067d0:	4618      	mov	r0, r3
 80067d2:	f000 f85f 	bl	8006894 <SCCB_Write>
#ifdef DEBUG
		my_printf("SCCB write: 0x%x 0x%x=>0x%x\r\n", reg_addr, data_read, data);
 80067d6:	7b79      	ldrb	r1, [r7, #13]
 80067d8:	7afb      	ldrb	r3, [r7, #11]
 80067da:	461a      	mov	r2, r3
 80067dc:	7b3b      	ldrb	r3, [r7, #12]
 80067de:	4810      	ldr	r0, [pc, #64]	; (8006820 <OV7670_Configuration+0x94>)
 80067e0:	f7f9 ff24 	bl	800062c <my_printf>
#endif
		HAL_Delay(10);
 80067e4:	200a      	movs	r0, #10
 80067e6:	f7fa fcef 	bl	80011c8 <HAL_Delay>
		SCCB_Read(reg_addr, &data_read);
 80067ea:	f107 020b 	add.w	r2, r7, #11
 80067ee:	7b7b      	ldrb	r3, [r7, #13]
 80067f0:	4611      	mov	r1, r2
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f87e 	bl	80068f4 <SCCB_Read>
		if (data != data_read) {
 80067f8:	7afb      	ldrb	r3, [r7, #11]
 80067fa:	7b3a      	ldrb	r2, [r7, #12]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d005      	beq.n	800680c <OV7670_Configuration+0x80>
#ifdef DEBUG
			my_printf("SCCB write failure: 0x%x 0x%x\r\n", reg_addr, data_read);
 8006800:	7b7b      	ldrb	r3, [r7, #13]
 8006802:	7afa      	ldrb	r2, [r7, #11]
 8006804:	4619      	mov	r1, r3
 8006806:	4807      	ldr	r0, [pc, #28]	; (8006824 <OV7670_Configuration+0x98>)
 8006808:	f7f9 ff10 	bl	800062c <my_printf>
#endif
		}
		i++;
 800680c:	89fb      	ldrh	r3, [r7, #14]
 800680e:	3301      	adds	r3, #1
 8006810:	81fb      	strh	r3, [r7, #14]
	while (1) {
 8006812:	e7c1      	b.n	8006798 <OV7670_Configuration+0xc>
			break;
 8006814:	bf00      	nop
	}
}
 8006816:	bf00      	nop
 8006818:	3710      	adds	r7, #16
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	08007d60 	.word	0x08007d60
 8006824:	08007d80 	.word	0x08007d80

08006828 <OV7670_StopDCMI>:

/**
 * Stop DCMI (Clear  memory buffer)
 */
void OV7670_StopDCMI(void) {
 8006828:	b580      	push	{r7, lr}
 800682a:	af00      	add	r7, sp, #0
#ifdef DEBUG
	my_printf("DCMI has been stopped \r\n");
 800682c:	4806      	ldr	r0, [pc, #24]	; (8006848 <OV7670_StopDCMI+0x20>)
 800682e:	f7f9 fefd 	bl	800062c <my_printf>
#endif
	HAL_DCMI_Stop(phdcmi);
 8006832:	4b06      	ldr	r3, [pc, #24]	; (800684c <OV7670_StopDCMI+0x24>)
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	4618      	mov	r0, r3
 8006838:	f7fa fe9c 	bl	8001574 <HAL_DCMI_Stop>
	HAL_Delay(10); // If you get a DCMI error (data is not received), increase value to 30.
 800683c:	200a      	movs	r0, #10
 800683e:	f7fa fcc3 	bl	80011c8 <HAL_Delay>
}
 8006842:	bf00      	nop
 8006844:	bd80      	pop	{r7, pc}
 8006846:	bf00      	nop
 8006848:	08007da0 	.word	0x08007da0
 800684c:	20003ccc 	.word	0x20003ccc

08006850 <OV7670_CaptureSnapshot>:
/**
 * Executes a single reading from DCMI and returns  data as an image.
 * @param frameBuffer Table with data.
 * @param length Length of capture to be transferred.
 */
void OV7670_CaptureSnapshot(uint32_t frameBuffer, int length) {
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
 8006858:	6039      	str	r1, [r7, #0]
	HAL_DCMI_Start_DMA(phdcmi, DCMI_MODE_SNAPSHOT, frameBuffer, length);
 800685a:	4b0d      	ldr	r3, [pc, #52]	; (8006890 <OV7670_CaptureSnapshot+0x40>)
 800685c:	6818      	ldr	r0, [r3, #0]
 800685e:	683b      	ldr	r3, [r7, #0]
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	2102      	movs	r1, #2
 8006864:	f7fa fde6 	bl	8001434 <HAL_DCMI_Start_DMA>
	//HAL_DCMI_Start_DMA(phdcmi, DCMI_MODE_CONTINUOUS, frameBuffer, length);

	HAL_Delay(2000);
 8006868:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800686c:	f7fa fcac 	bl	80011c8 <HAL_Delay>
	//HAL_DCMI_Suspend(phdcmi);
	//HAL_DCMI_Stop(phdcmi);

	while(HAL_DCMI_GetState(phdcmi) == HAL_DCMI_STATE_BUSY) HAL_Delay(20);
 8006870:	e002      	b.n	8006878 <OV7670_CaptureSnapshot+0x28>
 8006872:	2014      	movs	r0, #20
 8006874:	f7fa fca8 	bl	80011c8 <HAL_Delay>
 8006878:	4b05      	ldr	r3, [pc, #20]	; (8006890 <OV7670_CaptureSnapshot+0x40>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4618      	mov	r0, r3
 800687e:	f7fa ff71 	bl	8001764 <HAL_DCMI_GetState>
 8006882:	4603      	mov	r3, r0
 8006884:	2b02      	cmp	r3, #2
 8006886:	d0f4      	beq.n	8006872 <OV7670_CaptureSnapshot+0x22>

return;
 8006888:	bf00      	nop
}
 800688a:	3708      	adds	r7, #8
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20003ccc 	.word	0x20003ccc

08006894 <SCCB_Write>:
 * Write value to camera register.
 * @param reg_addr Address of register.
 * @param data New value.
 * @return  Operation status.
 */
short SCCB_Write(uint8_t reg_addr, uint8_t data) {
 8006894:	b580      	push	{r7, lr}
 8006896:	b086      	sub	sp, #24
 8006898:	af02      	add	r7, sp, #8
 800689a:	4603      	mov	r3, r0
 800689c:	460a      	mov	r2, r1
 800689e:	71fb      	strb	r3, [r7, #7]
 80068a0:	4613      	mov	r3, r2
 80068a2:	71bb      	strb	r3, [r7, #6]
	short opertionStatus = 0;
 80068a4:	2300      	movs	r3, #0
 80068a6:	81fb      	strh	r3, [r7, #14]
	uint8_t buffer[2] = { 0 };
 80068a8:	2300      	movs	r3, #0
 80068aa:	813b      	strh	r3, [r7, #8]
	HAL_StatusTypeDef connectionStatus;
	buffer[0] = reg_addr;
 80068ac:	79fb      	ldrb	r3, [r7, #7]
 80068ae:	723b      	strb	r3, [r7, #8]
	buffer[1] = data;
 80068b0:	79bb      	ldrb	r3, [r7, #6]
 80068b2:	727b      	strb	r3, [r7, #9]
  __ASM volatile ("cpsid i" : : : "memory");
 80068b4:	b672      	cpsid	i
}
 80068b6:	bf00      	nop
	__disable_irq();
	connectionStatus = HAL_I2C_Master_Transmit(phi2c, (uint16_t) 0x42, buffer,
 80068b8:	4b0d      	ldr	r3, [pc, #52]	; (80068f0 <SCCB_Write+0x5c>)
 80068ba:	6818      	ldr	r0, [r3, #0]
 80068bc:	f107 0208 	add.w	r2, r7, #8
 80068c0:	2364      	movs	r3, #100	; 0x64
 80068c2:	9300      	str	r3, [sp, #0]
 80068c4:	2302      	movs	r3, #2
 80068c6:	2142      	movs	r1, #66	; 0x42
 80068c8:	f7fd f910 	bl	8003aec <HAL_I2C_Master_Transmit>
 80068cc:	4603      	mov	r3, r0
 80068ce:	737b      	strb	r3, [r7, #13]
			2, 100);
	if (connectionStatus == HAL_OK) {
 80068d0:	7b7b      	ldrb	r3, [r7, #13]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d102      	bne.n	80068dc <SCCB_Write+0x48>
		opertionStatus = 1;
 80068d6:	2301      	movs	r3, #1
 80068d8:	81fb      	strh	r3, [r7, #14]
 80068da:	e001      	b.n	80068e0 <SCCB_Write+0x4c>
	} else {
		opertionStatus = 0;
 80068dc:	2300      	movs	r3, #0
 80068de:	81fb      	strh	r3, [r7, #14]
  __ASM volatile ("cpsie i" : : : "memory");
 80068e0:	b662      	cpsie	i
}
 80068e2:	bf00      	nop
	}
	__enable_irq();
	return opertionStatus;
 80068e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3710      	adds	r7, #16
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bd80      	pop	{r7, pc}
 80068f0:	20003cc8 	.word	0x20003cc8

080068f4 <SCCB_Read>:
 * Reading data from camera registers.
 * @param reg_addr Address of register.
 * @param pdata Value read from register.
 * @return Operation status.
 */
short SCCB_Read(uint8_t reg_addr, uint8_t *pdata) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b086      	sub	sp, #24
 80068f8:	af02      	add	r7, sp, #8
 80068fa:	4603      	mov	r3, r0
 80068fc:	6039      	str	r1, [r7, #0]
 80068fe:	71fb      	strb	r3, [r7, #7]
	short opertionStatus = 0;
 8006900:	2300      	movs	r3, #0
 8006902:	81fb      	strh	r3, [r7, #14]
  __ASM volatile ("cpsid i" : : : "memory");
 8006904:	b672      	cpsid	i
}
 8006906:	bf00      	nop
	HAL_StatusTypeDef connectionStatus;
	__disable_irq();
	connectionStatus = HAL_I2C_Master_Transmit(phi2c, (uint16_t) 0x42,
 8006908:	4b15      	ldr	r3, [pc, #84]	; (8006960 <SCCB_Read+0x6c>)
 800690a:	6818      	ldr	r0, [r3, #0]
 800690c:	1dfa      	adds	r2, r7, #7
 800690e:	2364      	movs	r3, #100	; 0x64
 8006910:	9300      	str	r3, [sp, #0]
 8006912:	2301      	movs	r3, #1
 8006914:	2142      	movs	r1, #66	; 0x42
 8006916:	f7fd f8e9 	bl	8003aec <HAL_I2C_Master_Transmit>
 800691a:	4603      	mov	r3, r0
 800691c:	737b      	strb	r3, [r7, #13]
			&reg_addr, 1, 100);
	if (connectionStatus == HAL_OK) {
 800691e:	7b7b      	ldrb	r3, [r7, #13]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d113      	bne.n	800694c <SCCB_Read+0x58>
		connectionStatus = HAL_I2C_Master_Receive(phi2c, (uint16_t) 0x43, pdata,
 8006924:	4b0e      	ldr	r3, [pc, #56]	; (8006960 <SCCB_Read+0x6c>)
 8006926:	6818      	ldr	r0, [r3, #0]
 8006928:	2364      	movs	r3, #100	; 0x64
 800692a:	9300      	str	r3, [sp, #0]
 800692c:	2301      	movs	r3, #1
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	2143      	movs	r1, #67	; 0x43
 8006932:	f7fd f9d9 	bl	8003ce8 <HAL_I2C_Master_Receive>
 8006936:	4603      	mov	r3, r0
 8006938:	737b      	strb	r3, [r7, #13]
				1, 100);
		if (connectionStatus == HAL_OK) {
 800693a:	7b7b      	ldrb	r3, [r7, #13]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d102      	bne.n	8006946 <SCCB_Read+0x52>
			opertionStatus = 0;
 8006940:	2300      	movs	r3, #0
 8006942:	81fb      	strh	r3, [r7, #14]
 8006944:	e004      	b.n	8006950 <SCCB_Read+0x5c>
		} else {
			opertionStatus = 1;
 8006946:	2301      	movs	r3, #1
 8006948:	81fb      	strh	r3, [r7, #14]
 800694a:	e001      	b.n	8006950 <SCCB_Read+0x5c>
		}
	} else {
		opertionStatus = 2;
 800694c:	2302      	movs	r3, #2
 800694e:	81fb      	strh	r3, [r7, #14]
  __ASM volatile ("cpsie i" : : : "memory");
 8006950:	b662      	cpsie	i
}
 8006952:	bf00      	nop
	}
	__enable_irq();
	return opertionStatus;
 8006954:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3710      	adds	r7, #16
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	20003cc8 	.word	0x20003cc8

08006964 <HAL_DCMI_FrameEventCallback>:

void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  printf("FRAME %d\n", HAL_GetTick());
 800696c:	f7fa fc20 	bl	80011b0 <HAL_GetTick>
 8006970:	4603      	mov	r3, r0
 8006972:	4619      	mov	r1, r3
 8006974:	4803      	ldr	r0, [pc, #12]	; (8006984 <HAL_DCMI_FrameEventCallback+0x20>)
 8006976:	f000 f92b 	bl	8006bd0 <iprintf>
    HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, s_destAddressForContiuousMode, OV7670_QVGA_WIDTH * OV7670_QVGA_HEIGHT/2);
  }
  s_currentV++;
  s_currentH = 0;
  */
}
 800697a:	bf00      	nop
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	08007dbc 	.word	0x08007dbc

08006988 <__errno>:
 8006988:	4b01      	ldr	r3, [pc, #4]	; (8006990 <__errno+0x8>)
 800698a:	6818      	ldr	r0, [r3, #0]
 800698c:	4770      	bx	lr
 800698e:	bf00      	nop
 8006990:	2000000c 	.word	0x2000000c

08006994 <__libc_init_array>:
 8006994:	b570      	push	{r4, r5, r6, lr}
 8006996:	4d0d      	ldr	r5, [pc, #52]	; (80069cc <__libc_init_array+0x38>)
 8006998:	4c0d      	ldr	r4, [pc, #52]	; (80069d0 <__libc_init_array+0x3c>)
 800699a:	1b64      	subs	r4, r4, r5
 800699c:	10a4      	asrs	r4, r4, #2
 800699e:	2600      	movs	r6, #0
 80069a0:	42a6      	cmp	r6, r4
 80069a2:	d109      	bne.n	80069b8 <__libc_init_array+0x24>
 80069a4:	4d0b      	ldr	r5, [pc, #44]	; (80069d4 <__libc_init_array+0x40>)
 80069a6:	4c0c      	ldr	r4, [pc, #48]	; (80069d8 <__libc_init_array+0x44>)
 80069a8:	f001 f98a 	bl	8007cc0 <_init>
 80069ac:	1b64      	subs	r4, r4, r5
 80069ae:	10a4      	asrs	r4, r4, #2
 80069b0:	2600      	movs	r6, #0
 80069b2:	42a6      	cmp	r6, r4
 80069b4:	d105      	bne.n	80069c2 <__libc_init_array+0x2e>
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069bc:	4798      	blx	r3
 80069be:	3601      	adds	r6, #1
 80069c0:	e7ee      	b.n	80069a0 <__libc_init_array+0xc>
 80069c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c6:	4798      	blx	r3
 80069c8:	3601      	adds	r6, #1
 80069ca:	e7f2      	b.n	80069b2 <__libc_init_array+0x1e>
 80069cc:	08008190 	.word	0x08008190
 80069d0:	08008190 	.word	0x08008190
 80069d4:	08008190 	.word	0x08008190
 80069d8:	08008194 	.word	0x08008194

080069dc <__retarget_lock_init_recursive>:
 80069dc:	4770      	bx	lr

080069de <__retarget_lock_acquire_recursive>:
 80069de:	4770      	bx	lr

080069e0 <__retarget_lock_release_recursive>:
 80069e0:	4770      	bx	lr

080069e2 <memcpy>:
 80069e2:	440a      	add	r2, r1
 80069e4:	4291      	cmp	r1, r2
 80069e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80069ea:	d100      	bne.n	80069ee <memcpy+0xc>
 80069ec:	4770      	bx	lr
 80069ee:	b510      	push	{r4, lr}
 80069f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80069f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80069f8:	4291      	cmp	r1, r2
 80069fa:	d1f9      	bne.n	80069f0 <memcpy+0xe>
 80069fc:	bd10      	pop	{r4, pc}

080069fe <memset>:
 80069fe:	4402      	add	r2, r0
 8006a00:	4603      	mov	r3, r0
 8006a02:	4293      	cmp	r3, r2
 8006a04:	d100      	bne.n	8006a08 <memset+0xa>
 8006a06:	4770      	bx	lr
 8006a08:	f803 1b01 	strb.w	r1, [r3], #1
 8006a0c:	e7f9      	b.n	8006a02 <memset+0x4>
	...

08006a10 <_free_r>:
 8006a10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006a12:	2900      	cmp	r1, #0
 8006a14:	d044      	beq.n	8006aa0 <_free_r+0x90>
 8006a16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a1a:	9001      	str	r0, [sp, #4]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	f1a1 0404 	sub.w	r4, r1, #4
 8006a22:	bfb8      	it	lt
 8006a24:	18e4      	addlt	r4, r4, r3
 8006a26:	f000 fbf7 	bl	8007218 <__malloc_lock>
 8006a2a:	4a1e      	ldr	r2, [pc, #120]	; (8006aa4 <_free_r+0x94>)
 8006a2c:	9801      	ldr	r0, [sp, #4]
 8006a2e:	6813      	ldr	r3, [r2, #0]
 8006a30:	b933      	cbnz	r3, 8006a40 <_free_r+0x30>
 8006a32:	6063      	str	r3, [r4, #4]
 8006a34:	6014      	str	r4, [r2, #0]
 8006a36:	b003      	add	sp, #12
 8006a38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006a3c:	f000 bbf2 	b.w	8007224 <__malloc_unlock>
 8006a40:	42a3      	cmp	r3, r4
 8006a42:	d908      	bls.n	8006a56 <_free_r+0x46>
 8006a44:	6825      	ldr	r5, [r4, #0]
 8006a46:	1961      	adds	r1, r4, r5
 8006a48:	428b      	cmp	r3, r1
 8006a4a:	bf01      	itttt	eq
 8006a4c:	6819      	ldreq	r1, [r3, #0]
 8006a4e:	685b      	ldreq	r3, [r3, #4]
 8006a50:	1949      	addeq	r1, r1, r5
 8006a52:	6021      	streq	r1, [r4, #0]
 8006a54:	e7ed      	b.n	8006a32 <_free_r+0x22>
 8006a56:	461a      	mov	r2, r3
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	b10b      	cbz	r3, 8006a60 <_free_r+0x50>
 8006a5c:	42a3      	cmp	r3, r4
 8006a5e:	d9fa      	bls.n	8006a56 <_free_r+0x46>
 8006a60:	6811      	ldr	r1, [r2, #0]
 8006a62:	1855      	adds	r5, r2, r1
 8006a64:	42a5      	cmp	r5, r4
 8006a66:	d10b      	bne.n	8006a80 <_free_r+0x70>
 8006a68:	6824      	ldr	r4, [r4, #0]
 8006a6a:	4421      	add	r1, r4
 8006a6c:	1854      	adds	r4, r2, r1
 8006a6e:	42a3      	cmp	r3, r4
 8006a70:	6011      	str	r1, [r2, #0]
 8006a72:	d1e0      	bne.n	8006a36 <_free_r+0x26>
 8006a74:	681c      	ldr	r4, [r3, #0]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	6053      	str	r3, [r2, #4]
 8006a7a:	4421      	add	r1, r4
 8006a7c:	6011      	str	r1, [r2, #0]
 8006a7e:	e7da      	b.n	8006a36 <_free_r+0x26>
 8006a80:	d902      	bls.n	8006a88 <_free_r+0x78>
 8006a82:	230c      	movs	r3, #12
 8006a84:	6003      	str	r3, [r0, #0]
 8006a86:	e7d6      	b.n	8006a36 <_free_r+0x26>
 8006a88:	6825      	ldr	r5, [r4, #0]
 8006a8a:	1961      	adds	r1, r4, r5
 8006a8c:	428b      	cmp	r3, r1
 8006a8e:	bf04      	itt	eq
 8006a90:	6819      	ldreq	r1, [r3, #0]
 8006a92:	685b      	ldreq	r3, [r3, #4]
 8006a94:	6063      	str	r3, [r4, #4]
 8006a96:	bf04      	itt	eq
 8006a98:	1949      	addeq	r1, r1, r5
 8006a9a:	6021      	streq	r1, [r4, #0]
 8006a9c:	6054      	str	r4, [r2, #4]
 8006a9e:	e7ca      	b.n	8006a36 <_free_r+0x26>
 8006aa0:	b003      	add	sp, #12
 8006aa2:	bd30      	pop	{r4, r5, pc}
 8006aa4:	20003cd4 	.word	0x20003cd4

08006aa8 <sbrk_aligned>:
 8006aa8:	b570      	push	{r4, r5, r6, lr}
 8006aaa:	4e0e      	ldr	r6, [pc, #56]	; (8006ae4 <sbrk_aligned+0x3c>)
 8006aac:	460c      	mov	r4, r1
 8006aae:	6831      	ldr	r1, [r6, #0]
 8006ab0:	4605      	mov	r5, r0
 8006ab2:	b911      	cbnz	r1, 8006aba <sbrk_aligned+0x12>
 8006ab4:	f000 f8a4 	bl	8006c00 <_sbrk_r>
 8006ab8:	6030      	str	r0, [r6, #0]
 8006aba:	4621      	mov	r1, r4
 8006abc:	4628      	mov	r0, r5
 8006abe:	f000 f89f 	bl	8006c00 <_sbrk_r>
 8006ac2:	1c43      	adds	r3, r0, #1
 8006ac4:	d00a      	beq.n	8006adc <sbrk_aligned+0x34>
 8006ac6:	1cc4      	adds	r4, r0, #3
 8006ac8:	f024 0403 	bic.w	r4, r4, #3
 8006acc:	42a0      	cmp	r0, r4
 8006ace:	d007      	beq.n	8006ae0 <sbrk_aligned+0x38>
 8006ad0:	1a21      	subs	r1, r4, r0
 8006ad2:	4628      	mov	r0, r5
 8006ad4:	f000 f894 	bl	8006c00 <_sbrk_r>
 8006ad8:	3001      	adds	r0, #1
 8006ada:	d101      	bne.n	8006ae0 <sbrk_aligned+0x38>
 8006adc:	f04f 34ff 	mov.w	r4, #4294967295
 8006ae0:	4620      	mov	r0, r4
 8006ae2:	bd70      	pop	{r4, r5, r6, pc}
 8006ae4:	20003cd8 	.word	0x20003cd8

08006ae8 <_malloc_r>:
 8006ae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006aec:	1ccd      	adds	r5, r1, #3
 8006aee:	f025 0503 	bic.w	r5, r5, #3
 8006af2:	3508      	adds	r5, #8
 8006af4:	2d0c      	cmp	r5, #12
 8006af6:	bf38      	it	cc
 8006af8:	250c      	movcc	r5, #12
 8006afa:	2d00      	cmp	r5, #0
 8006afc:	4607      	mov	r7, r0
 8006afe:	db01      	blt.n	8006b04 <_malloc_r+0x1c>
 8006b00:	42a9      	cmp	r1, r5
 8006b02:	d905      	bls.n	8006b10 <_malloc_r+0x28>
 8006b04:	230c      	movs	r3, #12
 8006b06:	603b      	str	r3, [r7, #0]
 8006b08:	2600      	movs	r6, #0
 8006b0a:	4630      	mov	r0, r6
 8006b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b10:	4e2e      	ldr	r6, [pc, #184]	; (8006bcc <_malloc_r+0xe4>)
 8006b12:	f000 fb81 	bl	8007218 <__malloc_lock>
 8006b16:	6833      	ldr	r3, [r6, #0]
 8006b18:	461c      	mov	r4, r3
 8006b1a:	bb34      	cbnz	r4, 8006b6a <_malloc_r+0x82>
 8006b1c:	4629      	mov	r1, r5
 8006b1e:	4638      	mov	r0, r7
 8006b20:	f7ff ffc2 	bl	8006aa8 <sbrk_aligned>
 8006b24:	1c43      	adds	r3, r0, #1
 8006b26:	4604      	mov	r4, r0
 8006b28:	d14d      	bne.n	8006bc6 <_malloc_r+0xde>
 8006b2a:	6834      	ldr	r4, [r6, #0]
 8006b2c:	4626      	mov	r6, r4
 8006b2e:	2e00      	cmp	r6, #0
 8006b30:	d140      	bne.n	8006bb4 <_malloc_r+0xcc>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	4631      	mov	r1, r6
 8006b36:	4638      	mov	r0, r7
 8006b38:	eb04 0803 	add.w	r8, r4, r3
 8006b3c:	f000 f860 	bl	8006c00 <_sbrk_r>
 8006b40:	4580      	cmp	r8, r0
 8006b42:	d13a      	bne.n	8006bba <_malloc_r+0xd2>
 8006b44:	6821      	ldr	r1, [r4, #0]
 8006b46:	3503      	adds	r5, #3
 8006b48:	1a6d      	subs	r5, r5, r1
 8006b4a:	f025 0503 	bic.w	r5, r5, #3
 8006b4e:	3508      	adds	r5, #8
 8006b50:	2d0c      	cmp	r5, #12
 8006b52:	bf38      	it	cc
 8006b54:	250c      	movcc	r5, #12
 8006b56:	4629      	mov	r1, r5
 8006b58:	4638      	mov	r0, r7
 8006b5a:	f7ff ffa5 	bl	8006aa8 <sbrk_aligned>
 8006b5e:	3001      	adds	r0, #1
 8006b60:	d02b      	beq.n	8006bba <_malloc_r+0xd2>
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	442b      	add	r3, r5
 8006b66:	6023      	str	r3, [r4, #0]
 8006b68:	e00e      	b.n	8006b88 <_malloc_r+0xa0>
 8006b6a:	6822      	ldr	r2, [r4, #0]
 8006b6c:	1b52      	subs	r2, r2, r5
 8006b6e:	d41e      	bmi.n	8006bae <_malloc_r+0xc6>
 8006b70:	2a0b      	cmp	r2, #11
 8006b72:	d916      	bls.n	8006ba2 <_malloc_r+0xba>
 8006b74:	1961      	adds	r1, r4, r5
 8006b76:	42a3      	cmp	r3, r4
 8006b78:	6025      	str	r5, [r4, #0]
 8006b7a:	bf18      	it	ne
 8006b7c:	6059      	strne	r1, [r3, #4]
 8006b7e:	6863      	ldr	r3, [r4, #4]
 8006b80:	bf08      	it	eq
 8006b82:	6031      	streq	r1, [r6, #0]
 8006b84:	5162      	str	r2, [r4, r5]
 8006b86:	604b      	str	r3, [r1, #4]
 8006b88:	4638      	mov	r0, r7
 8006b8a:	f104 060b 	add.w	r6, r4, #11
 8006b8e:	f000 fb49 	bl	8007224 <__malloc_unlock>
 8006b92:	f026 0607 	bic.w	r6, r6, #7
 8006b96:	1d23      	adds	r3, r4, #4
 8006b98:	1af2      	subs	r2, r6, r3
 8006b9a:	d0b6      	beq.n	8006b0a <_malloc_r+0x22>
 8006b9c:	1b9b      	subs	r3, r3, r6
 8006b9e:	50a3      	str	r3, [r4, r2]
 8006ba0:	e7b3      	b.n	8006b0a <_malloc_r+0x22>
 8006ba2:	6862      	ldr	r2, [r4, #4]
 8006ba4:	42a3      	cmp	r3, r4
 8006ba6:	bf0c      	ite	eq
 8006ba8:	6032      	streq	r2, [r6, #0]
 8006baa:	605a      	strne	r2, [r3, #4]
 8006bac:	e7ec      	b.n	8006b88 <_malloc_r+0xa0>
 8006bae:	4623      	mov	r3, r4
 8006bb0:	6864      	ldr	r4, [r4, #4]
 8006bb2:	e7b2      	b.n	8006b1a <_malloc_r+0x32>
 8006bb4:	4634      	mov	r4, r6
 8006bb6:	6876      	ldr	r6, [r6, #4]
 8006bb8:	e7b9      	b.n	8006b2e <_malloc_r+0x46>
 8006bba:	230c      	movs	r3, #12
 8006bbc:	603b      	str	r3, [r7, #0]
 8006bbe:	4638      	mov	r0, r7
 8006bc0:	f000 fb30 	bl	8007224 <__malloc_unlock>
 8006bc4:	e7a1      	b.n	8006b0a <_malloc_r+0x22>
 8006bc6:	6025      	str	r5, [r4, #0]
 8006bc8:	e7de      	b.n	8006b88 <_malloc_r+0xa0>
 8006bca:	bf00      	nop
 8006bcc:	20003cd4 	.word	0x20003cd4

08006bd0 <iprintf>:
 8006bd0:	b40f      	push	{r0, r1, r2, r3}
 8006bd2:	4b0a      	ldr	r3, [pc, #40]	; (8006bfc <iprintf+0x2c>)
 8006bd4:	b513      	push	{r0, r1, r4, lr}
 8006bd6:	681c      	ldr	r4, [r3, #0]
 8006bd8:	b124      	cbz	r4, 8006be4 <iprintf+0x14>
 8006bda:	69a3      	ldr	r3, [r4, #24]
 8006bdc:	b913      	cbnz	r3, 8006be4 <iprintf+0x14>
 8006bde:	4620      	mov	r0, r4
 8006be0:	f000 fa18 	bl	8007014 <__sinit>
 8006be4:	ab05      	add	r3, sp, #20
 8006be6:	9a04      	ldr	r2, [sp, #16]
 8006be8:	68a1      	ldr	r1, [r4, #8]
 8006bea:	9301      	str	r3, [sp, #4]
 8006bec:	4620      	mov	r0, r4
 8006bee:	f000 fca5 	bl	800753c <_vfiprintf_r>
 8006bf2:	b002      	add	sp, #8
 8006bf4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bf8:	b004      	add	sp, #16
 8006bfa:	4770      	bx	lr
 8006bfc:	2000000c 	.word	0x2000000c

08006c00 <_sbrk_r>:
 8006c00:	b538      	push	{r3, r4, r5, lr}
 8006c02:	4d06      	ldr	r5, [pc, #24]	; (8006c1c <_sbrk_r+0x1c>)
 8006c04:	2300      	movs	r3, #0
 8006c06:	4604      	mov	r4, r0
 8006c08:	4608      	mov	r0, r1
 8006c0a:	602b      	str	r3, [r5, #0]
 8006c0c:	f7fa fa22 	bl	8001054 <_sbrk>
 8006c10:	1c43      	adds	r3, r0, #1
 8006c12:	d102      	bne.n	8006c1a <_sbrk_r+0x1a>
 8006c14:	682b      	ldr	r3, [r5, #0]
 8006c16:	b103      	cbz	r3, 8006c1a <_sbrk_r+0x1a>
 8006c18:	6023      	str	r3, [r4, #0]
 8006c1a:	bd38      	pop	{r3, r4, r5, pc}
 8006c1c:	20003cdc 	.word	0x20003cdc

08006c20 <_vsiprintf_r>:
 8006c20:	b500      	push	{lr}
 8006c22:	b09b      	sub	sp, #108	; 0x6c
 8006c24:	9100      	str	r1, [sp, #0]
 8006c26:	9104      	str	r1, [sp, #16]
 8006c28:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006c2c:	9105      	str	r1, [sp, #20]
 8006c2e:	9102      	str	r1, [sp, #8]
 8006c30:	4905      	ldr	r1, [pc, #20]	; (8006c48 <_vsiprintf_r+0x28>)
 8006c32:	9103      	str	r1, [sp, #12]
 8006c34:	4669      	mov	r1, sp
 8006c36:	f000 fb57 	bl	80072e8 <_svfiprintf_r>
 8006c3a:	9b00      	ldr	r3, [sp, #0]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	b01b      	add	sp, #108	; 0x6c
 8006c42:	f85d fb04 	ldr.w	pc, [sp], #4
 8006c46:	bf00      	nop
 8006c48:	ffff0208 	.word	0xffff0208

08006c4c <vsiprintf>:
 8006c4c:	4613      	mov	r3, r2
 8006c4e:	460a      	mov	r2, r1
 8006c50:	4601      	mov	r1, r0
 8006c52:	4802      	ldr	r0, [pc, #8]	; (8006c5c <vsiprintf+0x10>)
 8006c54:	6800      	ldr	r0, [r0, #0]
 8006c56:	f7ff bfe3 	b.w	8006c20 <_vsiprintf_r>
 8006c5a:	bf00      	nop
 8006c5c:	2000000c 	.word	0x2000000c

08006c60 <__swbuf_r>:
 8006c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c62:	460e      	mov	r6, r1
 8006c64:	4614      	mov	r4, r2
 8006c66:	4605      	mov	r5, r0
 8006c68:	b118      	cbz	r0, 8006c72 <__swbuf_r+0x12>
 8006c6a:	6983      	ldr	r3, [r0, #24]
 8006c6c:	b90b      	cbnz	r3, 8006c72 <__swbuf_r+0x12>
 8006c6e:	f000 f9d1 	bl	8007014 <__sinit>
 8006c72:	4b21      	ldr	r3, [pc, #132]	; (8006cf8 <__swbuf_r+0x98>)
 8006c74:	429c      	cmp	r4, r3
 8006c76:	d12b      	bne.n	8006cd0 <__swbuf_r+0x70>
 8006c78:	686c      	ldr	r4, [r5, #4]
 8006c7a:	69a3      	ldr	r3, [r4, #24]
 8006c7c:	60a3      	str	r3, [r4, #8]
 8006c7e:	89a3      	ldrh	r3, [r4, #12]
 8006c80:	071a      	lsls	r2, r3, #28
 8006c82:	d52f      	bpl.n	8006ce4 <__swbuf_r+0x84>
 8006c84:	6923      	ldr	r3, [r4, #16]
 8006c86:	b36b      	cbz	r3, 8006ce4 <__swbuf_r+0x84>
 8006c88:	6923      	ldr	r3, [r4, #16]
 8006c8a:	6820      	ldr	r0, [r4, #0]
 8006c8c:	1ac0      	subs	r0, r0, r3
 8006c8e:	6963      	ldr	r3, [r4, #20]
 8006c90:	b2f6      	uxtb	r6, r6
 8006c92:	4283      	cmp	r3, r0
 8006c94:	4637      	mov	r7, r6
 8006c96:	dc04      	bgt.n	8006ca2 <__swbuf_r+0x42>
 8006c98:	4621      	mov	r1, r4
 8006c9a:	4628      	mov	r0, r5
 8006c9c:	f000 f926 	bl	8006eec <_fflush_r>
 8006ca0:	bb30      	cbnz	r0, 8006cf0 <__swbuf_r+0x90>
 8006ca2:	68a3      	ldr	r3, [r4, #8]
 8006ca4:	3b01      	subs	r3, #1
 8006ca6:	60a3      	str	r3, [r4, #8]
 8006ca8:	6823      	ldr	r3, [r4, #0]
 8006caa:	1c5a      	adds	r2, r3, #1
 8006cac:	6022      	str	r2, [r4, #0]
 8006cae:	701e      	strb	r6, [r3, #0]
 8006cb0:	6963      	ldr	r3, [r4, #20]
 8006cb2:	3001      	adds	r0, #1
 8006cb4:	4283      	cmp	r3, r0
 8006cb6:	d004      	beq.n	8006cc2 <__swbuf_r+0x62>
 8006cb8:	89a3      	ldrh	r3, [r4, #12]
 8006cba:	07db      	lsls	r3, r3, #31
 8006cbc:	d506      	bpl.n	8006ccc <__swbuf_r+0x6c>
 8006cbe:	2e0a      	cmp	r6, #10
 8006cc0:	d104      	bne.n	8006ccc <__swbuf_r+0x6c>
 8006cc2:	4621      	mov	r1, r4
 8006cc4:	4628      	mov	r0, r5
 8006cc6:	f000 f911 	bl	8006eec <_fflush_r>
 8006cca:	b988      	cbnz	r0, 8006cf0 <__swbuf_r+0x90>
 8006ccc:	4638      	mov	r0, r7
 8006cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006cd0:	4b0a      	ldr	r3, [pc, #40]	; (8006cfc <__swbuf_r+0x9c>)
 8006cd2:	429c      	cmp	r4, r3
 8006cd4:	d101      	bne.n	8006cda <__swbuf_r+0x7a>
 8006cd6:	68ac      	ldr	r4, [r5, #8]
 8006cd8:	e7cf      	b.n	8006c7a <__swbuf_r+0x1a>
 8006cda:	4b09      	ldr	r3, [pc, #36]	; (8006d00 <__swbuf_r+0xa0>)
 8006cdc:	429c      	cmp	r4, r3
 8006cde:	bf08      	it	eq
 8006ce0:	68ec      	ldreq	r4, [r5, #12]
 8006ce2:	e7ca      	b.n	8006c7a <__swbuf_r+0x1a>
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	4628      	mov	r0, r5
 8006ce8:	f000 f80c 	bl	8006d04 <__swsetup_r>
 8006cec:	2800      	cmp	r0, #0
 8006cee:	d0cb      	beq.n	8006c88 <__swbuf_r+0x28>
 8006cf0:	f04f 37ff 	mov.w	r7, #4294967295
 8006cf4:	e7ea      	b.n	8006ccc <__swbuf_r+0x6c>
 8006cf6:	bf00      	nop
 8006cf8:	08008114 	.word	0x08008114
 8006cfc:	08008134 	.word	0x08008134
 8006d00:	080080f4 	.word	0x080080f4

08006d04 <__swsetup_r>:
 8006d04:	4b32      	ldr	r3, [pc, #200]	; (8006dd0 <__swsetup_r+0xcc>)
 8006d06:	b570      	push	{r4, r5, r6, lr}
 8006d08:	681d      	ldr	r5, [r3, #0]
 8006d0a:	4606      	mov	r6, r0
 8006d0c:	460c      	mov	r4, r1
 8006d0e:	b125      	cbz	r5, 8006d1a <__swsetup_r+0x16>
 8006d10:	69ab      	ldr	r3, [r5, #24]
 8006d12:	b913      	cbnz	r3, 8006d1a <__swsetup_r+0x16>
 8006d14:	4628      	mov	r0, r5
 8006d16:	f000 f97d 	bl	8007014 <__sinit>
 8006d1a:	4b2e      	ldr	r3, [pc, #184]	; (8006dd4 <__swsetup_r+0xd0>)
 8006d1c:	429c      	cmp	r4, r3
 8006d1e:	d10f      	bne.n	8006d40 <__swsetup_r+0x3c>
 8006d20:	686c      	ldr	r4, [r5, #4]
 8006d22:	89a3      	ldrh	r3, [r4, #12]
 8006d24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006d28:	0719      	lsls	r1, r3, #28
 8006d2a:	d42c      	bmi.n	8006d86 <__swsetup_r+0x82>
 8006d2c:	06dd      	lsls	r5, r3, #27
 8006d2e:	d411      	bmi.n	8006d54 <__swsetup_r+0x50>
 8006d30:	2309      	movs	r3, #9
 8006d32:	6033      	str	r3, [r6, #0]
 8006d34:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006d38:	81a3      	strh	r3, [r4, #12]
 8006d3a:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3e:	e03e      	b.n	8006dbe <__swsetup_r+0xba>
 8006d40:	4b25      	ldr	r3, [pc, #148]	; (8006dd8 <__swsetup_r+0xd4>)
 8006d42:	429c      	cmp	r4, r3
 8006d44:	d101      	bne.n	8006d4a <__swsetup_r+0x46>
 8006d46:	68ac      	ldr	r4, [r5, #8]
 8006d48:	e7eb      	b.n	8006d22 <__swsetup_r+0x1e>
 8006d4a:	4b24      	ldr	r3, [pc, #144]	; (8006ddc <__swsetup_r+0xd8>)
 8006d4c:	429c      	cmp	r4, r3
 8006d4e:	bf08      	it	eq
 8006d50:	68ec      	ldreq	r4, [r5, #12]
 8006d52:	e7e6      	b.n	8006d22 <__swsetup_r+0x1e>
 8006d54:	0758      	lsls	r0, r3, #29
 8006d56:	d512      	bpl.n	8006d7e <__swsetup_r+0x7a>
 8006d58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006d5a:	b141      	cbz	r1, 8006d6e <__swsetup_r+0x6a>
 8006d5c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006d60:	4299      	cmp	r1, r3
 8006d62:	d002      	beq.n	8006d6a <__swsetup_r+0x66>
 8006d64:	4630      	mov	r0, r6
 8006d66:	f7ff fe53 	bl	8006a10 <_free_r>
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	6363      	str	r3, [r4, #52]	; 0x34
 8006d6e:	89a3      	ldrh	r3, [r4, #12]
 8006d70:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006d74:	81a3      	strh	r3, [r4, #12]
 8006d76:	2300      	movs	r3, #0
 8006d78:	6063      	str	r3, [r4, #4]
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	6023      	str	r3, [r4, #0]
 8006d7e:	89a3      	ldrh	r3, [r4, #12]
 8006d80:	f043 0308 	orr.w	r3, r3, #8
 8006d84:	81a3      	strh	r3, [r4, #12]
 8006d86:	6923      	ldr	r3, [r4, #16]
 8006d88:	b94b      	cbnz	r3, 8006d9e <__swsetup_r+0x9a>
 8006d8a:	89a3      	ldrh	r3, [r4, #12]
 8006d8c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006d90:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d94:	d003      	beq.n	8006d9e <__swsetup_r+0x9a>
 8006d96:	4621      	mov	r1, r4
 8006d98:	4630      	mov	r0, r6
 8006d9a:	f000 f9fd 	bl	8007198 <__smakebuf_r>
 8006d9e:	89a0      	ldrh	r0, [r4, #12]
 8006da0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006da4:	f010 0301 	ands.w	r3, r0, #1
 8006da8:	d00a      	beq.n	8006dc0 <__swsetup_r+0xbc>
 8006daa:	2300      	movs	r3, #0
 8006dac:	60a3      	str	r3, [r4, #8]
 8006dae:	6963      	ldr	r3, [r4, #20]
 8006db0:	425b      	negs	r3, r3
 8006db2:	61a3      	str	r3, [r4, #24]
 8006db4:	6923      	ldr	r3, [r4, #16]
 8006db6:	b943      	cbnz	r3, 8006dca <__swsetup_r+0xc6>
 8006db8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006dbc:	d1ba      	bne.n	8006d34 <__swsetup_r+0x30>
 8006dbe:	bd70      	pop	{r4, r5, r6, pc}
 8006dc0:	0781      	lsls	r1, r0, #30
 8006dc2:	bf58      	it	pl
 8006dc4:	6963      	ldrpl	r3, [r4, #20]
 8006dc6:	60a3      	str	r3, [r4, #8]
 8006dc8:	e7f4      	b.n	8006db4 <__swsetup_r+0xb0>
 8006dca:	2000      	movs	r0, #0
 8006dcc:	e7f7      	b.n	8006dbe <__swsetup_r+0xba>
 8006dce:	bf00      	nop
 8006dd0:	2000000c 	.word	0x2000000c
 8006dd4:	08008114 	.word	0x08008114
 8006dd8:	08008134 	.word	0x08008134
 8006ddc:	080080f4 	.word	0x080080f4

08006de0 <__sflush_r>:
 8006de0:	898a      	ldrh	r2, [r1, #12]
 8006de2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006de6:	4605      	mov	r5, r0
 8006de8:	0710      	lsls	r0, r2, #28
 8006dea:	460c      	mov	r4, r1
 8006dec:	d458      	bmi.n	8006ea0 <__sflush_r+0xc0>
 8006dee:	684b      	ldr	r3, [r1, #4]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	dc05      	bgt.n	8006e00 <__sflush_r+0x20>
 8006df4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	dc02      	bgt.n	8006e00 <__sflush_r+0x20>
 8006dfa:	2000      	movs	r0, #0
 8006dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e02:	2e00      	cmp	r6, #0
 8006e04:	d0f9      	beq.n	8006dfa <__sflush_r+0x1a>
 8006e06:	2300      	movs	r3, #0
 8006e08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e0c:	682f      	ldr	r7, [r5, #0]
 8006e0e:	602b      	str	r3, [r5, #0]
 8006e10:	d032      	beq.n	8006e78 <__sflush_r+0x98>
 8006e12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e14:	89a3      	ldrh	r3, [r4, #12]
 8006e16:	075a      	lsls	r2, r3, #29
 8006e18:	d505      	bpl.n	8006e26 <__sflush_r+0x46>
 8006e1a:	6863      	ldr	r3, [r4, #4]
 8006e1c:	1ac0      	subs	r0, r0, r3
 8006e1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e20:	b10b      	cbz	r3, 8006e26 <__sflush_r+0x46>
 8006e22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e24:	1ac0      	subs	r0, r0, r3
 8006e26:	2300      	movs	r3, #0
 8006e28:	4602      	mov	r2, r0
 8006e2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e2c:	6a21      	ldr	r1, [r4, #32]
 8006e2e:	4628      	mov	r0, r5
 8006e30:	47b0      	blx	r6
 8006e32:	1c43      	adds	r3, r0, #1
 8006e34:	89a3      	ldrh	r3, [r4, #12]
 8006e36:	d106      	bne.n	8006e46 <__sflush_r+0x66>
 8006e38:	6829      	ldr	r1, [r5, #0]
 8006e3a:	291d      	cmp	r1, #29
 8006e3c:	d82c      	bhi.n	8006e98 <__sflush_r+0xb8>
 8006e3e:	4a2a      	ldr	r2, [pc, #168]	; (8006ee8 <__sflush_r+0x108>)
 8006e40:	40ca      	lsrs	r2, r1
 8006e42:	07d6      	lsls	r6, r2, #31
 8006e44:	d528      	bpl.n	8006e98 <__sflush_r+0xb8>
 8006e46:	2200      	movs	r2, #0
 8006e48:	6062      	str	r2, [r4, #4]
 8006e4a:	04d9      	lsls	r1, r3, #19
 8006e4c:	6922      	ldr	r2, [r4, #16]
 8006e4e:	6022      	str	r2, [r4, #0]
 8006e50:	d504      	bpl.n	8006e5c <__sflush_r+0x7c>
 8006e52:	1c42      	adds	r2, r0, #1
 8006e54:	d101      	bne.n	8006e5a <__sflush_r+0x7a>
 8006e56:	682b      	ldr	r3, [r5, #0]
 8006e58:	b903      	cbnz	r3, 8006e5c <__sflush_r+0x7c>
 8006e5a:	6560      	str	r0, [r4, #84]	; 0x54
 8006e5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e5e:	602f      	str	r7, [r5, #0]
 8006e60:	2900      	cmp	r1, #0
 8006e62:	d0ca      	beq.n	8006dfa <__sflush_r+0x1a>
 8006e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006e68:	4299      	cmp	r1, r3
 8006e6a:	d002      	beq.n	8006e72 <__sflush_r+0x92>
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	f7ff fdcf 	bl	8006a10 <_free_r>
 8006e72:	2000      	movs	r0, #0
 8006e74:	6360      	str	r0, [r4, #52]	; 0x34
 8006e76:	e7c1      	b.n	8006dfc <__sflush_r+0x1c>
 8006e78:	6a21      	ldr	r1, [r4, #32]
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	4628      	mov	r0, r5
 8006e7e:	47b0      	blx	r6
 8006e80:	1c41      	adds	r1, r0, #1
 8006e82:	d1c7      	bne.n	8006e14 <__sflush_r+0x34>
 8006e84:	682b      	ldr	r3, [r5, #0]
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d0c4      	beq.n	8006e14 <__sflush_r+0x34>
 8006e8a:	2b1d      	cmp	r3, #29
 8006e8c:	d001      	beq.n	8006e92 <__sflush_r+0xb2>
 8006e8e:	2b16      	cmp	r3, #22
 8006e90:	d101      	bne.n	8006e96 <__sflush_r+0xb6>
 8006e92:	602f      	str	r7, [r5, #0]
 8006e94:	e7b1      	b.n	8006dfa <__sflush_r+0x1a>
 8006e96:	89a3      	ldrh	r3, [r4, #12]
 8006e98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006e9c:	81a3      	strh	r3, [r4, #12]
 8006e9e:	e7ad      	b.n	8006dfc <__sflush_r+0x1c>
 8006ea0:	690f      	ldr	r7, [r1, #16]
 8006ea2:	2f00      	cmp	r7, #0
 8006ea4:	d0a9      	beq.n	8006dfa <__sflush_r+0x1a>
 8006ea6:	0793      	lsls	r3, r2, #30
 8006ea8:	680e      	ldr	r6, [r1, #0]
 8006eaa:	bf08      	it	eq
 8006eac:	694b      	ldreq	r3, [r1, #20]
 8006eae:	600f      	str	r7, [r1, #0]
 8006eb0:	bf18      	it	ne
 8006eb2:	2300      	movne	r3, #0
 8006eb4:	eba6 0807 	sub.w	r8, r6, r7
 8006eb8:	608b      	str	r3, [r1, #8]
 8006eba:	f1b8 0f00 	cmp.w	r8, #0
 8006ebe:	dd9c      	ble.n	8006dfa <__sflush_r+0x1a>
 8006ec0:	6a21      	ldr	r1, [r4, #32]
 8006ec2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006ec4:	4643      	mov	r3, r8
 8006ec6:	463a      	mov	r2, r7
 8006ec8:	4628      	mov	r0, r5
 8006eca:	47b0      	blx	r6
 8006ecc:	2800      	cmp	r0, #0
 8006ece:	dc06      	bgt.n	8006ede <__sflush_r+0xfe>
 8006ed0:	89a3      	ldrh	r3, [r4, #12]
 8006ed2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ed6:	81a3      	strh	r3, [r4, #12]
 8006ed8:	f04f 30ff 	mov.w	r0, #4294967295
 8006edc:	e78e      	b.n	8006dfc <__sflush_r+0x1c>
 8006ede:	4407      	add	r7, r0
 8006ee0:	eba8 0800 	sub.w	r8, r8, r0
 8006ee4:	e7e9      	b.n	8006eba <__sflush_r+0xda>
 8006ee6:	bf00      	nop
 8006ee8:	20400001 	.word	0x20400001

08006eec <_fflush_r>:
 8006eec:	b538      	push	{r3, r4, r5, lr}
 8006eee:	690b      	ldr	r3, [r1, #16]
 8006ef0:	4605      	mov	r5, r0
 8006ef2:	460c      	mov	r4, r1
 8006ef4:	b913      	cbnz	r3, 8006efc <_fflush_r+0x10>
 8006ef6:	2500      	movs	r5, #0
 8006ef8:	4628      	mov	r0, r5
 8006efa:	bd38      	pop	{r3, r4, r5, pc}
 8006efc:	b118      	cbz	r0, 8006f06 <_fflush_r+0x1a>
 8006efe:	6983      	ldr	r3, [r0, #24]
 8006f00:	b90b      	cbnz	r3, 8006f06 <_fflush_r+0x1a>
 8006f02:	f000 f887 	bl	8007014 <__sinit>
 8006f06:	4b14      	ldr	r3, [pc, #80]	; (8006f58 <_fflush_r+0x6c>)
 8006f08:	429c      	cmp	r4, r3
 8006f0a:	d11b      	bne.n	8006f44 <_fflush_r+0x58>
 8006f0c:	686c      	ldr	r4, [r5, #4]
 8006f0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d0ef      	beq.n	8006ef6 <_fflush_r+0xa>
 8006f16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f18:	07d0      	lsls	r0, r2, #31
 8006f1a:	d404      	bmi.n	8006f26 <_fflush_r+0x3a>
 8006f1c:	0599      	lsls	r1, r3, #22
 8006f1e:	d402      	bmi.n	8006f26 <_fflush_r+0x3a>
 8006f20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f22:	f7ff fd5c 	bl	80069de <__retarget_lock_acquire_recursive>
 8006f26:	4628      	mov	r0, r5
 8006f28:	4621      	mov	r1, r4
 8006f2a:	f7ff ff59 	bl	8006de0 <__sflush_r>
 8006f2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f30:	07da      	lsls	r2, r3, #31
 8006f32:	4605      	mov	r5, r0
 8006f34:	d4e0      	bmi.n	8006ef8 <_fflush_r+0xc>
 8006f36:	89a3      	ldrh	r3, [r4, #12]
 8006f38:	059b      	lsls	r3, r3, #22
 8006f3a:	d4dd      	bmi.n	8006ef8 <_fflush_r+0xc>
 8006f3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f3e:	f7ff fd4f 	bl	80069e0 <__retarget_lock_release_recursive>
 8006f42:	e7d9      	b.n	8006ef8 <_fflush_r+0xc>
 8006f44:	4b05      	ldr	r3, [pc, #20]	; (8006f5c <_fflush_r+0x70>)
 8006f46:	429c      	cmp	r4, r3
 8006f48:	d101      	bne.n	8006f4e <_fflush_r+0x62>
 8006f4a:	68ac      	ldr	r4, [r5, #8]
 8006f4c:	e7df      	b.n	8006f0e <_fflush_r+0x22>
 8006f4e:	4b04      	ldr	r3, [pc, #16]	; (8006f60 <_fflush_r+0x74>)
 8006f50:	429c      	cmp	r4, r3
 8006f52:	bf08      	it	eq
 8006f54:	68ec      	ldreq	r4, [r5, #12]
 8006f56:	e7da      	b.n	8006f0e <_fflush_r+0x22>
 8006f58:	08008114 	.word	0x08008114
 8006f5c:	08008134 	.word	0x08008134
 8006f60:	080080f4 	.word	0x080080f4

08006f64 <std>:
 8006f64:	2300      	movs	r3, #0
 8006f66:	b510      	push	{r4, lr}
 8006f68:	4604      	mov	r4, r0
 8006f6a:	e9c0 3300 	strd	r3, r3, [r0]
 8006f6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f72:	6083      	str	r3, [r0, #8]
 8006f74:	8181      	strh	r1, [r0, #12]
 8006f76:	6643      	str	r3, [r0, #100]	; 0x64
 8006f78:	81c2      	strh	r2, [r0, #14]
 8006f7a:	6183      	str	r3, [r0, #24]
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	2208      	movs	r2, #8
 8006f80:	305c      	adds	r0, #92	; 0x5c
 8006f82:	f7ff fd3c 	bl	80069fe <memset>
 8006f86:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <std+0x38>)
 8006f88:	6263      	str	r3, [r4, #36]	; 0x24
 8006f8a:	4b05      	ldr	r3, [pc, #20]	; (8006fa0 <std+0x3c>)
 8006f8c:	62a3      	str	r3, [r4, #40]	; 0x28
 8006f8e:	4b05      	ldr	r3, [pc, #20]	; (8006fa4 <std+0x40>)
 8006f90:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006f92:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <std+0x44>)
 8006f94:	6224      	str	r4, [r4, #32]
 8006f96:	6323      	str	r3, [r4, #48]	; 0x30
 8006f98:	bd10      	pop	{r4, pc}
 8006f9a:	bf00      	nop
 8006f9c:	08007ac5 	.word	0x08007ac5
 8006fa0:	08007ae7 	.word	0x08007ae7
 8006fa4:	08007b1f 	.word	0x08007b1f
 8006fa8:	08007b43 	.word	0x08007b43

08006fac <_cleanup_r>:
 8006fac:	4901      	ldr	r1, [pc, #4]	; (8006fb4 <_cleanup_r+0x8>)
 8006fae:	f000 b8af 	b.w	8007110 <_fwalk_reent>
 8006fb2:	bf00      	nop
 8006fb4:	08006eed 	.word	0x08006eed

08006fb8 <__sfmoreglue>:
 8006fb8:	b570      	push	{r4, r5, r6, lr}
 8006fba:	2268      	movs	r2, #104	; 0x68
 8006fbc:	1e4d      	subs	r5, r1, #1
 8006fbe:	4355      	muls	r5, r2
 8006fc0:	460e      	mov	r6, r1
 8006fc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fc6:	f7ff fd8f 	bl	8006ae8 <_malloc_r>
 8006fca:	4604      	mov	r4, r0
 8006fcc:	b140      	cbz	r0, 8006fe0 <__sfmoreglue+0x28>
 8006fce:	2100      	movs	r1, #0
 8006fd0:	e9c0 1600 	strd	r1, r6, [r0]
 8006fd4:	300c      	adds	r0, #12
 8006fd6:	60a0      	str	r0, [r4, #8]
 8006fd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006fdc:	f7ff fd0f 	bl	80069fe <memset>
 8006fe0:	4620      	mov	r0, r4
 8006fe2:	bd70      	pop	{r4, r5, r6, pc}

08006fe4 <__sfp_lock_acquire>:
 8006fe4:	4801      	ldr	r0, [pc, #4]	; (8006fec <__sfp_lock_acquire+0x8>)
 8006fe6:	f7ff bcfa 	b.w	80069de <__retarget_lock_acquire_recursive>
 8006fea:	bf00      	nop
 8006fec:	20003cd1 	.word	0x20003cd1

08006ff0 <__sfp_lock_release>:
 8006ff0:	4801      	ldr	r0, [pc, #4]	; (8006ff8 <__sfp_lock_release+0x8>)
 8006ff2:	f7ff bcf5 	b.w	80069e0 <__retarget_lock_release_recursive>
 8006ff6:	bf00      	nop
 8006ff8:	20003cd1 	.word	0x20003cd1

08006ffc <__sinit_lock_acquire>:
 8006ffc:	4801      	ldr	r0, [pc, #4]	; (8007004 <__sinit_lock_acquire+0x8>)
 8006ffe:	f7ff bcee 	b.w	80069de <__retarget_lock_acquire_recursive>
 8007002:	bf00      	nop
 8007004:	20003cd2 	.word	0x20003cd2

08007008 <__sinit_lock_release>:
 8007008:	4801      	ldr	r0, [pc, #4]	; (8007010 <__sinit_lock_release+0x8>)
 800700a:	f7ff bce9 	b.w	80069e0 <__retarget_lock_release_recursive>
 800700e:	bf00      	nop
 8007010:	20003cd2 	.word	0x20003cd2

08007014 <__sinit>:
 8007014:	b510      	push	{r4, lr}
 8007016:	4604      	mov	r4, r0
 8007018:	f7ff fff0 	bl	8006ffc <__sinit_lock_acquire>
 800701c:	69a3      	ldr	r3, [r4, #24]
 800701e:	b11b      	cbz	r3, 8007028 <__sinit+0x14>
 8007020:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007024:	f7ff bff0 	b.w	8007008 <__sinit_lock_release>
 8007028:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800702c:	6523      	str	r3, [r4, #80]	; 0x50
 800702e:	4b13      	ldr	r3, [pc, #76]	; (800707c <__sinit+0x68>)
 8007030:	4a13      	ldr	r2, [pc, #76]	; (8007080 <__sinit+0x6c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	62a2      	str	r2, [r4, #40]	; 0x28
 8007036:	42a3      	cmp	r3, r4
 8007038:	bf04      	itt	eq
 800703a:	2301      	moveq	r3, #1
 800703c:	61a3      	streq	r3, [r4, #24]
 800703e:	4620      	mov	r0, r4
 8007040:	f000 f820 	bl	8007084 <__sfp>
 8007044:	6060      	str	r0, [r4, #4]
 8007046:	4620      	mov	r0, r4
 8007048:	f000 f81c 	bl	8007084 <__sfp>
 800704c:	60a0      	str	r0, [r4, #8]
 800704e:	4620      	mov	r0, r4
 8007050:	f000 f818 	bl	8007084 <__sfp>
 8007054:	2200      	movs	r2, #0
 8007056:	60e0      	str	r0, [r4, #12]
 8007058:	2104      	movs	r1, #4
 800705a:	6860      	ldr	r0, [r4, #4]
 800705c:	f7ff ff82 	bl	8006f64 <std>
 8007060:	68a0      	ldr	r0, [r4, #8]
 8007062:	2201      	movs	r2, #1
 8007064:	2109      	movs	r1, #9
 8007066:	f7ff ff7d 	bl	8006f64 <std>
 800706a:	68e0      	ldr	r0, [r4, #12]
 800706c:	2202      	movs	r2, #2
 800706e:	2112      	movs	r1, #18
 8007070:	f7ff ff78 	bl	8006f64 <std>
 8007074:	2301      	movs	r3, #1
 8007076:	61a3      	str	r3, [r4, #24]
 8007078:	e7d2      	b.n	8007020 <__sinit+0xc>
 800707a:	bf00      	nop
 800707c:	080080f0 	.word	0x080080f0
 8007080:	08006fad 	.word	0x08006fad

08007084 <__sfp>:
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	4607      	mov	r7, r0
 8007088:	f7ff ffac 	bl	8006fe4 <__sfp_lock_acquire>
 800708c:	4b1e      	ldr	r3, [pc, #120]	; (8007108 <__sfp+0x84>)
 800708e:	681e      	ldr	r6, [r3, #0]
 8007090:	69b3      	ldr	r3, [r6, #24]
 8007092:	b913      	cbnz	r3, 800709a <__sfp+0x16>
 8007094:	4630      	mov	r0, r6
 8007096:	f7ff ffbd 	bl	8007014 <__sinit>
 800709a:	3648      	adds	r6, #72	; 0x48
 800709c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070a0:	3b01      	subs	r3, #1
 80070a2:	d503      	bpl.n	80070ac <__sfp+0x28>
 80070a4:	6833      	ldr	r3, [r6, #0]
 80070a6:	b30b      	cbz	r3, 80070ec <__sfp+0x68>
 80070a8:	6836      	ldr	r6, [r6, #0]
 80070aa:	e7f7      	b.n	800709c <__sfp+0x18>
 80070ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070b0:	b9d5      	cbnz	r5, 80070e8 <__sfp+0x64>
 80070b2:	4b16      	ldr	r3, [pc, #88]	; (800710c <__sfp+0x88>)
 80070b4:	60e3      	str	r3, [r4, #12]
 80070b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070ba:	6665      	str	r5, [r4, #100]	; 0x64
 80070bc:	f7ff fc8e 	bl	80069dc <__retarget_lock_init_recursive>
 80070c0:	f7ff ff96 	bl	8006ff0 <__sfp_lock_release>
 80070c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070cc:	6025      	str	r5, [r4, #0]
 80070ce:	61a5      	str	r5, [r4, #24]
 80070d0:	2208      	movs	r2, #8
 80070d2:	4629      	mov	r1, r5
 80070d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070d8:	f7ff fc91 	bl	80069fe <memset>
 80070dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80070e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80070e4:	4620      	mov	r0, r4
 80070e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80070e8:	3468      	adds	r4, #104	; 0x68
 80070ea:	e7d9      	b.n	80070a0 <__sfp+0x1c>
 80070ec:	2104      	movs	r1, #4
 80070ee:	4638      	mov	r0, r7
 80070f0:	f7ff ff62 	bl	8006fb8 <__sfmoreglue>
 80070f4:	4604      	mov	r4, r0
 80070f6:	6030      	str	r0, [r6, #0]
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d1d5      	bne.n	80070a8 <__sfp+0x24>
 80070fc:	f7ff ff78 	bl	8006ff0 <__sfp_lock_release>
 8007100:	230c      	movs	r3, #12
 8007102:	603b      	str	r3, [r7, #0]
 8007104:	e7ee      	b.n	80070e4 <__sfp+0x60>
 8007106:	bf00      	nop
 8007108:	080080f0 	.word	0x080080f0
 800710c:	ffff0001 	.word	0xffff0001

08007110 <_fwalk_reent>:
 8007110:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007114:	4606      	mov	r6, r0
 8007116:	4688      	mov	r8, r1
 8007118:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800711c:	2700      	movs	r7, #0
 800711e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007122:	f1b9 0901 	subs.w	r9, r9, #1
 8007126:	d505      	bpl.n	8007134 <_fwalk_reent+0x24>
 8007128:	6824      	ldr	r4, [r4, #0]
 800712a:	2c00      	cmp	r4, #0
 800712c:	d1f7      	bne.n	800711e <_fwalk_reent+0xe>
 800712e:	4638      	mov	r0, r7
 8007130:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007134:	89ab      	ldrh	r3, [r5, #12]
 8007136:	2b01      	cmp	r3, #1
 8007138:	d907      	bls.n	800714a <_fwalk_reent+0x3a>
 800713a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800713e:	3301      	adds	r3, #1
 8007140:	d003      	beq.n	800714a <_fwalk_reent+0x3a>
 8007142:	4629      	mov	r1, r5
 8007144:	4630      	mov	r0, r6
 8007146:	47c0      	blx	r8
 8007148:	4307      	orrs	r7, r0
 800714a:	3568      	adds	r5, #104	; 0x68
 800714c:	e7e9      	b.n	8007122 <_fwalk_reent+0x12>

0800714e <__swhatbuf_r>:
 800714e:	b570      	push	{r4, r5, r6, lr}
 8007150:	460e      	mov	r6, r1
 8007152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007156:	2900      	cmp	r1, #0
 8007158:	b096      	sub	sp, #88	; 0x58
 800715a:	4614      	mov	r4, r2
 800715c:	461d      	mov	r5, r3
 800715e:	da08      	bge.n	8007172 <__swhatbuf_r+0x24>
 8007160:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007164:	2200      	movs	r2, #0
 8007166:	602a      	str	r2, [r5, #0]
 8007168:	061a      	lsls	r2, r3, #24
 800716a:	d410      	bmi.n	800718e <__swhatbuf_r+0x40>
 800716c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007170:	e00e      	b.n	8007190 <__swhatbuf_r+0x42>
 8007172:	466a      	mov	r2, sp
 8007174:	f000 fd0c 	bl	8007b90 <_fstat_r>
 8007178:	2800      	cmp	r0, #0
 800717a:	dbf1      	blt.n	8007160 <__swhatbuf_r+0x12>
 800717c:	9a01      	ldr	r2, [sp, #4]
 800717e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007182:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007186:	425a      	negs	r2, r3
 8007188:	415a      	adcs	r2, r3
 800718a:	602a      	str	r2, [r5, #0]
 800718c:	e7ee      	b.n	800716c <__swhatbuf_r+0x1e>
 800718e:	2340      	movs	r3, #64	; 0x40
 8007190:	2000      	movs	r0, #0
 8007192:	6023      	str	r3, [r4, #0]
 8007194:	b016      	add	sp, #88	; 0x58
 8007196:	bd70      	pop	{r4, r5, r6, pc}

08007198 <__smakebuf_r>:
 8007198:	898b      	ldrh	r3, [r1, #12]
 800719a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800719c:	079d      	lsls	r5, r3, #30
 800719e:	4606      	mov	r6, r0
 80071a0:	460c      	mov	r4, r1
 80071a2:	d507      	bpl.n	80071b4 <__smakebuf_r+0x1c>
 80071a4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80071a8:	6023      	str	r3, [r4, #0]
 80071aa:	6123      	str	r3, [r4, #16]
 80071ac:	2301      	movs	r3, #1
 80071ae:	6163      	str	r3, [r4, #20]
 80071b0:	b002      	add	sp, #8
 80071b2:	bd70      	pop	{r4, r5, r6, pc}
 80071b4:	ab01      	add	r3, sp, #4
 80071b6:	466a      	mov	r2, sp
 80071b8:	f7ff ffc9 	bl	800714e <__swhatbuf_r>
 80071bc:	9900      	ldr	r1, [sp, #0]
 80071be:	4605      	mov	r5, r0
 80071c0:	4630      	mov	r0, r6
 80071c2:	f7ff fc91 	bl	8006ae8 <_malloc_r>
 80071c6:	b948      	cbnz	r0, 80071dc <__smakebuf_r+0x44>
 80071c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071cc:	059a      	lsls	r2, r3, #22
 80071ce:	d4ef      	bmi.n	80071b0 <__smakebuf_r+0x18>
 80071d0:	f023 0303 	bic.w	r3, r3, #3
 80071d4:	f043 0302 	orr.w	r3, r3, #2
 80071d8:	81a3      	strh	r3, [r4, #12]
 80071da:	e7e3      	b.n	80071a4 <__smakebuf_r+0xc>
 80071dc:	4b0d      	ldr	r3, [pc, #52]	; (8007214 <__smakebuf_r+0x7c>)
 80071de:	62b3      	str	r3, [r6, #40]	; 0x28
 80071e0:	89a3      	ldrh	r3, [r4, #12]
 80071e2:	6020      	str	r0, [r4, #0]
 80071e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071e8:	81a3      	strh	r3, [r4, #12]
 80071ea:	9b00      	ldr	r3, [sp, #0]
 80071ec:	6163      	str	r3, [r4, #20]
 80071ee:	9b01      	ldr	r3, [sp, #4]
 80071f0:	6120      	str	r0, [r4, #16]
 80071f2:	b15b      	cbz	r3, 800720c <__smakebuf_r+0x74>
 80071f4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071f8:	4630      	mov	r0, r6
 80071fa:	f000 fcdb 	bl	8007bb4 <_isatty_r>
 80071fe:	b128      	cbz	r0, 800720c <__smakebuf_r+0x74>
 8007200:	89a3      	ldrh	r3, [r4, #12]
 8007202:	f023 0303 	bic.w	r3, r3, #3
 8007206:	f043 0301 	orr.w	r3, r3, #1
 800720a:	81a3      	strh	r3, [r4, #12]
 800720c:	89a0      	ldrh	r0, [r4, #12]
 800720e:	4305      	orrs	r5, r0
 8007210:	81a5      	strh	r5, [r4, #12]
 8007212:	e7cd      	b.n	80071b0 <__smakebuf_r+0x18>
 8007214:	08006fad 	.word	0x08006fad

08007218 <__malloc_lock>:
 8007218:	4801      	ldr	r0, [pc, #4]	; (8007220 <__malloc_lock+0x8>)
 800721a:	f7ff bbe0 	b.w	80069de <__retarget_lock_acquire_recursive>
 800721e:	bf00      	nop
 8007220:	20003cd0 	.word	0x20003cd0

08007224 <__malloc_unlock>:
 8007224:	4801      	ldr	r0, [pc, #4]	; (800722c <__malloc_unlock+0x8>)
 8007226:	f7ff bbdb 	b.w	80069e0 <__retarget_lock_release_recursive>
 800722a:	bf00      	nop
 800722c:	20003cd0 	.word	0x20003cd0

08007230 <__ssputs_r>:
 8007230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007234:	688e      	ldr	r6, [r1, #8]
 8007236:	429e      	cmp	r6, r3
 8007238:	4682      	mov	sl, r0
 800723a:	460c      	mov	r4, r1
 800723c:	4690      	mov	r8, r2
 800723e:	461f      	mov	r7, r3
 8007240:	d838      	bhi.n	80072b4 <__ssputs_r+0x84>
 8007242:	898a      	ldrh	r2, [r1, #12]
 8007244:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007248:	d032      	beq.n	80072b0 <__ssputs_r+0x80>
 800724a:	6825      	ldr	r5, [r4, #0]
 800724c:	6909      	ldr	r1, [r1, #16]
 800724e:	eba5 0901 	sub.w	r9, r5, r1
 8007252:	6965      	ldr	r5, [r4, #20]
 8007254:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007258:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800725c:	3301      	adds	r3, #1
 800725e:	444b      	add	r3, r9
 8007260:	106d      	asrs	r5, r5, #1
 8007262:	429d      	cmp	r5, r3
 8007264:	bf38      	it	cc
 8007266:	461d      	movcc	r5, r3
 8007268:	0553      	lsls	r3, r2, #21
 800726a:	d531      	bpl.n	80072d0 <__ssputs_r+0xa0>
 800726c:	4629      	mov	r1, r5
 800726e:	f7ff fc3b 	bl	8006ae8 <_malloc_r>
 8007272:	4606      	mov	r6, r0
 8007274:	b950      	cbnz	r0, 800728c <__ssputs_r+0x5c>
 8007276:	230c      	movs	r3, #12
 8007278:	f8ca 3000 	str.w	r3, [sl]
 800727c:	89a3      	ldrh	r3, [r4, #12]
 800727e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007282:	81a3      	strh	r3, [r4, #12]
 8007284:	f04f 30ff 	mov.w	r0, #4294967295
 8007288:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800728c:	6921      	ldr	r1, [r4, #16]
 800728e:	464a      	mov	r2, r9
 8007290:	f7ff fba7 	bl	80069e2 <memcpy>
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800729a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800729e:	81a3      	strh	r3, [r4, #12]
 80072a0:	6126      	str	r6, [r4, #16]
 80072a2:	6165      	str	r5, [r4, #20]
 80072a4:	444e      	add	r6, r9
 80072a6:	eba5 0509 	sub.w	r5, r5, r9
 80072aa:	6026      	str	r6, [r4, #0]
 80072ac:	60a5      	str	r5, [r4, #8]
 80072ae:	463e      	mov	r6, r7
 80072b0:	42be      	cmp	r6, r7
 80072b2:	d900      	bls.n	80072b6 <__ssputs_r+0x86>
 80072b4:	463e      	mov	r6, r7
 80072b6:	6820      	ldr	r0, [r4, #0]
 80072b8:	4632      	mov	r2, r6
 80072ba:	4641      	mov	r1, r8
 80072bc:	f000 fc9c 	bl	8007bf8 <memmove>
 80072c0:	68a3      	ldr	r3, [r4, #8]
 80072c2:	1b9b      	subs	r3, r3, r6
 80072c4:	60a3      	str	r3, [r4, #8]
 80072c6:	6823      	ldr	r3, [r4, #0]
 80072c8:	4433      	add	r3, r6
 80072ca:	6023      	str	r3, [r4, #0]
 80072cc:	2000      	movs	r0, #0
 80072ce:	e7db      	b.n	8007288 <__ssputs_r+0x58>
 80072d0:	462a      	mov	r2, r5
 80072d2:	f000 fcab 	bl	8007c2c <_realloc_r>
 80072d6:	4606      	mov	r6, r0
 80072d8:	2800      	cmp	r0, #0
 80072da:	d1e1      	bne.n	80072a0 <__ssputs_r+0x70>
 80072dc:	6921      	ldr	r1, [r4, #16]
 80072de:	4650      	mov	r0, sl
 80072e0:	f7ff fb96 	bl	8006a10 <_free_r>
 80072e4:	e7c7      	b.n	8007276 <__ssputs_r+0x46>
	...

080072e8 <_svfiprintf_r>:
 80072e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072ec:	4698      	mov	r8, r3
 80072ee:	898b      	ldrh	r3, [r1, #12]
 80072f0:	061b      	lsls	r3, r3, #24
 80072f2:	b09d      	sub	sp, #116	; 0x74
 80072f4:	4607      	mov	r7, r0
 80072f6:	460d      	mov	r5, r1
 80072f8:	4614      	mov	r4, r2
 80072fa:	d50e      	bpl.n	800731a <_svfiprintf_r+0x32>
 80072fc:	690b      	ldr	r3, [r1, #16]
 80072fe:	b963      	cbnz	r3, 800731a <_svfiprintf_r+0x32>
 8007300:	2140      	movs	r1, #64	; 0x40
 8007302:	f7ff fbf1 	bl	8006ae8 <_malloc_r>
 8007306:	6028      	str	r0, [r5, #0]
 8007308:	6128      	str	r0, [r5, #16]
 800730a:	b920      	cbnz	r0, 8007316 <_svfiprintf_r+0x2e>
 800730c:	230c      	movs	r3, #12
 800730e:	603b      	str	r3, [r7, #0]
 8007310:	f04f 30ff 	mov.w	r0, #4294967295
 8007314:	e0d1      	b.n	80074ba <_svfiprintf_r+0x1d2>
 8007316:	2340      	movs	r3, #64	; 0x40
 8007318:	616b      	str	r3, [r5, #20]
 800731a:	2300      	movs	r3, #0
 800731c:	9309      	str	r3, [sp, #36]	; 0x24
 800731e:	2320      	movs	r3, #32
 8007320:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007324:	f8cd 800c 	str.w	r8, [sp, #12]
 8007328:	2330      	movs	r3, #48	; 0x30
 800732a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80074d4 <_svfiprintf_r+0x1ec>
 800732e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007332:	f04f 0901 	mov.w	r9, #1
 8007336:	4623      	mov	r3, r4
 8007338:	469a      	mov	sl, r3
 800733a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800733e:	b10a      	cbz	r2, 8007344 <_svfiprintf_r+0x5c>
 8007340:	2a25      	cmp	r2, #37	; 0x25
 8007342:	d1f9      	bne.n	8007338 <_svfiprintf_r+0x50>
 8007344:	ebba 0b04 	subs.w	fp, sl, r4
 8007348:	d00b      	beq.n	8007362 <_svfiprintf_r+0x7a>
 800734a:	465b      	mov	r3, fp
 800734c:	4622      	mov	r2, r4
 800734e:	4629      	mov	r1, r5
 8007350:	4638      	mov	r0, r7
 8007352:	f7ff ff6d 	bl	8007230 <__ssputs_r>
 8007356:	3001      	adds	r0, #1
 8007358:	f000 80aa 	beq.w	80074b0 <_svfiprintf_r+0x1c8>
 800735c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800735e:	445a      	add	r2, fp
 8007360:	9209      	str	r2, [sp, #36]	; 0x24
 8007362:	f89a 3000 	ldrb.w	r3, [sl]
 8007366:	2b00      	cmp	r3, #0
 8007368:	f000 80a2 	beq.w	80074b0 <_svfiprintf_r+0x1c8>
 800736c:	2300      	movs	r3, #0
 800736e:	f04f 32ff 	mov.w	r2, #4294967295
 8007372:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007376:	f10a 0a01 	add.w	sl, sl, #1
 800737a:	9304      	str	r3, [sp, #16]
 800737c:	9307      	str	r3, [sp, #28]
 800737e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007382:	931a      	str	r3, [sp, #104]	; 0x68
 8007384:	4654      	mov	r4, sl
 8007386:	2205      	movs	r2, #5
 8007388:	f814 1b01 	ldrb.w	r1, [r4], #1
 800738c:	4851      	ldr	r0, [pc, #324]	; (80074d4 <_svfiprintf_r+0x1ec>)
 800738e:	f7f8 ff27 	bl	80001e0 <memchr>
 8007392:	9a04      	ldr	r2, [sp, #16]
 8007394:	b9d8      	cbnz	r0, 80073ce <_svfiprintf_r+0xe6>
 8007396:	06d0      	lsls	r0, r2, #27
 8007398:	bf44      	itt	mi
 800739a:	2320      	movmi	r3, #32
 800739c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073a0:	0711      	lsls	r1, r2, #28
 80073a2:	bf44      	itt	mi
 80073a4:	232b      	movmi	r3, #43	; 0x2b
 80073a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073aa:	f89a 3000 	ldrb.w	r3, [sl]
 80073ae:	2b2a      	cmp	r3, #42	; 0x2a
 80073b0:	d015      	beq.n	80073de <_svfiprintf_r+0xf6>
 80073b2:	9a07      	ldr	r2, [sp, #28]
 80073b4:	4654      	mov	r4, sl
 80073b6:	2000      	movs	r0, #0
 80073b8:	f04f 0c0a 	mov.w	ip, #10
 80073bc:	4621      	mov	r1, r4
 80073be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80073c2:	3b30      	subs	r3, #48	; 0x30
 80073c4:	2b09      	cmp	r3, #9
 80073c6:	d94e      	bls.n	8007466 <_svfiprintf_r+0x17e>
 80073c8:	b1b0      	cbz	r0, 80073f8 <_svfiprintf_r+0x110>
 80073ca:	9207      	str	r2, [sp, #28]
 80073cc:	e014      	b.n	80073f8 <_svfiprintf_r+0x110>
 80073ce:	eba0 0308 	sub.w	r3, r0, r8
 80073d2:	fa09 f303 	lsl.w	r3, r9, r3
 80073d6:	4313      	orrs	r3, r2
 80073d8:	9304      	str	r3, [sp, #16]
 80073da:	46a2      	mov	sl, r4
 80073dc:	e7d2      	b.n	8007384 <_svfiprintf_r+0x9c>
 80073de:	9b03      	ldr	r3, [sp, #12]
 80073e0:	1d19      	adds	r1, r3, #4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	9103      	str	r1, [sp, #12]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	bfbb      	ittet	lt
 80073ea:	425b      	neglt	r3, r3
 80073ec:	f042 0202 	orrlt.w	r2, r2, #2
 80073f0:	9307      	strge	r3, [sp, #28]
 80073f2:	9307      	strlt	r3, [sp, #28]
 80073f4:	bfb8      	it	lt
 80073f6:	9204      	strlt	r2, [sp, #16]
 80073f8:	7823      	ldrb	r3, [r4, #0]
 80073fa:	2b2e      	cmp	r3, #46	; 0x2e
 80073fc:	d10c      	bne.n	8007418 <_svfiprintf_r+0x130>
 80073fe:	7863      	ldrb	r3, [r4, #1]
 8007400:	2b2a      	cmp	r3, #42	; 0x2a
 8007402:	d135      	bne.n	8007470 <_svfiprintf_r+0x188>
 8007404:	9b03      	ldr	r3, [sp, #12]
 8007406:	1d1a      	adds	r2, r3, #4
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	9203      	str	r2, [sp, #12]
 800740c:	2b00      	cmp	r3, #0
 800740e:	bfb8      	it	lt
 8007410:	f04f 33ff 	movlt.w	r3, #4294967295
 8007414:	3402      	adds	r4, #2
 8007416:	9305      	str	r3, [sp, #20]
 8007418:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80074e4 <_svfiprintf_r+0x1fc>
 800741c:	7821      	ldrb	r1, [r4, #0]
 800741e:	2203      	movs	r2, #3
 8007420:	4650      	mov	r0, sl
 8007422:	f7f8 fedd 	bl	80001e0 <memchr>
 8007426:	b140      	cbz	r0, 800743a <_svfiprintf_r+0x152>
 8007428:	2340      	movs	r3, #64	; 0x40
 800742a:	eba0 000a 	sub.w	r0, r0, sl
 800742e:	fa03 f000 	lsl.w	r0, r3, r0
 8007432:	9b04      	ldr	r3, [sp, #16]
 8007434:	4303      	orrs	r3, r0
 8007436:	3401      	adds	r4, #1
 8007438:	9304      	str	r3, [sp, #16]
 800743a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800743e:	4826      	ldr	r0, [pc, #152]	; (80074d8 <_svfiprintf_r+0x1f0>)
 8007440:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007444:	2206      	movs	r2, #6
 8007446:	f7f8 fecb 	bl	80001e0 <memchr>
 800744a:	2800      	cmp	r0, #0
 800744c:	d038      	beq.n	80074c0 <_svfiprintf_r+0x1d8>
 800744e:	4b23      	ldr	r3, [pc, #140]	; (80074dc <_svfiprintf_r+0x1f4>)
 8007450:	bb1b      	cbnz	r3, 800749a <_svfiprintf_r+0x1b2>
 8007452:	9b03      	ldr	r3, [sp, #12]
 8007454:	3307      	adds	r3, #7
 8007456:	f023 0307 	bic.w	r3, r3, #7
 800745a:	3308      	adds	r3, #8
 800745c:	9303      	str	r3, [sp, #12]
 800745e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007460:	4433      	add	r3, r6
 8007462:	9309      	str	r3, [sp, #36]	; 0x24
 8007464:	e767      	b.n	8007336 <_svfiprintf_r+0x4e>
 8007466:	fb0c 3202 	mla	r2, ip, r2, r3
 800746a:	460c      	mov	r4, r1
 800746c:	2001      	movs	r0, #1
 800746e:	e7a5      	b.n	80073bc <_svfiprintf_r+0xd4>
 8007470:	2300      	movs	r3, #0
 8007472:	3401      	adds	r4, #1
 8007474:	9305      	str	r3, [sp, #20]
 8007476:	4619      	mov	r1, r3
 8007478:	f04f 0c0a 	mov.w	ip, #10
 800747c:	4620      	mov	r0, r4
 800747e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007482:	3a30      	subs	r2, #48	; 0x30
 8007484:	2a09      	cmp	r2, #9
 8007486:	d903      	bls.n	8007490 <_svfiprintf_r+0x1a8>
 8007488:	2b00      	cmp	r3, #0
 800748a:	d0c5      	beq.n	8007418 <_svfiprintf_r+0x130>
 800748c:	9105      	str	r1, [sp, #20]
 800748e:	e7c3      	b.n	8007418 <_svfiprintf_r+0x130>
 8007490:	fb0c 2101 	mla	r1, ip, r1, r2
 8007494:	4604      	mov	r4, r0
 8007496:	2301      	movs	r3, #1
 8007498:	e7f0      	b.n	800747c <_svfiprintf_r+0x194>
 800749a:	ab03      	add	r3, sp, #12
 800749c:	9300      	str	r3, [sp, #0]
 800749e:	462a      	mov	r2, r5
 80074a0:	4b0f      	ldr	r3, [pc, #60]	; (80074e0 <_svfiprintf_r+0x1f8>)
 80074a2:	a904      	add	r1, sp, #16
 80074a4:	4638      	mov	r0, r7
 80074a6:	f3af 8000 	nop.w
 80074aa:	1c42      	adds	r2, r0, #1
 80074ac:	4606      	mov	r6, r0
 80074ae:	d1d6      	bne.n	800745e <_svfiprintf_r+0x176>
 80074b0:	89ab      	ldrh	r3, [r5, #12]
 80074b2:	065b      	lsls	r3, r3, #25
 80074b4:	f53f af2c 	bmi.w	8007310 <_svfiprintf_r+0x28>
 80074b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074ba:	b01d      	add	sp, #116	; 0x74
 80074bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074c0:	ab03      	add	r3, sp, #12
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	462a      	mov	r2, r5
 80074c6:	4b06      	ldr	r3, [pc, #24]	; (80074e0 <_svfiprintf_r+0x1f8>)
 80074c8:	a904      	add	r1, sp, #16
 80074ca:	4638      	mov	r0, r7
 80074cc:	f000 f9d4 	bl	8007878 <_printf_i>
 80074d0:	e7eb      	b.n	80074aa <_svfiprintf_r+0x1c2>
 80074d2:	bf00      	nop
 80074d4:	08008154 	.word	0x08008154
 80074d8:	0800815e 	.word	0x0800815e
 80074dc:	00000000 	.word	0x00000000
 80074e0:	08007231 	.word	0x08007231
 80074e4:	0800815a 	.word	0x0800815a

080074e8 <__sfputc_r>:
 80074e8:	6893      	ldr	r3, [r2, #8]
 80074ea:	3b01      	subs	r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	b410      	push	{r4}
 80074f0:	6093      	str	r3, [r2, #8]
 80074f2:	da08      	bge.n	8007506 <__sfputc_r+0x1e>
 80074f4:	6994      	ldr	r4, [r2, #24]
 80074f6:	42a3      	cmp	r3, r4
 80074f8:	db01      	blt.n	80074fe <__sfputc_r+0x16>
 80074fa:	290a      	cmp	r1, #10
 80074fc:	d103      	bne.n	8007506 <__sfputc_r+0x1e>
 80074fe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007502:	f7ff bbad 	b.w	8006c60 <__swbuf_r>
 8007506:	6813      	ldr	r3, [r2, #0]
 8007508:	1c58      	adds	r0, r3, #1
 800750a:	6010      	str	r0, [r2, #0]
 800750c:	7019      	strb	r1, [r3, #0]
 800750e:	4608      	mov	r0, r1
 8007510:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007514:	4770      	bx	lr

08007516 <__sfputs_r>:
 8007516:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007518:	4606      	mov	r6, r0
 800751a:	460f      	mov	r7, r1
 800751c:	4614      	mov	r4, r2
 800751e:	18d5      	adds	r5, r2, r3
 8007520:	42ac      	cmp	r4, r5
 8007522:	d101      	bne.n	8007528 <__sfputs_r+0x12>
 8007524:	2000      	movs	r0, #0
 8007526:	e007      	b.n	8007538 <__sfputs_r+0x22>
 8007528:	f814 1b01 	ldrb.w	r1, [r4], #1
 800752c:	463a      	mov	r2, r7
 800752e:	4630      	mov	r0, r6
 8007530:	f7ff ffda 	bl	80074e8 <__sfputc_r>
 8007534:	1c43      	adds	r3, r0, #1
 8007536:	d1f3      	bne.n	8007520 <__sfputs_r+0xa>
 8007538:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800753c <_vfiprintf_r>:
 800753c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007540:	460d      	mov	r5, r1
 8007542:	b09d      	sub	sp, #116	; 0x74
 8007544:	4614      	mov	r4, r2
 8007546:	4698      	mov	r8, r3
 8007548:	4606      	mov	r6, r0
 800754a:	b118      	cbz	r0, 8007554 <_vfiprintf_r+0x18>
 800754c:	6983      	ldr	r3, [r0, #24]
 800754e:	b90b      	cbnz	r3, 8007554 <_vfiprintf_r+0x18>
 8007550:	f7ff fd60 	bl	8007014 <__sinit>
 8007554:	4b89      	ldr	r3, [pc, #548]	; (800777c <_vfiprintf_r+0x240>)
 8007556:	429d      	cmp	r5, r3
 8007558:	d11b      	bne.n	8007592 <_vfiprintf_r+0x56>
 800755a:	6875      	ldr	r5, [r6, #4]
 800755c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800755e:	07d9      	lsls	r1, r3, #31
 8007560:	d405      	bmi.n	800756e <_vfiprintf_r+0x32>
 8007562:	89ab      	ldrh	r3, [r5, #12]
 8007564:	059a      	lsls	r2, r3, #22
 8007566:	d402      	bmi.n	800756e <_vfiprintf_r+0x32>
 8007568:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800756a:	f7ff fa38 	bl	80069de <__retarget_lock_acquire_recursive>
 800756e:	89ab      	ldrh	r3, [r5, #12]
 8007570:	071b      	lsls	r3, r3, #28
 8007572:	d501      	bpl.n	8007578 <_vfiprintf_r+0x3c>
 8007574:	692b      	ldr	r3, [r5, #16]
 8007576:	b9eb      	cbnz	r3, 80075b4 <_vfiprintf_r+0x78>
 8007578:	4629      	mov	r1, r5
 800757a:	4630      	mov	r0, r6
 800757c:	f7ff fbc2 	bl	8006d04 <__swsetup_r>
 8007580:	b1c0      	cbz	r0, 80075b4 <_vfiprintf_r+0x78>
 8007582:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007584:	07dc      	lsls	r4, r3, #31
 8007586:	d50e      	bpl.n	80075a6 <_vfiprintf_r+0x6a>
 8007588:	f04f 30ff 	mov.w	r0, #4294967295
 800758c:	b01d      	add	sp, #116	; 0x74
 800758e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007592:	4b7b      	ldr	r3, [pc, #492]	; (8007780 <_vfiprintf_r+0x244>)
 8007594:	429d      	cmp	r5, r3
 8007596:	d101      	bne.n	800759c <_vfiprintf_r+0x60>
 8007598:	68b5      	ldr	r5, [r6, #8]
 800759a:	e7df      	b.n	800755c <_vfiprintf_r+0x20>
 800759c:	4b79      	ldr	r3, [pc, #484]	; (8007784 <_vfiprintf_r+0x248>)
 800759e:	429d      	cmp	r5, r3
 80075a0:	bf08      	it	eq
 80075a2:	68f5      	ldreq	r5, [r6, #12]
 80075a4:	e7da      	b.n	800755c <_vfiprintf_r+0x20>
 80075a6:	89ab      	ldrh	r3, [r5, #12]
 80075a8:	0598      	lsls	r0, r3, #22
 80075aa:	d4ed      	bmi.n	8007588 <_vfiprintf_r+0x4c>
 80075ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80075ae:	f7ff fa17 	bl	80069e0 <__retarget_lock_release_recursive>
 80075b2:	e7e9      	b.n	8007588 <_vfiprintf_r+0x4c>
 80075b4:	2300      	movs	r3, #0
 80075b6:	9309      	str	r3, [sp, #36]	; 0x24
 80075b8:	2320      	movs	r3, #32
 80075ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80075be:	f8cd 800c 	str.w	r8, [sp, #12]
 80075c2:	2330      	movs	r3, #48	; 0x30
 80075c4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007788 <_vfiprintf_r+0x24c>
 80075c8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80075cc:	f04f 0901 	mov.w	r9, #1
 80075d0:	4623      	mov	r3, r4
 80075d2:	469a      	mov	sl, r3
 80075d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80075d8:	b10a      	cbz	r2, 80075de <_vfiprintf_r+0xa2>
 80075da:	2a25      	cmp	r2, #37	; 0x25
 80075dc:	d1f9      	bne.n	80075d2 <_vfiprintf_r+0x96>
 80075de:	ebba 0b04 	subs.w	fp, sl, r4
 80075e2:	d00b      	beq.n	80075fc <_vfiprintf_r+0xc0>
 80075e4:	465b      	mov	r3, fp
 80075e6:	4622      	mov	r2, r4
 80075e8:	4629      	mov	r1, r5
 80075ea:	4630      	mov	r0, r6
 80075ec:	f7ff ff93 	bl	8007516 <__sfputs_r>
 80075f0:	3001      	adds	r0, #1
 80075f2:	f000 80aa 	beq.w	800774a <_vfiprintf_r+0x20e>
 80075f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80075f8:	445a      	add	r2, fp
 80075fa:	9209      	str	r2, [sp, #36]	; 0x24
 80075fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007600:	2b00      	cmp	r3, #0
 8007602:	f000 80a2 	beq.w	800774a <_vfiprintf_r+0x20e>
 8007606:	2300      	movs	r3, #0
 8007608:	f04f 32ff 	mov.w	r2, #4294967295
 800760c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007610:	f10a 0a01 	add.w	sl, sl, #1
 8007614:	9304      	str	r3, [sp, #16]
 8007616:	9307      	str	r3, [sp, #28]
 8007618:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800761c:	931a      	str	r3, [sp, #104]	; 0x68
 800761e:	4654      	mov	r4, sl
 8007620:	2205      	movs	r2, #5
 8007622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007626:	4858      	ldr	r0, [pc, #352]	; (8007788 <_vfiprintf_r+0x24c>)
 8007628:	f7f8 fdda 	bl	80001e0 <memchr>
 800762c:	9a04      	ldr	r2, [sp, #16]
 800762e:	b9d8      	cbnz	r0, 8007668 <_vfiprintf_r+0x12c>
 8007630:	06d1      	lsls	r1, r2, #27
 8007632:	bf44      	itt	mi
 8007634:	2320      	movmi	r3, #32
 8007636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800763a:	0713      	lsls	r3, r2, #28
 800763c:	bf44      	itt	mi
 800763e:	232b      	movmi	r3, #43	; 0x2b
 8007640:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007644:	f89a 3000 	ldrb.w	r3, [sl]
 8007648:	2b2a      	cmp	r3, #42	; 0x2a
 800764a:	d015      	beq.n	8007678 <_vfiprintf_r+0x13c>
 800764c:	9a07      	ldr	r2, [sp, #28]
 800764e:	4654      	mov	r4, sl
 8007650:	2000      	movs	r0, #0
 8007652:	f04f 0c0a 	mov.w	ip, #10
 8007656:	4621      	mov	r1, r4
 8007658:	f811 3b01 	ldrb.w	r3, [r1], #1
 800765c:	3b30      	subs	r3, #48	; 0x30
 800765e:	2b09      	cmp	r3, #9
 8007660:	d94e      	bls.n	8007700 <_vfiprintf_r+0x1c4>
 8007662:	b1b0      	cbz	r0, 8007692 <_vfiprintf_r+0x156>
 8007664:	9207      	str	r2, [sp, #28]
 8007666:	e014      	b.n	8007692 <_vfiprintf_r+0x156>
 8007668:	eba0 0308 	sub.w	r3, r0, r8
 800766c:	fa09 f303 	lsl.w	r3, r9, r3
 8007670:	4313      	orrs	r3, r2
 8007672:	9304      	str	r3, [sp, #16]
 8007674:	46a2      	mov	sl, r4
 8007676:	e7d2      	b.n	800761e <_vfiprintf_r+0xe2>
 8007678:	9b03      	ldr	r3, [sp, #12]
 800767a:	1d19      	adds	r1, r3, #4
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	9103      	str	r1, [sp, #12]
 8007680:	2b00      	cmp	r3, #0
 8007682:	bfbb      	ittet	lt
 8007684:	425b      	neglt	r3, r3
 8007686:	f042 0202 	orrlt.w	r2, r2, #2
 800768a:	9307      	strge	r3, [sp, #28]
 800768c:	9307      	strlt	r3, [sp, #28]
 800768e:	bfb8      	it	lt
 8007690:	9204      	strlt	r2, [sp, #16]
 8007692:	7823      	ldrb	r3, [r4, #0]
 8007694:	2b2e      	cmp	r3, #46	; 0x2e
 8007696:	d10c      	bne.n	80076b2 <_vfiprintf_r+0x176>
 8007698:	7863      	ldrb	r3, [r4, #1]
 800769a:	2b2a      	cmp	r3, #42	; 0x2a
 800769c:	d135      	bne.n	800770a <_vfiprintf_r+0x1ce>
 800769e:	9b03      	ldr	r3, [sp, #12]
 80076a0:	1d1a      	adds	r2, r3, #4
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	9203      	str	r2, [sp, #12]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	bfb8      	it	lt
 80076aa:	f04f 33ff 	movlt.w	r3, #4294967295
 80076ae:	3402      	adds	r4, #2
 80076b0:	9305      	str	r3, [sp, #20]
 80076b2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007798 <_vfiprintf_r+0x25c>
 80076b6:	7821      	ldrb	r1, [r4, #0]
 80076b8:	2203      	movs	r2, #3
 80076ba:	4650      	mov	r0, sl
 80076bc:	f7f8 fd90 	bl	80001e0 <memchr>
 80076c0:	b140      	cbz	r0, 80076d4 <_vfiprintf_r+0x198>
 80076c2:	2340      	movs	r3, #64	; 0x40
 80076c4:	eba0 000a 	sub.w	r0, r0, sl
 80076c8:	fa03 f000 	lsl.w	r0, r3, r0
 80076cc:	9b04      	ldr	r3, [sp, #16]
 80076ce:	4303      	orrs	r3, r0
 80076d0:	3401      	adds	r4, #1
 80076d2:	9304      	str	r3, [sp, #16]
 80076d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076d8:	482c      	ldr	r0, [pc, #176]	; (800778c <_vfiprintf_r+0x250>)
 80076da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80076de:	2206      	movs	r2, #6
 80076e0:	f7f8 fd7e 	bl	80001e0 <memchr>
 80076e4:	2800      	cmp	r0, #0
 80076e6:	d03f      	beq.n	8007768 <_vfiprintf_r+0x22c>
 80076e8:	4b29      	ldr	r3, [pc, #164]	; (8007790 <_vfiprintf_r+0x254>)
 80076ea:	bb1b      	cbnz	r3, 8007734 <_vfiprintf_r+0x1f8>
 80076ec:	9b03      	ldr	r3, [sp, #12]
 80076ee:	3307      	adds	r3, #7
 80076f0:	f023 0307 	bic.w	r3, r3, #7
 80076f4:	3308      	adds	r3, #8
 80076f6:	9303      	str	r3, [sp, #12]
 80076f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076fa:	443b      	add	r3, r7
 80076fc:	9309      	str	r3, [sp, #36]	; 0x24
 80076fe:	e767      	b.n	80075d0 <_vfiprintf_r+0x94>
 8007700:	fb0c 3202 	mla	r2, ip, r2, r3
 8007704:	460c      	mov	r4, r1
 8007706:	2001      	movs	r0, #1
 8007708:	e7a5      	b.n	8007656 <_vfiprintf_r+0x11a>
 800770a:	2300      	movs	r3, #0
 800770c:	3401      	adds	r4, #1
 800770e:	9305      	str	r3, [sp, #20]
 8007710:	4619      	mov	r1, r3
 8007712:	f04f 0c0a 	mov.w	ip, #10
 8007716:	4620      	mov	r0, r4
 8007718:	f810 2b01 	ldrb.w	r2, [r0], #1
 800771c:	3a30      	subs	r2, #48	; 0x30
 800771e:	2a09      	cmp	r2, #9
 8007720:	d903      	bls.n	800772a <_vfiprintf_r+0x1ee>
 8007722:	2b00      	cmp	r3, #0
 8007724:	d0c5      	beq.n	80076b2 <_vfiprintf_r+0x176>
 8007726:	9105      	str	r1, [sp, #20]
 8007728:	e7c3      	b.n	80076b2 <_vfiprintf_r+0x176>
 800772a:	fb0c 2101 	mla	r1, ip, r1, r2
 800772e:	4604      	mov	r4, r0
 8007730:	2301      	movs	r3, #1
 8007732:	e7f0      	b.n	8007716 <_vfiprintf_r+0x1da>
 8007734:	ab03      	add	r3, sp, #12
 8007736:	9300      	str	r3, [sp, #0]
 8007738:	462a      	mov	r2, r5
 800773a:	4b16      	ldr	r3, [pc, #88]	; (8007794 <_vfiprintf_r+0x258>)
 800773c:	a904      	add	r1, sp, #16
 800773e:	4630      	mov	r0, r6
 8007740:	f3af 8000 	nop.w
 8007744:	4607      	mov	r7, r0
 8007746:	1c78      	adds	r0, r7, #1
 8007748:	d1d6      	bne.n	80076f8 <_vfiprintf_r+0x1bc>
 800774a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800774c:	07d9      	lsls	r1, r3, #31
 800774e:	d405      	bmi.n	800775c <_vfiprintf_r+0x220>
 8007750:	89ab      	ldrh	r3, [r5, #12]
 8007752:	059a      	lsls	r2, r3, #22
 8007754:	d402      	bmi.n	800775c <_vfiprintf_r+0x220>
 8007756:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007758:	f7ff f942 	bl	80069e0 <__retarget_lock_release_recursive>
 800775c:	89ab      	ldrh	r3, [r5, #12]
 800775e:	065b      	lsls	r3, r3, #25
 8007760:	f53f af12 	bmi.w	8007588 <_vfiprintf_r+0x4c>
 8007764:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007766:	e711      	b.n	800758c <_vfiprintf_r+0x50>
 8007768:	ab03      	add	r3, sp, #12
 800776a:	9300      	str	r3, [sp, #0]
 800776c:	462a      	mov	r2, r5
 800776e:	4b09      	ldr	r3, [pc, #36]	; (8007794 <_vfiprintf_r+0x258>)
 8007770:	a904      	add	r1, sp, #16
 8007772:	4630      	mov	r0, r6
 8007774:	f000 f880 	bl	8007878 <_printf_i>
 8007778:	e7e4      	b.n	8007744 <_vfiprintf_r+0x208>
 800777a:	bf00      	nop
 800777c:	08008114 	.word	0x08008114
 8007780:	08008134 	.word	0x08008134
 8007784:	080080f4 	.word	0x080080f4
 8007788:	08008154 	.word	0x08008154
 800778c:	0800815e 	.word	0x0800815e
 8007790:	00000000 	.word	0x00000000
 8007794:	08007517 	.word	0x08007517
 8007798:	0800815a 	.word	0x0800815a

0800779c <_printf_common>:
 800779c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077a0:	4616      	mov	r6, r2
 80077a2:	4699      	mov	r9, r3
 80077a4:	688a      	ldr	r2, [r1, #8]
 80077a6:	690b      	ldr	r3, [r1, #16]
 80077a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80077ac:	4293      	cmp	r3, r2
 80077ae:	bfb8      	it	lt
 80077b0:	4613      	movlt	r3, r2
 80077b2:	6033      	str	r3, [r6, #0]
 80077b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80077b8:	4607      	mov	r7, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	b10a      	cbz	r2, 80077c2 <_printf_common+0x26>
 80077be:	3301      	adds	r3, #1
 80077c0:	6033      	str	r3, [r6, #0]
 80077c2:	6823      	ldr	r3, [r4, #0]
 80077c4:	0699      	lsls	r1, r3, #26
 80077c6:	bf42      	ittt	mi
 80077c8:	6833      	ldrmi	r3, [r6, #0]
 80077ca:	3302      	addmi	r3, #2
 80077cc:	6033      	strmi	r3, [r6, #0]
 80077ce:	6825      	ldr	r5, [r4, #0]
 80077d0:	f015 0506 	ands.w	r5, r5, #6
 80077d4:	d106      	bne.n	80077e4 <_printf_common+0x48>
 80077d6:	f104 0a19 	add.w	sl, r4, #25
 80077da:	68e3      	ldr	r3, [r4, #12]
 80077dc:	6832      	ldr	r2, [r6, #0]
 80077de:	1a9b      	subs	r3, r3, r2
 80077e0:	42ab      	cmp	r3, r5
 80077e2:	dc26      	bgt.n	8007832 <_printf_common+0x96>
 80077e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80077e8:	1e13      	subs	r3, r2, #0
 80077ea:	6822      	ldr	r2, [r4, #0]
 80077ec:	bf18      	it	ne
 80077ee:	2301      	movne	r3, #1
 80077f0:	0692      	lsls	r2, r2, #26
 80077f2:	d42b      	bmi.n	800784c <_printf_common+0xb0>
 80077f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80077f8:	4649      	mov	r1, r9
 80077fa:	4638      	mov	r0, r7
 80077fc:	47c0      	blx	r8
 80077fe:	3001      	adds	r0, #1
 8007800:	d01e      	beq.n	8007840 <_printf_common+0xa4>
 8007802:	6823      	ldr	r3, [r4, #0]
 8007804:	68e5      	ldr	r5, [r4, #12]
 8007806:	6832      	ldr	r2, [r6, #0]
 8007808:	f003 0306 	and.w	r3, r3, #6
 800780c:	2b04      	cmp	r3, #4
 800780e:	bf08      	it	eq
 8007810:	1aad      	subeq	r5, r5, r2
 8007812:	68a3      	ldr	r3, [r4, #8]
 8007814:	6922      	ldr	r2, [r4, #16]
 8007816:	bf0c      	ite	eq
 8007818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800781c:	2500      	movne	r5, #0
 800781e:	4293      	cmp	r3, r2
 8007820:	bfc4      	itt	gt
 8007822:	1a9b      	subgt	r3, r3, r2
 8007824:	18ed      	addgt	r5, r5, r3
 8007826:	2600      	movs	r6, #0
 8007828:	341a      	adds	r4, #26
 800782a:	42b5      	cmp	r5, r6
 800782c:	d11a      	bne.n	8007864 <_printf_common+0xc8>
 800782e:	2000      	movs	r0, #0
 8007830:	e008      	b.n	8007844 <_printf_common+0xa8>
 8007832:	2301      	movs	r3, #1
 8007834:	4652      	mov	r2, sl
 8007836:	4649      	mov	r1, r9
 8007838:	4638      	mov	r0, r7
 800783a:	47c0      	blx	r8
 800783c:	3001      	adds	r0, #1
 800783e:	d103      	bne.n	8007848 <_printf_common+0xac>
 8007840:	f04f 30ff 	mov.w	r0, #4294967295
 8007844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007848:	3501      	adds	r5, #1
 800784a:	e7c6      	b.n	80077da <_printf_common+0x3e>
 800784c:	18e1      	adds	r1, r4, r3
 800784e:	1c5a      	adds	r2, r3, #1
 8007850:	2030      	movs	r0, #48	; 0x30
 8007852:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007856:	4422      	add	r2, r4
 8007858:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800785c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007860:	3302      	adds	r3, #2
 8007862:	e7c7      	b.n	80077f4 <_printf_common+0x58>
 8007864:	2301      	movs	r3, #1
 8007866:	4622      	mov	r2, r4
 8007868:	4649      	mov	r1, r9
 800786a:	4638      	mov	r0, r7
 800786c:	47c0      	blx	r8
 800786e:	3001      	adds	r0, #1
 8007870:	d0e6      	beq.n	8007840 <_printf_common+0xa4>
 8007872:	3601      	adds	r6, #1
 8007874:	e7d9      	b.n	800782a <_printf_common+0x8e>
	...

08007878 <_printf_i>:
 8007878:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800787c:	7e0f      	ldrb	r7, [r1, #24]
 800787e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007880:	2f78      	cmp	r7, #120	; 0x78
 8007882:	4691      	mov	r9, r2
 8007884:	4680      	mov	r8, r0
 8007886:	460c      	mov	r4, r1
 8007888:	469a      	mov	sl, r3
 800788a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800788e:	d807      	bhi.n	80078a0 <_printf_i+0x28>
 8007890:	2f62      	cmp	r7, #98	; 0x62
 8007892:	d80a      	bhi.n	80078aa <_printf_i+0x32>
 8007894:	2f00      	cmp	r7, #0
 8007896:	f000 80d8 	beq.w	8007a4a <_printf_i+0x1d2>
 800789a:	2f58      	cmp	r7, #88	; 0x58
 800789c:	f000 80a3 	beq.w	80079e6 <_printf_i+0x16e>
 80078a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80078a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80078a8:	e03a      	b.n	8007920 <_printf_i+0xa8>
 80078aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80078ae:	2b15      	cmp	r3, #21
 80078b0:	d8f6      	bhi.n	80078a0 <_printf_i+0x28>
 80078b2:	a101      	add	r1, pc, #4	; (adr r1, 80078b8 <_printf_i+0x40>)
 80078b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80078b8:	08007911 	.word	0x08007911
 80078bc:	08007925 	.word	0x08007925
 80078c0:	080078a1 	.word	0x080078a1
 80078c4:	080078a1 	.word	0x080078a1
 80078c8:	080078a1 	.word	0x080078a1
 80078cc:	080078a1 	.word	0x080078a1
 80078d0:	08007925 	.word	0x08007925
 80078d4:	080078a1 	.word	0x080078a1
 80078d8:	080078a1 	.word	0x080078a1
 80078dc:	080078a1 	.word	0x080078a1
 80078e0:	080078a1 	.word	0x080078a1
 80078e4:	08007a31 	.word	0x08007a31
 80078e8:	08007955 	.word	0x08007955
 80078ec:	08007a13 	.word	0x08007a13
 80078f0:	080078a1 	.word	0x080078a1
 80078f4:	080078a1 	.word	0x080078a1
 80078f8:	08007a53 	.word	0x08007a53
 80078fc:	080078a1 	.word	0x080078a1
 8007900:	08007955 	.word	0x08007955
 8007904:	080078a1 	.word	0x080078a1
 8007908:	080078a1 	.word	0x080078a1
 800790c:	08007a1b 	.word	0x08007a1b
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	1d1a      	adds	r2, r3, #4
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	602a      	str	r2, [r5, #0]
 8007918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800791c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007920:	2301      	movs	r3, #1
 8007922:	e0a3      	b.n	8007a6c <_printf_i+0x1f4>
 8007924:	6820      	ldr	r0, [r4, #0]
 8007926:	6829      	ldr	r1, [r5, #0]
 8007928:	0606      	lsls	r6, r0, #24
 800792a:	f101 0304 	add.w	r3, r1, #4
 800792e:	d50a      	bpl.n	8007946 <_printf_i+0xce>
 8007930:	680e      	ldr	r6, [r1, #0]
 8007932:	602b      	str	r3, [r5, #0]
 8007934:	2e00      	cmp	r6, #0
 8007936:	da03      	bge.n	8007940 <_printf_i+0xc8>
 8007938:	232d      	movs	r3, #45	; 0x2d
 800793a:	4276      	negs	r6, r6
 800793c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007940:	485e      	ldr	r0, [pc, #376]	; (8007abc <_printf_i+0x244>)
 8007942:	230a      	movs	r3, #10
 8007944:	e019      	b.n	800797a <_printf_i+0x102>
 8007946:	680e      	ldr	r6, [r1, #0]
 8007948:	602b      	str	r3, [r5, #0]
 800794a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800794e:	bf18      	it	ne
 8007950:	b236      	sxthne	r6, r6
 8007952:	e7ef      	b.n	8007934 <_printf_i+0xbc>
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	6820      	ldr	r0, [r4, #0]
 8007958:	1d19      	adds	r1, r3, #4
 800795a:	6029      	str	r1, [r5, #0]
 800795c:	0601      	lsls	r1, r0, #24
 800795e:	d501      	bpl.n	8007964 <_printf_i+0xec>
 8007960:	681e      	ldr	r6, [r3, #0]
 8007962:	e002      	b.n	800796a <_printf_i+0xf2>
 8007964:	0646      	lsls	r6, r0, #25
 8007966:	d5fb      	bpl.n	8007960 <_printf_i+0xe8>
 8007968:	881e      	ldrh	r6, [r3, #0]
 800796a:	4854      	ldr	r0, [pc, #336]	; (8007abc <_printf_i+0x244>)
 800796c:	2f6f      	cmp	r7, #111	; 0x6f
 800796e:	bf0c      	ite	eq
 8007970:	2308      	moveq	r3, #8
 8007972:	230a      	movne	r3, #10
 8007974:	2100      	movs	r1, #0
 8007976:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800797a:	6865      	ldr	r5, [r4, #4]
 800797c:	60a5      	str	r5, [r4, #8]
 800797e:	2d00      	cmp	r5, #0
 8007980:	bfa2      	ittt	ge
 8007982:	6821      	ldrge	r1, [r4, #0]
 8007984:	f021 0104 	bicge.w	r1, r1, #4
 8007988:	6021      	strge	r1, [r4, #0]
 800798a:	b90e      	cbnz	r6, 8007990 <_printf_i+0x118>
 800798c:	2d00      	cmp	r5, #0
 800798e:	d04d      	beq.n	8007a2c <_printf_i+0x1b4>
 8007990:	4615      	mov	r5, r2
 8007992:	fbb6 f1f3 	udiv	r1, r6, r3
 8007996:	fb03 6711 	mls	r7, r3, r1, r6
 800799a:	5dc7      	ldrb	r7, [r0, r7]
 800799c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80079a0:	4637      	mov	r7, r6
 80079a2:	42bb      	cmp	r3, r7
 80079a4:	460e      	mov	r6, r1
 80079a6:	d9f4      	bls.n	8007992 <_printf_i+0x11a>
 80079a8:	2b08      	cmp	r3, #8
 80079aa:	d10b      	bne.n	80079c4 <_printf_i+0x14c>
 80079ac:	6823      	ldr	r3, [r4, #0]
 80079ae:	07de      	lsls	r6, r3, #31
 80079b0:	d508      	bpl.n	80079c4 <_printf_i+0x14c>
 80079b2:	6923      	ldr	r3, [r4, #16]
 80079b4:	6861      	ldr	r1, [r4, #4]
 80079b6:	4299      	cmp	r1, r3
 80079b8:	bfde      	ittt	le
 80079ba:	2330      	movle	r3, #48	; 0x30
 80079bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80079c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80079c4:	1b52      	subs	r2, r2, r5
 80079c6:	6122      	str	r2, [r4, #16]
 80079c8:	f8cd a000 	str.w	sl, [sp]
 80079cc:	464b      	mov	r3, r9
 80079ce:	aa03      	add	r2, sp, #12
 80079d0:	4621      	mov	r1, r4
 80079d2:	4640      	mov	r0, r8
 80079d4:	f7ff fee2 	bl	800779c <_printf_common>
 80079d8:	3001      	adds	r0, #1
 80079da:	d14c      	bne.n	8007a76 <_printf_i+0x1fe>
 80079dc:	f04f 30ff 	mov.w	r0, #4294967295
 80079e0:	b004      	add	sp, #16
 80079e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80079e6:	4835      	ldr	r0, [pc, #212]	; (8007abc <_printf_i+0x244>)
 80079e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80079ec:	6829      	ldr	r1, [r5, #0]
 80079ee:	6823      	ldr	r3, [r4, #0]
 80079f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80079f4:	6029      	str	r1, [r5, #0]
 80079f6:	061d      	lsls	r5, r3, #24
 80079f8:	d514      	bpl.n	8007a24 <_printf_i+0x1ac>
 80079fa:	07df      	lsls	r7, r3, #31
 80079fc:	bf44      	itt	mi
 80079fe:	f043 0320 	orrmi.w	r3, r3, #32
 8007a02:	6023      	strmi	r3, [r4, #0]
 8007a04:	b91e      	cbnz	r6, 8007a0e <_printf_i+0x196>
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	f023 0320 	bic.w	r3, r3, #32
 8007a0c:	6023      	str	r3, [r4, #0]
 8007a0e:	2310      	movs	r3, #16
 8007a10:	e7b0      	b.n	8007974 <_printf_i+0xfc>
 8007a12:	6823      	ldr	r3, [r4, #0]
 8007a14:	f043 0320 	orr.w	r3, r3, #32
 8007a18:	6023      	str	r3, [r4, #0]
 8007a1a:	2378      	movs	r3, #120	; 0x78
 8007a1c:	4828      	ldr	r0, [pc, #160]	; (8007ac0 <_printf_i+0x248>)
 8007a1e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007a22:	e7e3      	b.n	80079ec <_printf_i+0x174>
 8007a24:	0659      	lsls	r1, r3, #25
 8007a26:	bf48      	it	mi
 8007a28:	b2b6      	uxthmi	r6, r6
 8007a2a:	e7e6      	b.n	80079fa <_printf_i+0x182>
 8007a2c:	4615      	mov	r5, r2
 8007a2e:	e7bb      	b.n	80079a8 <_printf_i+0x130>
 8007a30:	682b      	ldr	r3, [r5, #0]
 8007a32:	6826      	ldr	r6, [r4, #0]
 8007a34:	6961      	ldr	r1, [r4, #20]
 8007a36:	1d18      	adds	r0, r3, #4
 8007a38:	6028      	str	r0, [r5, #0]
 8007a3a:	0635      	lsls	r5, r6, #24
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	d501      	bpl.n	8007a44 <_printf_i+0x1cc>
 8007a40:	6019      	str	r1, [r3, #0]
 8007a42:	e002      	b.n	8007a4a <_printf_i+0x1d2>
 8007a44:	0670      	lsls	r0, r6, #25
 8007a46:	d5fb      	bpl.n	8007a40 <_printf_i+0x1c8>
 8007a48:	8019      	strh	r1, [r3, #0]
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	6123      	str	r3, [r4, #16]
 8007a4e:	4615      	mov	r5, r2
 8007a50:	e7ba      	b.n	80079c8 <_printf_i+0x150>
 8007a52:	682b      	ldr	r3, [r5, #0]
 8007a54:	1d1a      	adds	r2, r3, #4
 8007a56:	602a      	str	r2, [r5, #0]
 8007a58:	681d      	ldr	r5, [r3, #0]
 8007a5a:	6862      	ldr	r2, [r4, #4]
 8007a5c:	2100      	movs	r1, #0
 8007a5e:	4628      	mov	r0, r5
 8007a60:	f7f8 fbbe 	bl	80001e0 <memchr>
 8007a64:	b108      	cbz	r0, 8007a6a <_printf_i+0x1f2>
 8007a66:	1b40      	subs	r0, r0, r5
 8007a68:	6060      	str	r0, [r4, #4]
 8007a6a:	6863      	ldr	r3, [r4, #4]
 8007a6c:	6123      	str	r3, [r4, #16]
 8007a6e:	2300      	movs	r3, #0
 8007a70:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007a74:	e7a8      	b.n	80079c8 <_printf_i+0x150>
 8007a76:	6923      	ldr	r3, [r4, #16]
 8007a78:	462a      	mov	r2, r5
 8007a7a:	4649      	mov	r1, r9
 8007a7c:	4640      	mov	r0, r8
 8007a7e:	47d0      	blx	sl
 8007a80:	3001      	adds	r0, #1
 8007a82:	d0ab      	beq.n	80079dc <_printf_i+0x164>
 8007a84:	6823      	ldr	r3, [r4, #0]
 8007a86:	079b      	lsls	r3, r3, #30
 8007a88:	d413      	bmi.n	8007ab2 <_printf_i+0x23a>
 8007a8a:	68e0      	ldr	r0, [r4, #12]
 8007a8c:	9b03      	ldr	r3, [sp, #12]
 8007a8e:	4298      	cmp	r0, r3
 8007a90:	bfb8      	it	lt
 8007a92:	4618      	movlt	r0, r3
 8007a94:	e7a4      	b.n	80079e0 <_printf_i+0x168>
 8007a96:	2301      	movs	r3, #1
 8007a98:	4632      	mov	r2, r6
 8007a9a:	4649      	mov	r1, r9
 8007a9c:	4640      	mov	r0, r8
 8007a9e:	47d0      	blx	sl
 8007aa0:	3001      	adds	r0, #1
 8007aa2:	d09b      	beq.n	80079dc <_printf_i+0x164>
 8007aa4:	3501      	adds	r5, #1
 8007aa6:	68e3      	ldr	r3, [r4, #12]
 8007aa8:	9903      	ldr	r1, [sp, #12]
 8007aaa:	1a5b      	subs	r3, r3, r1
 8007aac:	42ab      	cmp	r3, r5
 8007aae:	dcf2      	bgt.n	8007a96 <_printf_i+0x21e>
 8007ab0:	e7eb      	b.n	8007a8a <_printf_i+0x212>
 8007ab2:	2500      	movs	r5, #0
 8007ab4:	f104 0619 	add.w	r6, r4, #25
 8007ab8:	e7f5      	b.n	8007aa6 <_printf_i+0x22e>
 8007aba:	bf00      	nop
 8007abc:	08008165 	.word	0x08008165
 8007ac0:	08008176 	.word	0x08008176

08007ac4 <__sread>:
 8007ac4:	b510      	push	{r4, lr}
 8007ac6:	460c      	mov	r4, r1
 8007ac8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007acc:	f000 f8de 	bl	8007c8c <_read_r>
 8007ad0:	2800      	cmp	r0, #0
 8007ad2:	bfab      	itete	ge
 8007ad4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007ad6:	89a3      	ldrhlt	r3, [r4, #12]
 8007ad8:	181b      	addge	r3, r3, r0
 8007ada:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ade:	bfac      	ite	ge
 8007ae0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ae2:	81a3      	strhlt	r3, [r4, #12]
 8007ae4:	bd10      	pop	{r4, pc}

08007ae6 <__swrite>:
 8007ae6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007aea:	461f      	mov	r7, r3
 8007aec:	898b      	ldrh	r3, [r1, #12]
 8007aee:	05db      	lsls	r3, r3, #23
 8007af0:	4605      	mov	r5, r0
 8007af2:	460c      	mov	r4, r1
 8007af4:	4616      	mov	r6, r2
 8007af6:	d505      	bpl.n	8007b04 <__swrite+0x1e>
 8007af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007afc:	2302      	movs	r3, #2
 8007afe:	2200      	movs	r2, #0
 8007b00:	f000 f868 	bl	8007bd4 <_lseek_r>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007b0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007b0e:	81a3      	strh	r3, [r4, #12]
 8007b10:	4632      	mov	r2, r6
 8007b12:	463b      	mov	r3, r7
 8007b14:	4628      	mov	r0, r5
 8007b16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007b1a:	f000 b817 	b.w	8007b4c <_write_r>

08007b1e <__sseek>:
 8007b1e:	b510      	push	{r4, lr}
 8007b20:	460c      	mov	r4, r1
 8007b22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b26:	f000 f855 	bl	8007bd4 <_lseek_r>
 8007b2a:	1c43      	adds	r3, r0, #1
 8007b2c:	89a3      	ldrh	r3, [r4, #12]
 8007b2e:	bf15      	itete	ne
 8007b30:	6560      	strne	r0, [r4, #84]	; 0x54
 8007b32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007b36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007b3a:	81a3      	strheq	r3, [r4, #12]
 8007b3c:	bf18      	it	ne
 8007b3e:	81a3      	strhne	r3, [r4, #12]
 8007b40:	bd10      	pop	{r4, pc}

08007b42 <__sclose>:
 8007b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007b46:	f000 b813 	b.w	8007b70 <_close_r>
	...

08007b4c <_write_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d07      	ldr	r5, [pc, #28]	; (8007b6c <_write_r+0x20>)
 8007b50:	4604      	mov	r4, r0
 8007b52:	4608      	mov	r0, r1
 8007b54:	4611      	mov	r1, r2
 8007b56:	2200      	movs	r2, #0
 8007b58:	602a      	str	r2, [r5, #0]
 8007b5a:	461a      	mov	r2, r3
 8007b5c:	f7f9 fa29 	bl	8000fb2 <_write>
 8007b60:	1c43      	adds	r3, r0, #1
 8007b62:	d102      	bne.n	8007b6a <_write_r+0x1e>
 8007b64:	682b      	ldr	r3, [r5, #0]
 8007b66:	b103      	cbz	r3, 8007b6a <_write_r+0x1e>
 8007b68:	6023      	str	r3, [r4, #0]
 8007b6a:	bd38      	pop	{r3, r4, r5, pc}
 8007b6c:	20003cdc 	.word	0x20003cdc

08007b70 <_close_r>:
 8007b70:	b538      	push	{r3, r4, r5, lr}
 8007b72:	4d06      	ldr	r5, [pc, #24]	; (8007b8c <_close_r+0x1c>)
 8007b74:	2300      	movs	r3, #0
 8007b76:	4604      	mov	r4, r0
 8007b78:	4608      	mov	r0, r1
 8007b7a:	602b      	str	r3, [r5, #0]
 8007b7c:	f7f9 fa35 	bl	8000fea <_close>
 8007b80:	1c43      	adds	r3, r0, #1
 8007b82:	d102      	bne.n	8007b8a <_close_r+0x1a>
 8007b84:	682b      	ldr	r3, [r5, #0]
 8007b86:	b103      	cbz	r3, 8007b8a <_close_r+0x1a>
 8007b88:	6023      	str	r3, [r4, #0]
 8007b8a:	bd38      	pop	{r3, r4, r5, pc}
 8007b8c:	20003cdc 	.word	0x20003cdc

08007b90 <_fstat_r>:
 8007b90:	b538      	push	{r3, r4, r5, lr}
 8007b92:	4d07      	ldr	r5, [pc, #28]	; (8007bb0 <_fstat_r+0x20>)
 8007b94:	2300      	movs	r3, #0
 8007b96:	4604      	mov	r4, r0
 8007b98:	4608      	mov	r0, r1
 8007b9a:	4611      	mov	r1, r2
 8007b9c:	602b      	str	r3, [r5, #0]
 8007b9e:	f7f9 fa30 	bl	8001002 <_fstat>
 8007ba2:	1c43      	adds	r3, r0, #1
 8007ba4:	d102      	bne.n	8007bac <_fstat_r+0x1c>
 8007ba6:	682b      	ldr	r3, [r5, #0]
 8007ba8:	b103      	cbz	r3, 8007bac <_fstat_r+0x1c>
 8007baa:	6023      	str	r3, [r4, #0]
 8007bac:	bd38      	pop	{r3, r4, r5, pc}
 8007bae:	bf00      	nop
 8007bb0:	20003cdc 	.word	0x20003cdc

08007bb4 <_isatty_r>:
 8007bb4:	b538      	push	{r3, r4, r5, lr}
 8007bb6:	4d06      	ldr	r5, [pc, #24]	; (8007bd0 <_isatty_r+0x1c>)
 8007bb8:	2300      	movs	r3, #0
 8007bba:	4604      	mov	r4, r0
 8007bbc:	4608      	mov	r0, r1
 8007bbe:	602b      	str	r3, [r5, #0]
 8007bc0:	f7f9 fa2f 	bl	8001022 <_isatty>
 8007bc4:	1c43      	adds	r3, r0, #1
 8007bc6:	d102      	bne.n	8007bce <_isatty_r+0x1a>
 8007bc8:	682b      	ldr	r3, [r5, #0]
 8007bca:	b103      	cbz	r3, 8007bce <_isatty_r+0x1a>
 8007bcc:	6023      	str	r3, [r4, #0]
 8007bce:	bd38      	pop	{r3, r4, r5, pc}
 8007bd0:	20003cdc 	.word	0x20003cdc

08007bd4 <_lseek_r>:
 8007bd4:	b538      	push	{r3, r4, r5, lr}
 8007bd6:	4d07      	ldr	r5, [pc, #28]	; (8007bf4 <_lseek_r+0x20>)
 8007bd8:	4604      	mov	r4, r0
 8007bda:	4608      	mov	r0, r1
 8007bdc:	4611      	mov	r1, r2
 8007bde:	2200      	movs	r2, #0
 8007be0:	602a      	str	r2, [r5, #0]
 8007be2:	461a      	mov	r2, r3
 8007be4:	f7f9 fa28 	bl	8001038 <_lseek>
 8007be8:	1c43      	adds	r3, r0, #1
 8007bea:	d102      	bne.n	8007bf2 <_lseek_r+0x1e>
 8007bec:	682b      	ldr	r3, [r5, #0]
 8007bee:	b103      	cbz	r3, 8007bf2 <_lseek_r+0x1e>
 8007bf0:	6023      	str	r3, [r4, #0]
 8007bf2:	bd38      	pop	{r3, r4, r5, pc}
 8007bf4:	20003cdc 	.word	0x20003cdc

08007bf8 <memmove>:
 8007bf8:	4288      	cmp	r0, r1
 8007bfa:	b510      	push	{r4, lr}
 8007bfc:	eb01 0402 	add.w	r4, r1, r2
 8007c00:	d902      	bls.n	8007c08 <memmove+0x10>
 8007c02:	4284      	cmp	r4, r0
 8007c04:	4623      	mov	r3, r4
 8007c06:	d807      	bhi.n	8007c18 <memmove+0x20>
 8007c08:	1e43      	subs	r3, r0, #1
 8007c0a:	42a1      	cmp	r1, r4
 8007c0c:	d008      	beq.n	8007c20 <memmove+0x28>
 8007c0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007c12:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007c16:	e7f8      	b.n	8007c0a <memmove+0x12>
 8007c18:	4402      	add	r2, r0
 8007c1a:	4601      	mov	r1, r0
 8007c1c:	428a      	cmp	r2, r1
 8007c1e:	d100      	bne.n	8007c22 <memmove+0x2a>
 8007c20:	bd10      	pop	{r4, pc}
 8007c22:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c26:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007c2a:	e7f7      	b.n	8007c1c <memmove+0x24>

08007c2c <_realloc_r>:
 8007c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c30:	4680      	mov	r8, r0
 8007c32:	4614      	mov	r4, r2
 8007c34:	460e      	mov	r6, r1
 8007c36:	b921      	cbnz	r1, 8007c42 <_realloc_r+0x16>
 8007c38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c3c:	4611      	mov	r1, r2
 8007c3e:	f7fe bf53 	b.w	8006ae8 <_malloc_r>
 8007c42:	b92a      	cbnz	r2, 8007c50 <_realloc_r+0x24>
 8007c44:	f7fe fee4 	bl	8006a10 <_free_r>
 8007c48:	4625      	mov	r5, r4
 8007c4a:	4628      	mov	r0, r5
 8007c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c50:	f000 f82e 	bl	8007cb0 <_malloc_usable_size_r>
 8007c54:	4284      	cmp	r4, r0
 8007c56:	4607      	mov	r7, r0
 8007c58:	d802      	bhi.n	8007c60 <_realloc_r+0x34>
 8007c5a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007c5e:	d812      	bhi.n	8007c86 <_realloc_r+0x5a>
 8007c60:	4621      	mov	r1, r4
 8007c62:	4640      	mov	r0, r8
 8007c64:	f7fe ff40 	bl	8006ae8 <_malloc_r>
 8007c68:	4605      	mov	r5, r0
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	d0ed      	beq.n	8007c4a <_realloc_r+0x1e>
 8007c6e:	42bc      	cmp	r4, r7
 8007c70:	4622      	mov	r2, r4
 8007c72:	4631      	mov	r1, r6
 8007c74:	bf28      	it	cs
 8007c76:	463a      	movcs	r2, r7
 8007c78:	f7fe feb3 	bl	80069e2 <memcpy>
 8007c7c:	4631      	mov	r1, r6
 8007c7e:	4640      	mov	r0, r8
 8007c80:	f7fe fec6 	bl	8006a10 <_free_r>
 8007c84:	e7e1      	b.n	8007c4a <_realloc_r+0x1e>
 8007c86:	4635      	mov	r5, r6
 8007c88:	e7df      	b.n	8007c4a <_realloc_r+0x1e>
	...

08007c8c <_read_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4d07      	ldr	r5, [pc, #28]	; (8007cac <_read_r+0x20>)
 8007c90:	4604      	mov	r4, r0
 8007c92:	4608      	mov	r0, r1
 8007c94:	4611      	mov	r1, r2
 8007c96:	2200      	movs	r2, #0
 8007c98:	602a      	str	r2, [r5, #0]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f7f9 f96c 	bl	8000f78 <_read>
 8007ca0:	1c43      	adds	r3, r0, #1
 8007ca2:	d102      	bne.n	8007caa <_read_r+0x1e>
 8007ca4:	682b      	ldr	r3, [r5, #0]
 8007ca6:	b103      	cbz	r3, 8007caa <_read_r+0x1e>
 8007ca8:	6023      	str	r3, [r4, #0]
 8007caa:	bd38      	pop	{r3, r4, r5, pc}
 8007cac:	20003cdc 	.word	0x20003cdc

08007cb0 <_malloc_usable_size_r>:
 8007cb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007cb4:	1f18      	subs	r0, r3, #4
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	bfbc      	itt	lt
 8007cba:	580b      	ldrlt	r3, [r1, r0]
 8007cbc:	18c0      	addlt	r0, r0, r3
 8007cbe:	4770      	bx	lr

08007cc0 <_init>:
 8007cc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cc2:	bf00      	nop
 8007cc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cc6:	bc08      	pop	{r3}
 8007cc8:	469e      	mov	lr, r3
 8007cca:	4770      	bx	lr

08007ccc <_fini>:
 8007ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cce:	bf00      	nop
 8007cd0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007cd2:	bc08      	pop	{r3}
 8007cd4:	469e      	mov	lr, r3
 8007cd6:	4770      	bx	lr
